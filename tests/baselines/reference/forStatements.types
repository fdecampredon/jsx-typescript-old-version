=== tests/cases/compiler/forStatements.ts ===
interface I {
>I : I

    id: number;
>id : number
}

class C implements I {
>C : C
>I : I

    id: number;
>id : number
}

class D<T>{
>D : D<T>
>T : T

    source: T;
>source : T
>T : T

    recurse: D<T>;
>recurse : D<T>
>D : D<T>
>T : T

    wrapped: D<D<T>>
>wrapped : D<D<T>>
>D : D<T>
>D : D<T>
>T : T
}

function F(x: string): number { return 42; }
>F : typeof F
>x : string

module M {
>M : M

    export class A {
>A : A

        name: string;
>name : string
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : typeof F2
>x : number
>x.toString() : string
>x.toString : (radix?: number) => string
>x : number
>toString : (radix?: number) => string
}

for(var aNumber: number = 9.9;;){} 
>aNumber : number

for(var aString: string = 'this is a string';;){}
>aString : string

for(var aDate: Date = new Date(12);;){}
>aDate : Date
>Date : Date
>new Date(12) : Date
>Date : { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }

for(var anObject: Object = new Object();;){}
>anObject : Object
>Object : Object
>new Object() : Object
>Object : { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }

for(var anAny: any = null;;){}
>anAny : any

for(var aSecondAny: any = undefined;;){}
>aSecondAny : any
>undefined : any

for(var aVoid: void = undefined;;){}
>aVoid : void
>undefined : any

for(var anInterface: I = new C();;){}
>anInterface : I
>I : I
>new C() : C
>C : typeof C

for(var aClass: C = new C();;){}
>aClass : C
>C : C
>new C() : C
>C : typeof C

for(var aGenericClass: D<string> = new D<string>();;){}
>aGenericClass : D<string>
>D : D<T>
>new D<string>() : D<string>
>D : typeof D

for(var anObjectLiteral: I = { id: 12 };;){}
>anObjectLiteral : I
>I : I
>{ id: 12 } : { id: number; }
>id : number

for(var anOtherObjectLiteral: { id: number } = new C();;){}
>anOtherObjectLiteral : { id: number; }
>id : number
>new C() : C
>C : typeof C

for(var aFunction: typeof F = F;;){}
>aFunction : typeof F
>F : typeof F
>F : typeof F

for(var anOtherFunction: (x: string) => number = F;;){}
>anOtherFunction : (x: string) => number
>x : string
>F : typeof F

for(var aLambda: typeof F = (x) => 2;;){}
>aLambda : typeof F
>F : typeof F
>(x) => 2 : (x: string) => number
>x : string

for(var aModule: typeof M = M;;){}
>aModule : typeof M
>M : typeof M
>M : typeof M

for(var aClassInModule: M.A = new M.A();;){}
>aClassInModule : M.A
>M : M
>A : M.A
>new M.A() : M.A
>M.A : typeof M.A
>M : typeof M
>A : typeof M.A

for(var aFunctionInModule: typeof M.F2 = (x) => 'this is a string';;){}
>aFunctionInModule : typeof M.F2
>M : typeof M
>F2 : typeof M.F2
>(x) => 'this is a string' : (x: number) => string
>x : number

