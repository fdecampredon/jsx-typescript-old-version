=== tests/cases/compiler/objectLitGetterSetter.ts ===
            var obj = {};
>obj : {}
>{} : {}

            Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({
>Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({
                get: function () {
                    eval("public = 1;");
                    return 11;
                },
                set: function (v) {
                }
            })) : any
>Object.defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any
>Object : { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }
>defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any
>obj : {}
><PropertyDescriptor>({
                get: function () {
                    eval("public = 1;");
                    return 11;
                },
                set: function (v) {
                }
            }) : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor
>({
                get: function () {
                    eval("public = 1;");
                    return 11;
                },
                set: function (v) {
                }
            }) : { get: () => number; set: (v: any) => void; }
>{
                get: function () {
                    eval("public = 1;");
                    return 11;
                },
                set: function (v) {
                }
            } : { get: () => number; set: (v: any) => void; }

                get: function () {
>get : () => number
>function () {
                    eval("public = 1;");
                    return 11;
                } : () => number

                    eval("public = 1;");
>eval("public = 1;") : any
>eval : typeof eval

                    return 11;
                },
                set: function (v) {
>set : (v: any) => void
>function (v) {
                } : (v: any) => void
>v : any
                }
            }))

