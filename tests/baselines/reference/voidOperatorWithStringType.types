=== tests/cases/compiler/voidOperatorWithStringType.ts ===
Line 1 col 4 IdentifierName "STRING" = string
Line 2 col 4 IdentifierName "STRING1" = string[]
Line 2 col 24 ArrayLiteralExpression "["", "abc"]" = string[]
Line 4 col 9 IdentifierName "foo" = typeof foo
Line 6 col 6 IdentifierName "A" = A
Line 7 col 11 IdentifierName "a" = string
Line 8 col 11 IdentifierName "foo" = () => string
Line 10 col 7 IdentifierName "M" = M
Line 11 col 15 IdentifierName "n" = string
Line 14 col 4 IdentifierName "objA" = A
Line 14 col 11 ObjectCreationExpression "new A()" = A
Line 14 col 15 IdentifierName "A" = typeof A
Line 17 col 4 IdentifierName "ResultIsAny1" = any
Line 17 col 19 VoidExpression "void STRING" = any
Line 17 col 24 IdentifierName "STRING" = string
Line 18 col 4 IdentifierName "ResultIsAny2" = any
Line 18 col 19 VoidExpression "void STRING1" = any
Line 18 col 24 IdentifierName "STRING1" = string[]
Line 21 col 4 IdentifierName "ResultIsAny3" = any
Line 21 col 19 VoidExpression "void """ = any
Line 22 col 4 IdentifierName "ResultIsAny4" = any
Line 22 col 19 VoidExpression "void { x: "", y: "" }" = any
Line 22 col 24 ObjectLiteralExpression "{ x: "", y: "" }" = { x: string; y: string; }
Line 22 col 26 IdentifierName "x" = string
Line 22 col 33 IdentifierName "y" = string
Line 23 col 4 IdentifierName "ResultIsAny5" = any
Line 23 col 19 VoidExpression "void { x: "", y: (s: string) => { return s; } }" = any
Line 23 col 24 ObjectLiteralExpression "{ x: "", y: (s: string) => { return s; } }" = { x: string; y: (s: string) => string; }
Line 23 col 26 IdentifierName "x" = string
Line 23 col 33 IdentifierName "y" = (s: string) => string
Line 23 col 36 ParenthesizedArrowFunctionExpression "(s: string) => { return s; }" = (s: string) => string
Line 23 col 37 IdentifierName "s" = string
Line 23 col 60 IdentifierName "s" = string
Line 26 col 4 IdentifierName "ResultIsAny6" = any
Line 26 col 19 VoidExpression "void objA.a" = any
Line 26 col 24 MemberAccessExpression "objA.a" = string
Line 26 col 24 IdentifierName "objA" = A
Line 26 col 29 IdentifierName "a" = string
Line 27 col 4 IdentifierName "ResultIsAny7" = any
Line 27 col 19 VoidExpression "void M.n" = any
Line 27 col 24 MemberAccessExpression "M.n" = string
Line 27 col 24 IdentifierName "M" = typeof M
Line 27 col 26 IdentifierName "n" = string
Line 28 col 4 IdentifierName "ResultIsAny8" = any
Line 28 col 19 VoidExpression "void STRING1[0]" = any
Line 28 col 24 ElementAccessExpression "STRING1[0]" = string
Line 28 col 24 IdentifierName "STRING1" = string[]
Line 29 col 4 IdentifierName "ResultIsAny9" = any
Line 29 col 19 VoidExpression "void foo()" = any
Line 29 col 24 InvocationExpression "foo()" = string
Line 29 col 24 IdentifierName "foo" = typeof foo
Line 30 col 4 IdentifierName "ResultIsAny10" = any
Line 30 col 20 VoidExpression "void A.foo()" = any
Line 30 col 25 InvocationExpression "A.foo()" = string
Line 30 col 25 MemberAccessExpression "A.foo" = () => string
Line 30 col 25 IdentifierName "A" = typeof A
Line 30 col 27 IdentifierName "foo" = () => string
Line 31 col 4 IdentifierName "ResultIsAny11" = any
Line 31 col 20 VoidExpression "void (STRING + STRING)" = any
Line 31 col 25 ParenthesizedExpression "(STRING + STRING)" = string
Line 31 col 26 AddExpression "STRING + STRING" = string
Line 31 col 26 IdentifierName "STRING" = string
Line 31 col 35 IdentifierName "STRING" = string
Line 32 col 4 IdentifierName "ResultIsAny12" = any
Line 32 col 20 VoidExpression "void STRING.charAt(0)" = any
Line 32 col 25 InvocationExpression "STRING.charAt(0)" = string
Line 32 col 25 MemberAccessExpression "STRING.charAt" = (pos: number) => string
Line 32 col 25 IdentifierName "STRING" = string
Line 32 col 32 IdentifierName "charAt" = (pos: number) => string
Line 35 col 4 IdentifierName "ResultIsAny13" = any
Line 35 col 20 VoidExpression "void void STRING" = any
Line 35 col 25 VoidExpression "void STRING" = any
Line 35 col 30 IdentifierName "STRING" = string
Line 36 col 4 IdentifierName "ResultIsAny14" = any
Line 36 col 20 VoidExpression "void void void (STRING + STRING)" = any
Line 36 col 25 VoidExpression "void void (STRING + STRING)" = any
Line 36 col 30 VoidExpression "void (STRING + STRING)" = any
Line 36 col 35 ParenthesizedExpression "(STRING + STRING)" = string
Line 36 col 36 AddExpression "STRING + STRING" = string
Line 36 col 36 IdentifierName "STRING" = string
Line 36 col 45 IdentifierName "STRING" = string
Line 37 col 0 VoidExpression "// miss assignment operators
void """ = any
Line 40 col 0 VoidExpression "void STRING" = any
Line 40 col 5 IdentifierName "STRING" = string
Line 41 col 0 VoidExpression "void STRING1" = any
Line 41 col 5 IdentifierName "STRING1" = string[]
Line 42 col 0 VoidExpression "void foo()" = any
Line 42 col 5 InvocationExpression "foo()" = string
Line 42 col 5 IdentifierName "foo" = typeof foo
Line 43 col 0 CommaExpression "void objA.a,M.n" = string
Line 43 col 0 VoidExpression "void objA.a" = any
Line 43 col 5 MemberAccessExpression "objA.a" = string
Line 43 col 5 IdentifierName "objA" = A
Line 43 col 10 IdentifierName "a" = string
Line 43 col 12 MemberAccessExpression "M.n" = string
Line 43 col 12 IdentifierName "M" = typeof M
Line 43 col 14 IdentifierName "n" = string