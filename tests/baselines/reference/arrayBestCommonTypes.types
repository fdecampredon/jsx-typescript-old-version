=== tests/cases/compiler/arrayBestCommonTypes.ts ===
Line 0 col 10 IdentifierName "iface" = iface
Line 1 col 6 IdentifierName "base" = base
Line 1 col 22 IdentifierName "iface" = iface
Line 2 col 6 IdentifierName "base2" = base2
Line 2 col 23 IdentifierName "iface" = iface
Line 3 col 6 IdentifierName "derived" = derived
Line 3 col 22 IdentifierName "base" = base
Line 6 col 6 IdentifierName "f" = f
Line 7 col 11 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 7 col 21 IdentifierName "x" = boolean
Line 7 col 33 IdentifierName "y" = boolean
Line 8 col 11 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 8 col 21 IdentifierName "x" = string
Line 8 col 32 IdentifierName "y" = boolean
Line 9 col 11 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 9 col 21 IdentifierName "x" = number
Line 9 col 32 IdentifierName "y" = boolean
Line 10 col 11 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 10 col 21 IdentifierName "x" = any
Line 10 col 29 IdentifierName "y" = boolean
Line 12 col 11 IdentifierName "x" = () => void
Line 13 col 0 CastExpression "<number>(this.voidIfAny([4, 2][0]))" = number
Line 13 col 16 ParenthesizedExpression "(this.voidIfAny([4, 2][0]))" = number
Line 13 col 17 InvocationExpression "this.voidIfAny([4, 2][0])" = number
Line 13 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 13 col 17 ThisKeyword "this" = f
Line 13 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 13 col 32 ElementAccessExpression "[4, 2][0]" = number
Line 13 col 32 ArrayLiteralExpression "[4, 2]" = number[]
Line 14 col 0 CastExpression "<number>(this.voidIfAny([4, 2, undefined][0]))" = number
Line 14 col 16 ParenthesizedExpression "(this.voidIfAny([4, 2, undefined][0]))" = number
Line 14 col 17 InvocationExpression "this.voidIfAny([4, 2, undefined][0])" = number
Line 14 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 14 col 17 ThisKeyword "this" = f
Line 14 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 14 col 32 ElementAccessExpression "[4, 2, undefined][0]" = number
Line 14 col 32 ArrayLiteralExpression "[4, 2, undefined]" = number[]
Line 14 col 39 IdentifierName "undefined" = undefined
Line 15 col 0 CastExpression "<number>(this.voidIfAny([undefined, 2, 4][0]))" = number
Line 15 col 16 ParenthesizedExpression "(this.voidIfAny([undefined, 2, 4][0]))" = number
Line 15 col 17 InvocationExpression "this.voidIfAny([undefined, 2, 4][0])" = number
Line 15 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 15 col 17 ThisKeyword "this" = f
Line 15 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 15 col 32 ElementAccessExpression "[undefined, 2, 4][0]" = number
Line 15 col 32 ArrayLiteralExpression "[undefined, 2, 4]" = number[]
Line 15 col 33 IdentifierName "undefined" = undefined
Line 16 col 0 CastExpression "<number>(this.voidIfAny([null, 2, 4][0]))" = number
Line 16 col 16 ParenthesizedExpression "(this.voidIfAny([null, 2, 4][0]))" = number
Line 16 col 17 InvocationExpression "this.voidIfAny([null, 2, 4][0])" = number
Line 16 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 16 col 17 ThisKeyword "this" = f
Line 16 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 16 col 32 ElementAccessExpression "[null, 2, 4][0]" = number
Line 16 col 32 ArrayLiteralExpression "[null, 2, 4]" = number[]
Line 17 col 0 CastExpression "<number>(this.voidIfAny([2, 4, null][0]))" = number
Line 17 col 16 ParenthesizedExpression "(this.voidIfAny([2, 4, null][0]))" = number
Line 17 col 17 InvocationExpression "this.voidIfAny([2, 4, null][0])" = number
Line 17 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 17 col 17 ThisKeyword "this" = f
Line 17 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 17 col 32 ElementAccessExpression "[2, 4, null][0]" = number
Line 17 col 32 ArrayLiteralExpression "[2, 4, null]" = number[]
Line 18 col 0 CastExpression "<number>(this.voidIfAny([undefined, 4, null][0]))" = number
Line 18 col 16 ParenthesizedExpression "(this.voidIfAny([undefined, 4, null][0]))" = number
Line 18 col 17 InvocationExpression "this.voidIfAny([undefined, 4, null][0])" = number
Line 18 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 18 col 17 ThisKeyword "this" = f
Line 18 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 18 col 32 ElementAccessExpression "[undefined, 4, null][0]" = number
Line 18 col 32 ArrayLiteralExpression "[undefined, 4, null]" = number[]
Line 18 col 33 IdentifierName "undefined" = undefined
Line 19 col 0 CastExpression "<number>(this.voidIfAny(['', "q"][0]))" = number
Line 20 col 16 ParenthesizedExpression "(this.voidIfAny(['', "q"][0]))" = number
Line 20 col 17 InvocationExpression "this.voidIfAny(['', "q"][0])" = number
Line 20 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 20 col 17 ThisKeyword "this" = f
Line 20 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 20 col 32 ElementAccessExpression "['', "q"][0]" = string
Line 20 col 32 ArrayLiteralExpression "['', "q"]" = string[]
Line 21 col 0 CastExpression "<number>(this.voidIfAny(['', "q", undefined][0]))" = number
Line 21 col 16 ParenthesizedExpression "(this.voidIfAny(['', "q", undefined][0]))" = number
Line 21 col 17 InvocationExpression "this.voidIfAny(['', "q", undefined][0])" = number
Line 21 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 21 col 17 ThisKeyword "this" = f
Line 21 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 21 col 32 ElementAccessExpression "['', "q", undefined][0]" = string
Line 21 col 32 ArrayLiteralExpression "['', "q", undefined]" = string[]
Line 21 col 42 IdentifierName "undefined" = undefined
Line 22 col 0 CastExpression "<number>(this.voidIfAny([undefined, "q", ''][0]))" = number
Line 22 col 16 ParenthesizedExpression "(this.voidIfAny([undefined, "q", ''][0]))" = number
Line 22 col 17 InvocationExpression "this.voidIfAny([undefined, "q", ''][0])" = number
Line 22 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 22 col 17 ThisKeyword "this" = f
Line 22 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 22 col 32 ElementAccessExpression "[undefined, "q", ''][0]" = string
Line 22 col 32 ArrayLiteralExpression "[undefined, "q", '']" = string[]
Line 22 col 33 IdentifierName "undefined" = undefined
Line 23 col 0 CastExpression "<number>(this.voidIfAny([null, "q", ''][0]))" = number
Line 23 col 16 ParenthesizedExpression "(this.voidIfAny([null, "q", ''][0]))" = number
Line 23 col 17 InvocationExpression "this.voidIfAny([null, "q", ''][0])" = number
Line 23 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 23 col 17 ThisKeyword "this" = f
Line 23 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 23 col 32 ElementAccessExpression "[null, "q", ''][0]" = string
Line 23 col 32 ArrayLiteralExpression "[null, "q", '']" = string[]
Line 24 col 0 CastExpression "<number>(this.voidIfAny(["q", '', null][0]))" = number
Line 24 col 16 ParenthesizedExpression "(this.voidIfAny(["q", '', null][0]))" = number
Line 24 col 17 InvocationExpression "this.voidIfAny(["q", '', null][0])" = number
Line 24 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 24 col 17 ThisKeyword "this" = f
Line 24 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 24 col 32 ElementAccessExpression "["q", '', null][0]" = string
Line 24 col 32 ArrayLiteralExpression "["q", '', null]" = string[]
Line 25 col 0 CastExpression "<number>(this.voidIfAny([undefined, '', null][0]))" = number
Line 25 col 16 ParenthesizedExpression "(this.voidIfAny([undefined, '', null][0]))" = number
Line 25 col 17 InvocationExpression "this.voidIfAny([undefined, '', null][0])" = number
Line 25 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 25 col 17 ThisKeyword "this" = f
Line 25 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 25 col 32 ElementAccessExpression "[undefined, '', null][0]" = string
Line 25 col 32 ArrayLiteralExpression "[undefined, '', null]" = string[]
Line 25 col 33 IdentifierName "undefined" = undefined
Line 26 col 0 CastExpression "<number>(this.voidIfAny([[3,4],[null]][0][0]))" = number
Line 27 col 16 ParenthesizedExpression "(this.voidIfAny([[3,4],[null]][0][0]))" = number
Line 27 col 17 InvocationExpression "this.voidIfAny([[3,4],[null]][0][0])" = number
Line 27 col 17 MemberAccessExpression "this.voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 27 col 17 ThisKeyword "this" = f
Line 27 col 22 IdentifierName "voidIfAny" = { (x: boolean, y?: boolean): number; (x: string, y?: boolean): number; (x: number, y?: boolean): number; }
Line 27 col 32 ElementAccessExpression "[[3,4],[null]][0][0]" = number
Line 27 col 32 ElementAccessExpression "[[3,4],[null]][0]" = number[]
Line 27 col 32 ArrayLiteralExpression "[[3,4],[null]]" = number[][]
Line 27 col 33 ArrayLiteralExpression "[3,4]" = number[]
Line 27 col 39 ArrayLiteralExpression "[null]" = null[]
Line 30 col 12 IdentifierName "t1" = { x: number; y: base; }[]
Line 30 col 18 IdentifierName "x" = number
Line 30 col 29 IdentifierName "y" = base
Line 30 col 32 IdentifierName "base" = base
Line 30 col 44 ArrayLiteralExpression "[ { x: 7, y: new derived() }, { x: 5, y: new base() } ]" = { x: number; y: base; }[]
Line 30 col 46 ObjectLiteralExpression "{ x: 7, y: new derived() }" = { x: number; y: derived; }
Line 30 col 48 IdentifierName "x" = number
Line 30 col 54 IdentifierName "y" = derived
Line 30 col 57 ObjectCreationExpression "new derived()" = derived
Line 30 col 61 IdentifierName "derived" = { prototype: derived; new(): derived; }
Line 30 col 74 ObjectLiteralExpression "{ x: 5, y: new base() }" = { x: number; y: base; }
Line 30 col 76 IdentifierName "x" = number
Line 30 col 82 IdentifierName "y" = base
Line 30 col 85 ObjectCreationExpression "new base()" = base
Line 30 col 89 IdentifierName "base" = { prototype: base; new(): base; }
Line 31 col 12 IdentifierName "t2" = { x: boolean; y: base; }[]
Line 31 col 18 IdentifierName "x" = boolean
Line 31 col 30 IdentifierName "y" = base
Line 31 col 33 IdentifierName "base" = base
Line 31 col 45 ArrayLiteralExpression "[ { x: true, y: new derived() }, { x: false, y: new base() } ]" = { x: boolean; y: base; }[]
Line 31 col 47 ObjectLiteralExpression "{ x: true, y: new derived() }" = { x: boolean; y: derived; }
Line 31 col 49 IdentifierName "x" = boolean
Line 31 col 58 IdentifierName "y" = derived
Line 31 col 61 ObjectCreationExpression "new derived()" = derived
Line 31 col 65 IdentifierName "derived" = { prototype: derived; new(): derived; }
Line 31 col 78 ObjectLiteralExpression "{ x: false, y: new base() }" = { x: boolean; y: base; }
Line 31 col 80 IdentifierName "x" = boolean
Line 31 col 90 IdentifierName "y" = base
Line 31 col 93 ObjectCreationExpression "new base()" = base
Line 31 col 97 IdentifierName "base" = { prototype: base; new(): base; }
Line 32 col 12 IdentifierName "t3" = { x: string; y: base; }[]
Line 32 col 18 IdentifierName "x" = string
Line 32 col 29 IdentifierName "y" = base
Line 32 col 32 IdentifierName "base" = base
Line 32 col 44 ArrayLiteralExpression "[ { x: undefined, y: new base() }, { x: '', y: new derived() } ]" = { x: any; y: base; }[]
Line 32 col 46 ObjectLiteralExpression "{ x: undefined, y: new base() }" = { x: any; y: base; }
Line 32 col 48 IdentifierName "x" = any
Line 32 col 51 IdentifierName "undefined" = undefined
Line 32 col 62 IdentifierName "y" = base
Line 32 col 65 ObjectCreationExpression "new base()" = base
Line 32 col 69 IdentifierName "base" = { prototype: base; new(): base; }
Line 32 col 79 ObjectLiteralExpression "{ x: '', y: new derived() }" = { x: string; y: derived; }
Line 32 col 81 IdentifierName "x" = string
Line 32 col 88 IdentifierName "y" = derived
Line 32 col 91 ObjectCreationExpression "new derived()" = derived
Line 32 col 95 IdentifierName "derived" = { prototype: derived; new(): derived; }
Line 34 col 12 IdentifierName "anyObj" = any
Line 36 col 12 IdentifierName "a1" = { x: any; y: string; }[]
Line 36 col 17 ArrayLiteralExpression "[ {x: 0, y: 'a'}, {x: 'a', y: 'a'}, {x: anyObj, y: 'a'} ]" = { x: any; y: string; }[]
Line 36 col 19 ObjectLiteralExpression "{x: 0, y: 'a'}" = { x: number; y: string; }
Line 36 col 20 IdentifierName "x" = number
Line 36 col 26 IdentifierName "y" = string
Line 36 col 35 ObjectLiteralExpression "{x: 'a', y: 'a'}" = { x: string; y: string; }
Line 36 col 36 IdentifierName "x" = string
Line 36 col 44 IdentifierName "y" = string
Line 36 col 53 ObjectLiteralExpression "{x: anyObj, y: 'a'}" = { x: any; y: string; }
Line 36 col 54 IdentifierName "x" = any
Line 36 col 57 IdentifierName "anyObj" = any
Line 36 col 65 IdentifierName "y" = string
Line 37 col 12 IdentifierName "a2" = { x: any; y: string; }[]
Line 37 col 17 ArrayLiteralExpression "[ {x: anyObj, y: 'a'}, {x: 0, y: 'a'}, {x: 'a', y: 'a'} ]" = { x: any; y: string; }[]
Line 37 col 19 ObjectLiteralExpression "{x: anyObj, y: 'a'}" = { x: any; y: string; }
Line 37 col 20 IdentifierName "x" = any
Line 37 col 23 IdentifierName "anyObj" = any
Line 37 col 31 IdentifierName "y" = string
Line 37 col 40 ObjectLiteralExpression "{x: 0, y: 'a'}" = { x: number; y: string; }
Line 37 col 41 IdentifierName "x" = number
Line 37 col 47 IdentifierName "y" = string
Line 37 col 56 ObjectLiteralExpression "{x: 'a', y: 'a'}" = { x: string; y: string; }
Line 37 col 57 IdentifierName "x" = string
Line 37 col 65 IdentifierName "y" = string
Line 38 col 12 IdentifierName "a3" = { x: any; y: string; }[]
Line 38 col 17 ArrayLiteralExpression "[ {x: 0, y: 'a'}, {x: anyObj, y: 'a'}, {x: 'a', y: 'a'} ]" = { x: any; y: string; }[]
Line 38 col 19 ObjectLiteralExpression "{x: 0, y: 'a'}" = { x: number; y: string; }
Line 38 col 20 IdentifierName "x" = number
Line 38 col 26 IdentifierName "y" = string
Line 38 col 35 ObjectLiteralExpression "{x: anyObj, y: 'a'}" = { x: any; y: string; }
Line 38 col 36 IdentifierName "x" = any
Line 38 col 39 IdentifierName "anyObj" = any
Line 38 col 47 IdentifierName "y" = string
Line 38 col 56 ObjectLiteralExpression "{x: 'a', y: 'a'}" = { x: string; y: string; }
Line 38 col 57 IdentifierName "x" = string
Line 38 col 65 IdentifierName "y" = string
Line 40 col 12 IdentifierName "ifaceObj" = iface
Line 40 col 22 IdentifierName "iface" = iface
Line 41 col 12 IdentifierName "baseObj" = base
Line 41 col 22 ObjectCreationExpression "new base()" = base
Line 41 col 26 IdentifierName "base" = { prototype: base; new(): base; }
Line 42 col 12 IdentifierName "base2Obj" = base2
Line 42 col 23 ObjectCreationExpression "new base2()" = base2
Line 42 col 27 IdentifierName "base2" = { prototype: base2; new(): base2; }
Line 44 col 12 IdentifierName "b1" = iface[]
Line 44 col 17 ArrayLiteralExpression "[ baseObj, base2Obj, ifaceObj ]" = iface[]
Line 44 col 19 IdentifierName "baseObj" = base
Line 44 col 28 IdentifierName "base2Obj" = base2
Line 44 col 38 IdentifierName "ifaceObj" = iface
Line 45 col 12 IdentifierName "b2" = iface[]
Line 45 col 17 ArrayLiteralExpression "[ base2Obj, baseObj, ifaceObj ]" = iface[]
Line 45 col 19 IdentifierName "base2Obj" = base2
Line 45 col 29 IdentifierName "baseObj" = base
Line 45 col 38 IdentifierName "ifaceObj" = iface
Line 46 col 12 IdentifierName "b3" = base2[]
Line 46 col 17 ArrayLiteralExpression "[ baseObj, ifaceObj, base2Obj ]" = base2[]
Line 46 col 19 IdentifierName "baseObj" = base
Line 46 col 28 IdentifierName "ifaceObj" = iface
Line 46 col 38 IdentifierName "base2Obj" = base2
Line 47 col 12 IdentifierName "b4" = base2[]
Line 47 col 17 ArrayLiteralExpression "[ ifaceObj, baseObj, base2Obj ]" = base2[]
Line 47 col 19 IdentifierName "ifaceObj" = iface
Line 47 col 29 IdentifierName "baseObj" = base
Line 47 col 38 IdentifierName "base2Obj" = base2