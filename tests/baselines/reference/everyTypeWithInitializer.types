=== tests/cases/compiler/everyTypeWithInitializer.ts ===
interface I {
>I : I

    id: number;
>id : number
}

class C implements I {
>C : C
>I : I

    id: number;
>id : number
}

class D<T>{
>D : D<T>
>T : T

    source: T;
>source : T
>T : T

    recurse: D<T>;
>recurse : D<T>
>D : D<T>
>T : T

    wrapped: D<D<T>>
>wrapped : D<D<T>>
>D : D<T>
>D : D<T>
>T : T
}

function F(x: string): number { return 42; }
>F : typeof F
>x : string

module M {
>M : M

    export class A {
>A : A

        name: string;
>name : string
    }

    export function F2(x: number): string { return x.toString(); }
>F2 : typeof F2
>x : number
>x.toString() : string
>x.toString : (radix?: number) => string
>x : number
>toString : (radix?: number) => string
}

var aNumber = 9.9;
>aNumber : number

var aString = 'this is a string';
>aString : string

var aDate = new Date(12);
>aDate : Date
>new Date(12) : Date
>Date : { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }

var anObject = new Object();
>anObject : Object
>new Object() : Object
>Object : { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }

var anAny = null;
>anAny : any

var anOtherAny = <any> new C();
>anOtherAny : any
><any> new C() : any
>new C() : C
>C : typeof C

var anUndefined = undefined;
>anUndefined : any
>undefined : any


var aClass = new C();
>aClass : C
>new C() : C
>C : typeof C

var aGenericClass = new D<string>();
>aGenericClass : D<string>
>new D<string>() : D<string>
>D : typeof D

var anObjectLiteral = { id: 12 };
>anObjectLiteral : { id: number; }
>{ id: 12 } : { id: number; }
>id : number

var aFunction = F;
>aFunction : typeof F
>F : typeof F

var aLambda = (x) => 2;
>aLambda : (x: any) => number
>(x) => 2 : (x: any) => number
>x : any

var aModule = M;
>aModule : typeof M
>M : typeof M

var aClassInModule = new M.A();
>aClassInModule : M.A
>new M.A() : M.A
>M.A : typeof M.A
>M : typeof M
>A : typeof M.A

var aFunctionInModule = M.F2;
>aFunctionInModule : typeof M.F2
>M.F2 : typeof M.F2
>M : typeof M
>F2 : typeof M.F2

// no initializer or annotation, so this is an 'any'
var x;
>x : any


