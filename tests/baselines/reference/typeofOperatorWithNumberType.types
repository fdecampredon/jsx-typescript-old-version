=== tests/cases/compiler/typeofOperatorWithNumberType.ts ===
Line 1 col 4 IdentifierName "NUMBER" = number
Line 2 col 4 IdentifierName "NUMBER1" = number[]
Line 2 col 24 ArrayLiteralExpression "[1, 2]" = number[]
Line 4 col 9 IdentifierName "foo" = typeof foo
Line 6 col 6 IdentifierName "A" = A
Line 7 col 11 IdentifierName "a" = number
Line 8 col 11 IdentifierName "foo" = () => number
Line 10 col 7 IdentifierName "M" = M
Line 11 col 15 IdentifierName "n" = number
Line 14 col 4 IdentifierName "objA" = A
Line 14 col 11 ObjectCreationExpression "new A()" = A
Line 14 col 15 IdentifierName "A" = typeof A
Line 17 col 4 IdentifierName "ResultIsString1" = string
Line 17 col 22 TypeOfExpression "typeof NUMBER" = string
Line 17 col 29 IdentifierName "NUMBER" = number
Line 18 col 4 IdentifierName "ResultIsString2" = string
Line 18 col 22 TypeOfExpression "typeof NUMBER1" = string
Line 18 col 29 IdentifierName "NUMBER1" = number[]
Line 21 col 4 IdentifierName "ResultIsString3" = string
Line 21 col 22 TypeOfExpression "typeof 1" = string
Line 22 col 4 IdentifierName "ResultIsString4" = string
Line 22 col 22 TypeOfExpression "typeof { x: 1, y: 2}" = string
Line 22 col 29 ObjectLiteralExpression "{ x: 1, y: 2}" = { x: number; y: number; }
Line 22 col 31 IdentifierName "x" = number
Line 22 col 37 IdentifierName "y" = number
Line 23 col 4 IdentifierName "ResultIsString5" = string
Line 23 col 22 TypeOfExpression "typeof { x: 1, y: (n: number) => { return n; } }" = string
Line 23 col 29 ObjectLiteralExpression "{ x: 1, y: (n: number) => { return n; } }" = { x: number; y: (n: number) => number; }
Line 23 col 31 IdentifierName "x" = number
Line 23 col 37 IdentifierName "y" = (n: number) => number
Line 23 col 40 ParenthesizedArrowFunctionExpression "(n: number) => { return n; }" = (n: number) => number
Line 23 col 41 IdentifierName "n" = number
Line 23 col 64 IdentifierName "n" = number
Line 26 col 4 IdentifierName "ResultIsString6" = string
Line 26 col 22 TypeOfExpression "typeof objA.a" = string
Line 26 col 29 MemberAccessExpression "objA.a" = number
Line 26 col 29 IdentifierName "objA" = A
Line 26 col 34 IdentifierName "a" = number
Line 27 col 4 IdentifierName "ResultIsString7" = string
Line 27 col 22 TypeOfExpression "typeof M.n" = string
Line 27 col 29 MemberAccessExpression "M.n" = number
Line 27 col 29 IdentifierName "M" = typeof M
Line 27 col 31 IdentifierName "n" = number
Line 28 col 4 IdentifierName "ResultIsString8" = string
Line 28 col 22 TypeOfExpression "typeof NUMBER1[0]" = string
Line 28 col 29 ElementAccessExpression "NUMBER1[0]" = number
Line 28 col 29 IdentifierName "NUMBER1" = number[]
Line 29 col 4 IdentifierName "ResultIsString9" = string
Line 29 col 22 TypeOfExpression "typeof foo()" = string
Line 29 col 29 InvocationExpression "foo()" = number
Line 29 col 29 IdentifierName "foo" = typeof foo
Line 30 col 4 IdentifierName "ResultIsString10" = string
Line 30 col 23 TypeOfExpression "typeof A.foo()" = string
Line 30 col 30 InvocationExpression "A.foo()" = number
Line 30 col 30 MemberAccessExpression "A.foo" = () => number
Line 30 col 30 IdentifierName "A" = typeof A
Line 30 col 32 IdentifierName "foo" = () => number
Line 31 col 4 IdentifierName "ResultIsString11" = string
Line 31 col 23 TypeOfExpression "typeof (NUMBER + NUMBER)" = string
Line 31 col 30 ParenthesizedExpression "(NUMBER + NUMBER)" = number
Line 31 col 31 AddExpression "NUMBER + NUMBER" = number
Line 31 col 31 IdentifierName "NUMBER" = number
Line 31 col 40 IdentifierName "NUMBER" = number
Line 34 col 4 IdentifierName "ResultIsString12" = string
Line 34 col 23 TypeOfExpression "typeof typeof NUMBER" = string
Line 34 col 30 TypeOfExpression "typeof NUMBER" = string
Line 34 col 37 IdentifierName "NUMBER" = number
Line 35 col 4 IdentifierName "ResultIsString13" = string
Line 35 col 23 TypeOfExpression "typeof typeof typeof (NUMBER + NUMBER)" = string
Line 35 col 30 TypeOfExpression "typeof typeof (NUMBER + NUMBER)" = string
Line 35 col 37 TypeOfExpression "typeof (NUMBER + NUMBER)" = string
Line 35 col 44 ParenthesizedExpression "(NUMBER + NUMBER)" = number
Line 35 col 45 AddExpression "NUMBER + NUMBER" = number
Line 35 col 45 IdentifierName "NUMBER" = number
Line 35 col 54 IdentifierName "NUMBER" = number
Line 36 col 0 TypeOfExpression "// miss assignment operators
typeof 1" = string
Line 39 col 0 TypeOfExpression "typeof NUMBER" = string
Line 39 col 7 IdentifierName "NUMBER" = number
Line 40 col 0 TypeOfExpression "typeof NUMBER1" = string
Line 40 col 7 IdentifierName "NUMBER1" = number[]
Line 41 col 0 TypeOfExpression "typeof foo()" = string
Line 41 col 7 InvocationExpression "foo()" = number
Line 41 col 7 IdentifierName "foo" = typeof foo
Line 42 col 0 TypeOfExpression "typeof objA.a" = string
Line 42 col 7 MemberAccessExpression "objA.a" = number
Line 42 col 7 IdentifierName "objA" = A
Line 42 col 12 IdentifierName "a" = number
Line 43 col 0 TypeOfExpression "typeof M.n" = string
Line 43 col 7 MemberAccessExpression "M.n" = number
Line 43 col 7 IdentifierName "M" = typeof M
Line 43 col 9 IdentifierName "n" = number
Line 44 col 0 CommaExpression "typeof objA.a, M.n" = number
Line 44 col 0 TypeOfExpression "typeof objA.a" = string
Line 44 col 7 MemberAccessExpression "objA.a" = number
Line 44 col 7 IdentifierName "objA" = A
Line 44 col 12 IdentifierName "a" = number
Line 44 col 15 MemberAccessExpression "M.n" = number
Line 44 col 15 IdentifierName "M" = typeof M
Line 44 col 17 IdentifierName "n" = number
Line 47 col 4 IdentifierName "z" = number
Line 48 col 4 IdentifierName "x" = number[]
Line 49 col 3 TypeOfExpression "typeof NUMBER" = string
Line 49 col 10 IdentifierName "NUMBER" = number
Line 50 col 3 TypeOfExpression "typeof NUMBER1" = string
Line 50 col 10 IdentifierName "NUMBER1" = number[]
Line 51 col 3 TypeOfExpression "typeof foo" = string
Line 51 col 10 IdentifierName "foo" = typeof foo
Line 52 col 4 IdentifierName "y" = { a: number; b: number; }
Line 52 col 8 ObjectLiteralExpression "{ a: 1, b: 2 }" = { a: number; b: number; }
Line 52 col 10 IdentifierName "a" = number
Line 52 col 16 IdentifierName "b" = number
Line 53 col 3 TypeOfExpression "typeof y.a" = string
Line 53 col 10 MemberAccessExpression "y.a" = number
Line 53 col 10 IdentifierName "y" = { a: number; b: number; }
Line 53 col 12 IdentifierName "a" = number
Line 54 col 3 TypeOfExpression "typeof objA.a" = string
Line 54 col 10 MemberAccessExpression "objA.a" = number
Line 54 col 10 IdentifierName "objA" = A
Line 54 col 15 IdentifierName "a" = number
Line 55 col 3 TypeOfExpression "typeof A.foo" = string
Line 55 col 10 MemberAccessExpression "A.foo" = () => number
Line 55 col 10 IdentifierName "A" = typeof A
Line 55 col 12 IdentifierName "foo" = () => number
Line 56 col 3 TypeOfExpression "typeof M.n" = string
Line 56 col 10 MemberAccessExpression "M.n" = number
Line 56 col 10 IdentifierName "M" = typeof M
Line 56 col 12 IdentifierName "n" = number