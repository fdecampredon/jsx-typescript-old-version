=== tests/cases/compiler/callSignaturesWithOptionalParameters2.ts ===
Line 2 col 9 IdentifierName "foo" = typeof foo
Line 2 col 13 IdentifierName "x" = number
Line 3 col 9 IdentifierName "foo" = typeof foo
Line 3 col 13 IdentifierName "x" = number
Line 4 col 0 InvocationExpression "foo(1)" = any
Line 4 col 0 IdentifierName "foo" = typeof foo
Line 6 col 0 InvocationExpression "foo()" = any
Line 6 col 0 IdentifierName "foo" = typeof foo
Line 8 col 9 IdentifierName "foo2" = typeof foo2
Line 8 col 14 IdentifierName "x" = number
Line 9 col 9 IdentifierName "foo2" = typeof foo2
Line 9 col 14 IdentifierName "x" = number
Line 9 col 25 IdentifierName "y" = number
Line 10 col 9 IdentifierName "foo2" = typeof foo2
Line 10 col 14 IdentifierName "x" = number
Line 10 col 25 IdentifierName "y" = number
Line 11 col 0 InvocationExpression "foo2(1)" = any
Line 11 col 0 IdentifierName "foo2" = typeof foo2
Line 13 col 0 InvocationExpression "foo2(1, 2)" = any
Line 13 col 0 IdentifierName "foo2" = typeof foo2
Line 15 col 6 IdentifierName "C" = C
Line 16 col 0 IdentifierName "foo" = { (x?: number): any; }
Line 16 col 8 IdentifierName "x" = number
Line 17 col 0 IdentifierName "foo" = { (x?: number): any; }
Line 17 col 8 IdentifierName "x" = number
Line 18 col 0 IdentifierName "foo2" = { (x: number): any; (x: number, y?: number): any; }
Line 19 col 9 IdentifierName "x" = number
Line 20 col 0 IdentifierName "foo2" = { (x: number): any; (x: number, y?: number): any; }
Line 20 col 9 IdentifierName "x" = number
Line 20 col 20 IdentifierName "y" = number
Line 21 col 0 IdentifierName "foo2" = { (x: number): any; (x: number, y?: number): any; }
Line 21 col 9 IdentifierName "x" = number
Line 21 col 20 IdentifierName "y" = number
Line 24 col 4 IdentifierName "c" = C
Line 24 col 7 IdentifierName "C" = C
Line 25 col 0 InvocationExpression "c.foo()" = any
Line 25 col 0 MemberAccessExpression "c.foo" = { (x?: number): any; }
Line 25 col 0 IdentifierName "c" = C
Line 25 col 2 IdentifierName "foo" = { (x?: number): any; }
Line 26 col 0 InvocationExpression "c.foo(1)" = any
Line 26 col 0 MemberAccessExpression "c.foo" = { (x?: number): any; }
Line 26 col 0 IdentifierName "c" = C
Line 26 col 2 IdentifierName "foo" = { (x?: number): any; }
Line 27 col 0 InvocationExpression "c.foo2(1)" = any
Line 27 col 0 MemberAccessExpression "c.foo2" = { (x: number): any; (x: number, y?: number): any; }
Line 27 col 0 IdentifierName "c" = C
Line 28 col 2 IdentifierName "foo2" = { (x: number): any; (x: number, y?: number): any; }
Line 29 col 0 InvocationExpression "c.foo2(1, 2)" = any
Line 29 col 0 MemberAccessExpression "c.foo2" = { (x: number): any; (x: number, y?: number): any; }
Line 29 col 0 IdentifierName "c" = C
Line 29 col 2 IdentifierName "foo2" = { (x: number): any; (x: number, y?: number): any; }
Line 31 col 10 IdentifierName "I" = I
Line 32 col 5 IdentifierName "x" = number
Line 33 col 5 IdentifierName "x" = number
Line 33 col 17 IdentifierName "y" = number
Line 34 col 0 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 34 col 8 IdentifierName "x" = number
Line 34 col 19 IdentifierName "y" = number
Line 35 col 0 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 35 col 8 IdentifierName "x" = number
Line 35 col 19 IdentifierName "y" = number
Line 35 col 31 IdentifierName "z" = number
Line 38 col 4 IdentifierName "i" = I
Line 38 col 7 IdentifierName "I" = I
Line 39 col 0 InvocationExpression "i()" = any
Line 39 col 0 IdentifierName "i" = I
Line 40 col 0 InvocationExpression "i(1)" = any
Line 40 col 0 IdentifierName "i" = I
Line 41 col 0 InvocationExpression "i(1, 2)" = any
Line 41 col 0 IdentifierName "i" = I
Line 42 col 0 InvocationExpression "i.foo(1)" = any
Line 42 col 0 MemberAccessExpression "i.foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 42 col 0 IdentifierName "i" = I
Line 42 col 2 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 43 col 0 InvocationExpression "i.foo(1, 2)" = any
Line 43 col 0 MemberAccessExpression "i.foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 43 col 0 IdentifierName "i" = I
Line 43 col 2 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 44 col 0 InvocationExpression "i.foo(1, 2, 3)" = any
Line 44 col 0 MemberAccessExpression "i.foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 44 col 0 IdentifierName "i" = I
Line 44 col 2 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 46 col 4 IdentifierName "a" = { foo(x: number, y?: number): any; foo(x: number, y?: number, z?: number): any; (x?: number): any; (x?: number, y?: number): any; }
Line 47 col 5 IdentifierName "x" = number
Line 48 col 5 IdentifierName "x" = number
Line 48 col 17 IdentifierName "y" = number
Line 49 col 0 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 49 col 8 IdentifierName "x" = number
Line 49 col 19 IdentifierName "y" = number
Line 50 col 0 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 50 col 8 IdentifierName "x" = number
Line 50 col 19 IdentifierName "y" = number
Line 50 col 31 IdentifierName "z" = number
Line 52 col 0 InvocationExpression "a()" = any
Line 52 col 0 IdentifierName "a" = { foo(x: number, y?: number): any; foo(x: number, y?: number, z?: number): any; (x?: number): any; (x?: number, y?: number): any; }
Line 54 col 0 InvocationExpression "a(1)" = any
Line 54 col 0 IdentifierName "a" = { foo(x: number, y?: number): any; foo(x: number, y?: number, z?: number): any; (x?: number): any; (x?: number, y?: number): any; }
Line 55 col 0 InvocationExpression "a(1, 2)" = any
Line 55 col 0 IdentifierName "a" = { foo(x: number, y?: number): any; foo(x: number, y?: number, z?: number): any; (x?: number): any; (x?: number, y?: number): any; }
Line 56 col 0 InvocationExpression "a.foo(1)" = any
Line 56 col 0 MemberAccessExpression "a.foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 56 col 0 IdentifierName "a" = { foo(x: number, y?: number): any; foo(x: number, y?: number, z?: number): any; (x?: number): any; (x?: number, y?: number): any; }
Line 56 col 2 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 57 col 0 InvocationExpression "a.foo(1, 2)" = any
Line 57 col 0 MemberAccessExpression "a.foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 57 col 0 IdentifierName "a" = { foo(x: number, y?: number): any; foo(x: number, y?: number, z?: number): any; (x?: number): any; (x?: number, y?: number): any; }
Line 57 col 2 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 58 col 0 InvocationExpression "a.foo(1, 2, 3)" = any
Line 58 col 0 MemberAccessExpression "a.foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }
Line 58 col 0 IdentifierName "a" = { foo(x: number, y?: number): any; foo(x: number, y?: number, z?: number): any; (x?: number): any; (x?: number, y?: number): any; }
Line 58 col 2 IdentifierName "foo" = { (x: number, y?: number): any; (x: number, y?: number, z?: number): any; }