=== tests/cases/compiler/objectTypesIdentityWithPrivates2.ts ===
// object types are identical structurally

class C<T> {
>C : C<T>
>T : T

    private foo: T;
>foo : T
>T : T
}

class D<T> extends C<T> {
>D : D<T>
>T : T
>C : C<T>
>T : T
}

function foo1(x: C<string>);
>foo1 : typeof foo1
>x : C<string>
>C : C<T>

function foo1(x: C<number>); // ok
>foo1 : typeof foo1
>x : C<number>
>C : C<T>

function foo1(x: any) { }
>foo1 : typeof foo1
>x : any

function foo2(x: D<string>);
>foo2 : typeof foo2
>x : D<string>
>D : D<T>

function foo2(x: D<number>); // ok
>foo2 : typeof foo2
>x : D<number>
>D : D<T>

function foo2(x: any) { }
>foo2 : typeof foo2
>x : any

function foo3(x: C<string>);
>foo3 : typeof foo3
>x : C<string>
>C : C<T>

function foo3(x: D<number>); // ok
>foo3 : typeof foo3
>x : D<number>
>D : D<T>

function foo3(x: any) { }
>foo3 : typeof foo3
>x : any

function foo4(x: C<number>): number; 
>foo4 : typeof foo4
>x : C<number>
>C : C<T>

function foo4(x: D<number>): string; // BUG 831926
>foo4 : typeof foo4
>x : D<number>
>D : D<T>

function foo4(x: any): any { }
>foo4 : typeof foo4
>x : any

var r = foo4(new C<number>());
>r : number
>foo4(new C<number>()) : number
>foo4 : typeof foo4
>new C<number>() : C<number>
>C : typeof C

var r = foo4(new D<number>());
>r : number
>foo4(new D<number>()) : number
>foo4 : typeof foo4
>new D<number>() : D<number>
>D : typeof D

function foo5(x: C<number>): number;
>foo5 : typeof foo5
>x : C<number>
>C : C<T>

function foo5(x: C<number>): string; // error
>foo5 : typeof foo5
>x : C<number>
>C : C<T>

function foo5(x: any): any { }
>foo5 : typeof foo5
>x : any

function foo6(x: D<number>): number;
>foo6 : typeof foo6
>x : D<number>
>D : D<T>

function foo6(x: D<number>): string; // error
>foo6 : typeof foo6
>x : D<number>
>D : D<T>

function foo6(x: any): any { }
>foo6 : typeof foo6
>x : any



