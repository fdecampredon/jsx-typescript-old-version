=== tests/cases/compiler/genericCallWithArrayLiteralArgs.ts ===
function foo<T>(t: T) {
>foo : typeof foo
>T : T
>t : T
>T : T

    return t;
>t : T
}

var r = foo([1, 2]); // number[]
>r : number[]
>foo([1, 2]) : number[]
>foo : typeof foo
>[1, 2] : number[]

var r = foo<number[]>([1, 2]); // number[]
>r : number[]
>foo<number[]>([1, 2]) : number[]
>foo : typeof foo
>[1, 2] : number[]

var ra = foo<any[]>([1, 2]); // any[]
>ra : any[]
>foo<any[]>([1, 2]) : any[]
>foo : typeof foo
>[1, 2] : any[]

var r2 = foo([]); // any[]
>r2 : any[]
>foo([]) : any[]
>foo : typeof foo
>[] : any[]

var r3 = foo<number[]>([]); // number[]
>r3 : number[]
>foo<number[]>([]) : number[]
>foo : typeof foo
>[] : number[]

var r4 = foo([1, '']); // {}[]
>r4 : {}[]
>foo([1, '']) : {}[]
>foo : typeof foo
>[1, ''] : {}[]

var r5 = foo<any[]>([1, '']); // any[]
>r5 : any[]
>foo<any[]>([1, '']) : any[]
>foo : typeof foo
>[1, ''] : any[]

var r6 = foo<Object[]>([1, '']); // Object[]
>r6 : Object[]
>foo<Object[]>([1, '']) : Object[]
>foo : typeof foo
>Object : Object
>[1, ''] : Object[]

