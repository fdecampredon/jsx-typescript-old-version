=== tests/cases/compiler/subtypingWithCallSignatures.ts ===
module CallSignature {
>CallSignature : CallSignature

    declare function foo1(cb: (x: number) => void): typeof cb;
>foo1 : typeof foo1
>cb : (x: number) => void
>x : number
>cb : (x: number) => void

    declare function foo1(cb: any): any;
>foo1 : typeof foo1
>cb : any

    var r = foo1((x: number) => 1); // ok because base returns void
>r : (x: number) => void
>foo1((x: number) => 1) : (x: number) => void
>foo1 : typeof foo1
>(x: number) => 1 : (x: number) => number
>x : number

    var r2 = foo1(<T>(x: T) => ''); // ok because base returns void
>r2 : (x: number) => void
>foo1(<T>(x: T) => '') : (x: number) => void
>foo1 : typeof foo1
><T>(x: T) => '' : <T>(x: T) => string
>T : T
>x : T
>T : T

    declare function foo2(cb: (x: number, y: number) => void): typeof cb;
>foo2 : typeof foo2
>cb : (x: number, y: number) => void
>x : number
>y : number
>cb : (x: number, y: number) => void

    declare function foo2(cb: any): any;
>foo2 : typeof foo2
>cb : any

    var r3 = foo2((x: number, y: number) => 1); // ok because base returns void
>r3 : (x: number, y: number) => void
>foo2((x: number, y: number) => 1) : (x: number, y: number) => void
>foo2 : typeof foo2
>(x: number, y: number) => 1 : (x: number, y: number) => number
>x : number
>y : number

    var r4 = foo2(<T>(x: T) => ''); // ok because base returns void
>r4 : (x: number, y: number) => void
>foo2(<T>(x: T) => '') : (x: number, y: number) => void
>foo2 : typeof foo2
><T>(x: T) => '' : <T>(x: T) => string
>T : T
>x : T
>T : T
}
