==== tests/cases/compiler/subtypingWithNumericIndexer.ts (2 errors) ====
    // Derived type indexer must be subtype of base type indexer
    
    interface Base { foo: string; }
    interface Derived extends Base { bar: string; }
    interface Derived2 extends Derived { baz: string; }
    
    class A {
        [x: number]: Base;
    }
    
    class B extends A {
        [x: number]: Derived; // ok
    }
    
    class B2 extends A {
        [x: number]: Derived2; // ok
    }
    
    module Generics {
        class A<T extends Base> {
            [x: number]: T;
        }
    
        class B extends A<Base> {
            [x: number]: Derived; // ok
        }
    
        class B2 extends A<Base> {
            [x: number]: Derived2; // ok
        }
    
        class B3<T extends Base> extends A<T> {
              ~~
!!! subtypingWithNumericIndexer.ts(32,11): error TS2141: Class 'Generics.B3<T>' cannot extend class 'Generics.A<T>':
!!! 	Index signatures of types 'B3<T>' and 'A<T>' are incompatible.
            [x: number]: Derived; // error, BUG?
        }
    
        class B4<T extends Base> extends A<T> {
              ~~
!!! subtypingWithNumericIndexer.ts(36,11): error TS2141: Class 'Generics.B4<T>' cannot extend class 'Generics.A<T>':
!!! 	Index signatures of types 'B4<T>' and 'A<T>' are incompatible.
            [x: number]: Derived2; // error, BUG?
        }
    }