==== tests/cases/compiler/objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts (10 errors) ====
    // object types are identical structurally
    
    class A {
        foo<T>(x: T): T { return null; }
    }
    
    class B<U> {
        foo(x: U): U { return null; }
    }
    
    class C<V> {
        foo(x: V): V { return null; }
    }
    
    interface I<X> {
        foo(x: X): X;
    }
    
    interface I2 {
        foo<Y>(x: Y): Y;
    }
    
    var a: { foo<Z>(x: Z): Z }
    var b = { foo<A>(x: A) { return x; } };
    
    function foo1(x: A);
    function foo1(x: A); // error
    ~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(27,1): error TS2144: Duplicate overload signature for 'foo1'.
    function foo1(x: any) { }
    
    function foo1b(x: B<string>);
    function foo1b(x: B<string>); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(31,1): error TS2144: Duplicate overload signature for 'foo1b'.
    function foo1b(x: any) { }
    
    function foo1c(x: C<string>);
    function foo1c(x: C<string>); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(35,1): error TS2144: Duplicate overload signature for 'foo1c'.
    function foo1c(x: any) { }
    
    function foo2(x: I<string>);
    function foo2(x: I<string>); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(39,1): error TS2144: Duplicate overload signature for 'foo2'.
    function foo2(x: any) { }
    
    function foo3(x: typeof a);
    function foo3(x: typeof a); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(43,1): error TS2144: Duplicate overload signature for 'foo3'.
    function foo3(x: any) { }
    
    function foo4(x: typeof b);
    function foo4(x: typeof b); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(47,1): error TS2144: Duplicate overload signature for 'foo4'.
    function foo4(x: any) { }
    
    function foo5(x: A);
    function foo5(x: B<string>); // ok
    function foo5(x: any) { }
    
    function foo5b(x: A);
    function foo5b(x: C<string>); // ok
    function foo5b(x: any) { }
    
    function foo6(x: A);
    function foo6(x: I<string>); // ok
    function foo6(x: any) { }
    
    function foo7(x: A);
    function foo7(x: typeof a); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(63,1): error TS2144: Duplicate overload signature for 'foo7'.
    function foo7(x: any) { }
    
    function foo8(x: B<string>);
    function foo8(x: I<string>); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(67,1): error TS2144: Duplicate overload signature for 'foo8'.
    function foo8(x: any) { }
    
    function foo9(x: B<string>);
    function foo9(x: C<string>); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(71,1): error TS2144: Duplicate overload signature for 'foo9'.
    function foo9(x: any) { }
    
    function foo10(x: B<string>);
    function foo10(x: typeof a); // ok
    function foo10(x: any) { }
    
    function foo11(x: B<string>);
    function foo11(x: typeof b); // ok
    function foo11(x: any) { }
    
    function foo12(x: I<string>);
    function foo12(x: C<string>); // error
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts(83,1): error TS2144: Duplicate overload signature for 'foo12'.
    function foo12(x: any) { }
    
    function foo12b(x: I2);
    function foo12b(x: C<string>); // ok
    function foo12b(x: any) { }
    
    function foo13(x: I<string>);
    function foo13(x: typeof a); // ok
    function foo13(x: any) { }
    
    function foo14(x: I<string>);
    function foo14(x: typeof b); // ok
    function foo14(x: any) { }
    
    function foo15(x: I2);
    function foo15(x: C<number>); // ok
    function foo15(x: any) { }