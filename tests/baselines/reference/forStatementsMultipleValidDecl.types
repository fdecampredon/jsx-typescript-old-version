=== tests/cases/compiler/forStatementsMultipleValidDecl.ts ===
// all expected to be valid

for (var x: number; ;) { }
>x : number

for (var x = 2; ;) { }
>x : number

for (var x = <number>undefined; ;) { }
>x : number
><number>undefined : number
>undefined : any

// new declaration space, making redeclaring x as a string valid
function declSpace() {
>declSpace : typeof declSpace

    for (var x = 'this is a string'; ;) { }
>x : string
}
interface Point { x: number; y: number; }
>Point : Point
>x : number
>y : number

for (var p: Point; ;) { }
>p : Point
>Point : Point

for (var p = { x: 1, y: 2 }; ;) { }
>p : { x: number; y: number; }
>{ x: 1, y: 2 } : { x: number; y: number; }
>x : number
>y : number

for (var p: Point = { x: 0, y: undefined }; ;) { }
>p : Point
>Point : Point
>{ x: 0, y: undefined } : { x: number; y: any; }
>x : number
>y : any
>undefined : any

for (var p = { x: 1, y: <number>undefined }; ;) { }
>p : { x: number; y: number; }
>{ x: 1, y: <number>undefined } : { x: number; y: number; }
>x : number
>y : number
><number>undefined : number
>undefined : any

for (var p: { x: number; y: number; } = { x: 1, y: 2 }; ;) { }
>p : { x: number; y: number; }
>x : number
>y : number
>{ x: 1, y: 2 } : { x: number; y: number; }
>x : number
>y : number

for (var p = <{ x: number; y: number; }>{ x: 0, y: undefined }; ;) { }
>p : { x: number; y: number; }
><{ x: number; y: number; }>{ x: 0, y: undefined } : { x: number; y: number; }
>x : number
>y : number
>{ x: 0, y: undefined } : { x: number; y: any; }
>x : number
>y : any
>undefined : any

for (var p: typeof p; ;) { }
>p : Point
>p : Point

for (var fn = function (s: string) { return 42; }; ;) { }
>fn : (s: string) => number
>function (s: string) { return 42; } : (s: string) => number
>s : string

for (var fn = (s: string) => 3; ;) { }
>fn : (s: string) => number
>(s: string) => 3 : (s: string) => number
>s : string

for (var fn: (s: string) => number; ;) { }
>fn : (s: string) => number
>s : string

for (var fn: { (s: string): number }; ;) { }
>fn : (s: string) => number
>s : string

for (var fn = <(s: string) => number> null; ;) { }
>fn : (s: string) => number
><(s: string) => number> null : (s: string) => number
>s : string

for (var fn: typeof fn; ;) { }
>fn : (s: string) => number
>fn : (s: string) => number

for (var a: string[]; ;) { }
>a : string[]

for (var a = ['a', 'b']; ;) { }
>a : string[]
>['a', 'b'] : string[]

for (var a = <string[]>[]; ;) { }
>a : string[]
><string[]>[] : string[]
>[] : string[]

for (var a: string[] = []; ;) { }
>a : string[]
>[] : string[]

for (var a = new Array<string>(); ;) { }
>a : string[]
>new Array<string>() : string[]
>Array : { isArray(arg: any): boolean; prototype: any[]; (arrayLength?: number): any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new(arrayLength?: number): any[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }

for (var a: typeof a; ;) { }
>a : string[]
>a : string[]

