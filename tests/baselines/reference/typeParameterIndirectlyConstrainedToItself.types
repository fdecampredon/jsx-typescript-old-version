=== tests/cases/compiler/typeParameterIndirectlyConstrainedToItself.ts ===
Line 1 col 6 IdentifierName "C" = C<U, T>
Line 1 col 8 IdentifierName "U" = U
Line 1 col 18 IdentifierName "T" = T
Line 1 col 21 IdentifierName "T" = T
Line 1 col 31 IdentifierName "U" = U
Line 2 col 6 IdentifierName "C2" = C2<T, U, V>
Line 2 col 9 IdentifierName "T" = T
Line 2 col 19 IdentifierName "U" = U
Line 2 col 22 IdentifierName "U" = U
Line 2 col 32 IdentifierName "V" = V
Line 2 col 35 IdentifierName "V" = V
Line 2 col 45 IdentifierName "T" = T
Line 4 col 10 IdentifierName "I" = I<U, T>
Line 4 col 12 IdentifierName "U" = U
Line 4 col 22 IdentifierName "T" = T
Line 4 col 25 IdentifierName "T" = T
Line 4 col 35 IdentifierName "U" = U
Line 5 col 10 IdentifierName "I2" = I2<T, U, V>
Line 5 col 13 IdentifierName "T" = T
Line 5 col 23 IdentifierName "U" = U
Line 5 col 26 IdentifierName "U" = U
Line 5 col 36 IdentifierName "V" = V
Line 5 col 39 IdentifierName "V" = V
Line 5 col 49 IdentifierName "T" = T
Line 7 col 9 IdentifierName "f" = typeof f
Line 7 col 11 IdentifierName "U" = U
Line 7 col 21 IdentifierName "T" = T
Line 7 col 24 IdentifierName "T" = T
Line 7 col 34 IdentifierName "U" = U
Line 8 col 9 IdentifierName "f2" = typeof f2
Line 8 col 12 IdentifierName "T" = T
Line 8 col 22 IdentifierName "U" = U
Line 8 col 25 IdentifierName "U" = U
Line 8 col 35 IdentifierName "V" = V
Line 8 col 38 IdentifierName "V" = V
Line 8 col 48 IdentifierName "T" = T
Line 10 col 4 IdentifierName "a" = { <U extends T, T extends U>(): void; <T extends U, U extends V, V extends T>(): void; }
Line 11 col 5 IdentifierName "U" = U
Line 11 col 15 IdentifierName "T" = T
Line 11 col 18 IdentifierName "T" = T
Line 11 col 28 IdentifierName "U" = U
Line 12 col 5 IdentifierName "T" = T
Line 12 col 15 IdentifierName "U" = U
Line 12 col 18 IdentifierName "U" = U
Line 12 col 28 IdentifierName "V" = V
Line 12 col 31 IdentifierName "V" = V
Line 12 col 41 IdentifierName "T" = T
Line 15 col 4 IdentifierName "b" = <U extends T, T extends U>() => void
Line 15 col 8 ParenthesizedArrowFunctionExpression "<U extends T, T extends U>() => { }" = <U extends T, T extends U>() => void
Line 15 col 9 IdentifierName "U" = U
Line 15 col 19 IdentifierName "T" = T
Line 15 col 22 IdentifierName "T" = T
Line 15 col 32 IdentifierName "U" = U
Line 16 col 4 IdentifierName "b2" = <T extends U, U extends V, V extends T>() => void
Line 16 col 9 ParenthesizedArrowFunctionExpression "<T extends U, U extends V, V extends T>() => { }" = <T extends U, U extends V, V extends T>() => void
Line 16 col 10 IdentifierName "T" = T
Line 16 col 20 IdentifierName "U" = U
Line 16 col 23 IdentifierName "U" = U
Line 16 col 33 IdentifierName "V" = V
Line 16 col 36 IdentifierName "V" = V
Line 16 col 46 IdentifierName "T" = T