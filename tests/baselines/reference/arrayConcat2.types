=== tests/cases/compiler/arrayConcat2.ts ===
Line 0 col 4 IdentifierName "a" = string[]
Line 0 col 18 ArrayLiteralExpression "[]" = string[]
Line 1 col 0 InvocationExpression "a.concat("hello", 'world')" = string[]
Line 1 col 0 MemberAccessExpression "a.concat" = { <U extends T[]>(...items: U[]): string[]; (...items: string[]): string[]; }
Line 1 col 0 IdentifierName "a" = string[]
Line 1 col 2 IdentifierName "concat" = { <U extends T[]>(...items: U[]): string[]; (...items: string[]): string[]; }
Line 2 col 0 InvocationExpression "a.concat('Hello')" = string[]
Line 2 col 0 MemberAccessExpression "a.concat" = { <U extends T[]>(...items: U[]): string[]; (...items: string[]): string[]; }
Line 2 col 0 IdentifierName "a" = string[]
Line 3 col 2 IdentifierName "concat" = { <U extends T[]>(...items: U[]): string[]; (...items: string[]): string[]; }
Line 5 col 4 IdentifierName "b" = string[]
Line 5 col 8 ObjectCreationExpression "new Array<string>()" = string[]
Line 5 col 12 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }
Line 6 col 0 InvocationExpression "b.concat('hello')" = string[]
Line 6 col 0 MemberAccessExpression "b.concat" = { <U extends T[]>(...items: U[]): string[]; (...items: string[]): string[]; }
Line 6 col 0 IdentifierName "b" = string[]
Line 6 col 2 IdentifierName "concat" = { <U extends T[]>(...items: U[]): string[]; (...items: string[]): string[]; }