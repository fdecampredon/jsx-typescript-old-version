=== tests/cases/compiler/moduleAliasInterface.ts ===
module _modes {
>_modes : _modes

 export interface IMode {
>IMode : IMode
  
 }
 
 export class Mode {
>Mode : Mode
  
 }
}

// _modes. // produces an internal error - please implement in derived class

module editor {
>editor : editor

 import modes = _modes;
>modes : modes
>_modes : _modes
 
 var i : modes.IMode;
>i : _modes.IMode
>modes : modes
>IMode : _modes.IMode
  
 // If you just use p1:modes, the compiler accepts it - should be an error
 class Bug { 
>Bug : Bug

  constructor(p1: modes.IMode, p2: modes.Mode) { }// should be an error on p2 - it's not exported
>p1 : _modes.IMode
>modes : modes
>IMode : _modes.IMode
>p2 : _modes.Mode
>modes : modes
>Mode : _modes.Mode

  public foo(p1:modes.IMode) {
>foo : (p1: _modes.IMode) => void
>p1 : _modes.IMode
>modes : modes
>IMode : _modes.IMode
   
  } 
 }
}

import modesOuter = _modes;
>modesOuter : modesOuter
>_modes : _modes

module editor2 {
>editor2 : editor2
 
 var i : modesOuter.IMode;
>i : _modes.IMode
>modesOuter : modesOuter
>IMode : _modes.IMode
 
 class Bug {
>Bug : Bug

     constructor(p1: modesOuter.IMode, p2: modesOuter.Mode) { }// no error here, since modesOuter is declared externally
>p1 : _modes.IMode
>modesOuter : modesOuter
>IMode : _modes.IMode
>p2 : _modes.Mode
>modesOuter : modesOuter
>Mode : _modes.Mode
  
 }
 
  module Foo { export class Bar{} }
>Foo : Foo
>Bar : Bar
 
  class Bug2 {
>Bug2 : Bug2

      constructor(p1: Foo.Bar, p2: modesOuter.Mode) { }
>p1 : Foo.Bar
>Foo : Foo
>Bar : Foo.Bar
>p2 : _modes.Mode
>modesOuter : modesOuter
>Mode : _modes.Mode
  }
}

module A1 {
>A1 : A1

    export interface A1I1 {}
>A1I1 : A1I1

    export class A1C1 {}
>A1C1 : A1C1
}

module B1 {
>B1 : B1

    import A1Alias1 = A1;
>A1Alias1 : A1Alias1
>A1 : A1
    
    var i : A1Alias1.A1I1;   
>i : A1.A1I1
>A1Alias1 : A1Alias1
>A1I1 : A1.A1I1

    var c : A1Alias1.A1C1;
>c : A1.A1C1
>A1Alias1 : A1Alias1
>A1C1 : A1.A1C1
}

