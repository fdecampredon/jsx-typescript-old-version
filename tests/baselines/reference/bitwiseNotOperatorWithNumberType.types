=== tests/cases/compiler/bitwiseNotOperatorWithNumberType.ts ===
Line 1 col 4 IdentifierName "NUMBER" = number
Line 2 col 4 IdentifierName "NUMBER1" = number[]
Line 2 col 24 ArrayLiteralExpression "[1, 2]" = number[]
Line 4 col 9 IdentifierName "foo" = typeof foo
Line 6 col 6 IdentifierName "A" = A
Line 7 col 11 IdentifierName "a" = number
Line 8 col 11 IdentifierName "foo" = () => number
Line 10 col 7 IdentifierName "M" = M
Line 11 col 15 IdentifierName "n" = number
Line 14 col 4 IdentifierName "objA" = A
Line 14 col 11 ObjectCreationExpression "new A()" = A
Line 14 col 15 IdentifierName "A" = typeof A
Line 17 col 4 IdentifierName "ResultIsNumber1" = number
Line 17 col 22 BitwiseNotExpression "~NUMBER" = number
Line 17 col 23 IdentifierName "NUMBER" = number
Line 18 col 4 IdentifierName "ResultIsNumber2" = number
Line 18 col 22 BitwiseNotExpression "~NUMBER1" = number
Line 18 col 23 IdentifierName "NUMBER1" = number[]
Line 21 col 4 IdentifierName "ResultIsNumber3" = number
Line 21 col 22 BitwiseNotExpression "~1" = number
Line 22 col 4 IdentifierName "ResultIsNumber4" = number
Line 22 col 22 BitwiseNotExpression "~{ x: 1, y: 2}" = number
Line 22 col 23 ObjectLiteralExpression "{ x: 1, y: 2}" = { x: number; y: number; }
Line 22 col 25 IdentifierName "x" = number
Line 22 col 31 IdentifierName "y" = number
Line 23 col 4 IdentifierName "ResultIsNumber5" = number
Line 23 col 22 BitwiseNotExpression "~{ x: 1, y: (n: number) => { return n; } }" = number
Line 23 col 23 ObjectLiteralExpression "{ x: 1, y: (n: number) => { return n; } }" = { x: number; y: (n: number) => number; }
Line 23 col 25 IdentifierName "x" = number
Line 23 col 31 IdentifierName "y" = (n: number) => number
Line 23 col 34 ParenthesizedArrowFunctionExpression "(n: number) => { return n; }" = (n: number) => number
Line 23 col 35 IdentifierName "n" = number
Line 23 col 58 IdentifierName "n" = number
Line 26 col 4 IdentifierName "ResultIsNumber6" = number
Line 26 col 22 BitwiseNotExpression "~objA.a" = number
Line 26 col 23 MemberAccessExpression "objA.a" = number
Line 26 col 23 IdentifierName "objA" = A
Line 26 col 28 IdentifierName "a" = number
Line 27 col 4 IdentifierName "ResultIsNumber7" = number
Line 27 col 22 BitwiseNotExpression "~M.n" = number
Line 27 col 23 MemberAccessExpression "M.n" = number
Line 27 col 23 IdentifierName "M" = typeof M
Line 27 col 25 IdentifierName "n" = number
Line 28 col 4 IdentifierName "ResultIsNumber8" = number
Line 28 col 22 BitwiseNotExpression "~NUMBER1[0]" = number
Line 28 col 23 ElementAccessExpression "NUMBER1[0]" = number
Line 28 col 23 IdentifierName "NUMBER1" = number[]
Line 29 col 4 IdentifierName "ResultIsNumber9" = number
Line 29 col 22 BitwiseNotExpression "~foo()" = number
Line 29 col 23 InvocationExpression "foo()" = number
Line 29 col 23 IdentifierName "foo" = typeof foo
Line 30 col 4 IdentifierName "ResultIsNumber10" = number
Line 30 col 23 BitwiseNotExpression "~A.foo()" = number
Line 30 col 24 InvocationExpression "A.foo()" = number
Line 30 col 24 MemberAccessExpression "A.foo" = () => number
Line 30 col 24 IdentifierName "A" = typeof A
Line 30 col 26 IdentifierName "foo" = () => number
Line 31 col 4 IdentifierName "ResultIsNumber11" = number
Line 31 col 23 BitwiseNotExpression "~(NUMBER + NUMBER)" = number
Line 31 col 24 ParenthesizedExpression "(NUMBER + NUMBER)" = number
Line 31 col 25 AddExpression "NUMBER + NUMBER" = number
Line 31 col 25 IdentifierName "NUMBER" = number
Line 31 col 34 IdentifierName "NUMBER" = number
Line 34 col 4 IdentifierName "ResultIsNumber12" = number
Line 34 col 23 BitwiseNotExpression "~~NUMBER" = number
Line 34 col 24 BitwiseNotExpression "~NUMBER" = number
Line 34 col 25 IdentifierName "NUMBER" = number
Line 35 col 4 IdentifierName "ResultIsNumber13" = number
Line 35 col 23 BitwiseNotExpression "~~~(NUMBER + NUMBER)" = number
Line 35 col 24 BitwiseNotExpression "~~(NUMBER + NUMBER)" = number
Line 35 col 25 BitwiseNotExpression "~(NUMBER + NUMBER)" = number
Line 35 col 26 ParenthesizedExpression "(NUMBER + NUMBER)" = number
Line 35 col 27 AddExpression "NUMBER + NUMBER" = number
Line 35 col 27 IdentifierName "NUMBER" = number
Line 35 col 36 IdentifierName "NUMBER" = number
Line 36 col 0 BitwiseNotExpression "// miss assignment operators
~NUMBER" = number
Line 38 col 1 IdentifierName "NUMBER" = number
Line 39 col 0 BitwiseNotExpression "~NUMBER1" = number
Line 39 col 1 IdentifierName "NUMBER1" = number[]
Line 40 col 0 BitwiseNotExpression "~foo()" = number
Line 40 col 1 InvocationExpression "foo()" = number
Line 40 col 1 IdentifierName "foo" = typeof foo
Line 41 col 0 BitwiseNotExpression "~objA.a" = number
Line 41 col 1 MemberAccessExpression "objA.a" = number
Line 41 col 1 IdentifierName "objA" = A
Line 41 col 6 IdentifierName "a" = number
Line 42 col 0 BitwiseNotExpression "~M.n" = number
Line 42 col 1 MemberAccessExpression "M.n" = number
Line 42 col 1 IdentifierName "M" = typeof M
Line 42 col 3 IdentifierName "n" = number
Line 43 col 0 CommaExpression "~objA.a, M.n" = number
Line 43 col 0 BitwiseNotExpression "~objA.a" = number
Line 43 col 1 MemberAccessExpression "objA.a" = number
Line 43 col 1 IdentifierName "objA" = A
Line 43 col 6 IdentifierName "a" = number
Line 43 col 9 MemberAccessExpression "M.n" = number
Line 43 col 9 IdentifierName "M" = typeof M
Line 43 col 11 IdentifierName "n" = number