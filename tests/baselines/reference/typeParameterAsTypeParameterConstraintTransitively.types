=== tests/cases/compiler/typeParameterAsTypeParameterConstraintTransitively.ts ===
// using a type parameter as a constraint for a type parameter is valid
// no errors expected

interface A { foo: number }
>A : A
>foo : number

interface B extends A { bar: string; }
>B : B
>A : A
>bar : string

interface C extends B { baz: boolean; }
>C : C
>B : B
>baz : boolean

var a: A;
>a : A
>A : A

var b: B;
>b : B
>B : B

var c: C;
>c : C
>C : C

function foo<T, U, V>(x: T, y: U, z: V): V { return z; }
>foo : typeof foo
>T : T
>U : U
>V : V
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V
>V : V
>z : V

//function foo<T, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }
>//function foo<T, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }

foo(1, 2, 3) : number
>//function foo<T, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }

foo : typeof foo

foo(1, 2, 3);
foo({ x: 1 }, { x: 1, y: '' }, { x: 2, y: '', z: true });
>foo({ x: 1 }, { x: 1, y: '' }, { x: 2, y: '', z: true }) : { x: number; y: string; z: boolean; }
>foo : typeof foo
>{ x: 1 } : { x: number; }
>x : number
>{ x: 1, y: '' } : { x: number; y: string; }
>x : number
>y : string
>{ x: 2, y: '', z: true } : { x: number; y: string; z: boolean; }
>x : number
>y : string
>z : boolean

foo(a, b, c);
>foo(a, b, c) : C
>foo : typeof foo
>a : A
>b : B
>c : C

foo(a, b, { foo: 1, bar: '', hm: true });
>foo(a, b, { foo: 1, bar: '', hm: true }) : { foo: number; bar: string; hm: boolean; }
>foo : typeof foo
>a : A
>b : B
>{ foo: 1, bar: '', hm: true } : { foo: number; bar: string; hm: boolean; }
>foo : number
>bar : string
>hm : boolean

foo((x: number, y) => { }, (x) => { }, () => { });
>foo((x: number, y) => { }, (x) => { }, () => { }) : () => void
>foo : typeof foo
>(x: number, y) => { } : (x: number, y: any) => void
>x : number
>y : any
>(x) => { } : (x: any) => void
>x : any
>() => { } : () => void

function foo2<T extends A, U, V>(x: T, y: U, z: V): V { return z; }
>foo2 : typeof foo2
>T : T
>A : A
>U : U
>V : V
>x : T
>T : T
>y : U
>U : U
>z : V
>V : V
>V : V
>z : V

//function foo2<T extends A, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }
>//function foo2<T extends A, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }
foo(a, a, a) : A
>//function foo2<T extends A, U extends T, V extends U>(x: T, y: U, z: V): V { return z; }
foo : typeof foo

foo(a, a, a);
>a : A
>a : A
>a : A

foo(a, b, c);
>foo(a, b, c) : C
>foo : typeof foo
>a : A
>b : B
>c : C

foo(b, b, { foo: 1, bar: '', hm: '' });
>foo(b, b, { foo: 1, bar: '', hm: '' }) : { foo: number; bar: string; hm: string; }
>foo : typeof foo
>b : B
>b : B
>{ foo: 1, bar: '', hm: '' } : { foo: number; bar: string; hm: string; }
>foo : number
>bar : string
>hm : string

