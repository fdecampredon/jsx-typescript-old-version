=== tests/cases/compiler/emitMemberAccessExpression_file3.ts ===
/// <reference path="emitMemberAccessExpression_file2.ts" />
/// <reference path="emitMemberAccessExpression_file1.ts" />
declare var OData: any;
>OData : any

module Microsoft.PeopleAtWork.Model {
>Microsoft : Microsoft
>PeopleAtWork : Microsoft.PeopleAtWork
>Model : Microsoft.PeopleAtWork.Model

    export class KnockoutExtentions {
>KnockoutExtentions : KnockoutExtentions
    }
}
=== tests/cases/compiler/emitMemberAccessExpression_file1.ts ===
/// <reference path="emitMemberAccessExpression_file3.ts" />
No type information for this code."use strict";
No type information for this code.
No type information for this code.=== tests/cases/compiler/emitMemberAccessExpression_file2.ts ===
/// <reference path="emitMemberAccessExpression_file3.ts" />
"use strict";
module Microsoft.PeopleAtWork.Model {
>Microsoft : Microsoft
>PeopleAtWork : Microsoft.PeopleAtWork
>Model : Microsoft.PeopleAtWork.Model

    export class _Person {
>_Person : _Person

        public populate(raw: any) {
>populate : (raw: any) => void
>raw : any

            var res = Model.KnockoutExtentions;
>res : typeof KnockoutExtentions
>Model.KnockoutExtentions : typeof KnockoutExtentions
>Model : typeof Model
>KnockoutExtentions : typeof KnockoutExtentions
        }
    }
}

