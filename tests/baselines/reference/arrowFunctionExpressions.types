=== tests/cases/compiler/arrowFunctionExpressions.ts ===
Line 1 col 4 IdentifierName "a" = (p: string) => number
Line 1 col 8 ParenthesizedArrowFunctionExpression "(p: string) => p.length" = (p: string) => number
Line 1 col 9 IdentifierName "p" = string
Line 1 col 23 MemberAccessExpression "p.length" = number
Line 1 col 23 IdentifierName "p" = string
Line 1 col 25 IdentifierName "length" = number
Line 2 col 4 IdentifierName "a" = (p: string) => number
Line 2 col 8 ParenthesizedArrowFunctionExpression "(p: string) => { return p.length; }" = (p: string) => number
Line 2 col 9 IdentifierName "p" = string
Line 2 col 32 MemberAccessExpression "p.length" = number
Line 2 col 32 IdentifierName "p" = string
Line 2 col 34 IdentifierName "length" = number
Line 5 col 4 IdentifierName "b" = (j: any) => number
Line 5 col 8 SimpleArrowFunctionExpression "j => { return 0; }" = (j: any) => number
Line 5 col 8 IdentifierName "j" = any
Line 6 col 4 IdentifierName "b" = (j: any) => number
Line 6 col 8 ParenthesizedArrowFunctionExpression "(j) => { return 0; }" = (j: any) => number
Line 6 col 9 IdentifierName "j" = any
Line 9 col 4 IdentifierName "c" = number
Line 10 col 4 IdentifierName "d" = (n: any) => any
Line 10 col 8 SimpleArrowFunctionExpression "n => c = n" = (n: any) => any
Line 10 col 8 IdentifierName "n" = any
Line 10 col 13 AssignmentExpression "c = n" = any
Line 10 col 13 IdentifierName "c" = number
Line 10 col 17 IdentifierName "n" = any
Line 11 col 4 IdentifierName "d" = (n: any) => any
Line 11 col 8 ParenthesizedArrowFunctionExpression "(n) => c = n" = (n: any) => any
Line 11 col 9 IdentifierName "n" = any
Line 11 col 15 AssignmentExpression "c = n" = any
Line 11 col 15 IdentifierName "c" = number
Line 11 col 19 IdentifierName "n" = any
Line 12 col 4 IdentifierName "d" = (n: any) => any
Line 12 col 8 IdentifierName "n" = any
Line 17 col 6 IdentifierName "MyClass" = MyClass
Line 18 col 0 IdentifierName "m" = (n: any) => any
Line 18 col 8 ParenthesizedArrowFunctionExpression "(n) => n + 1" = (n: any) => any
Line 18 col 9 IdentifierName "n" = any
Line 18 col 15 AddExpression "n + 1" = any
Line 18 col 15 IdentifierName "n" = any
Line 19 col 0 IdentifierName "p" = (n: any) => MyClass
Line 19 col 8 ParenthesizedArrowFunctionExpression "(n) => n && this" = (n: any) => MyClass
Line 19 col 9 IdentifierName "n" = any
Line 19 col 15 LogicalAndExpression "n && this" = MyClass
Line 19 col 15 IdentifierName "n" = any
Line 19 col 20 ThisKeyword "this" = MyClass
Line 20 col 0 IdentifierName "fn" = () => void
Line 22 col 12 IdentifierName "m" = (n: any) => any
Line 22 col 16 ParenthesizedArrowFunctionExpression "(n) => n + 1" = (n: any) => any
Line 22 col 17 IdentifierName "n" = any
Line 22 col 23 AddExpression "n + 1" = any
Line 22 col 23 IdentifierName "n" = any
Line 23 col 12 IdentifierName "p" = (n: any) => MyClass
Line 23 col 16 ParenthesizedArrowFunctionExpression "(n) => n && this" = (n: any) => MyClass
Line 23 col 17 IdentifierName "n" = any
Line 23 col 23 LogicalAndExpression "n && this" = MyClass
Line 23 col 23 IdentifierName "n" = any
Line 23 col 28 ThisKeyword "this" = MyClass
Line 28 col 4 IdentifierName "arrrr" = () => (m: number) => () => (n: number) => number
Line 28 col 12 ParenthesizedArrowFunctionExpression "() => (m: number) => () => (n: number) => m + n" = () => (m: number) => () => (n: number) => number
Line 28 col 18 ParenthesizedArrowFunctionExpression "(m: number) => () => (n: number) => m + n" = (m: number) => () => (n: number) => number
Line 28 col 19 IdentifierName "m" = number
Line 28 col 33 ParenthesizedArrowFunctionExpression "() => (n: number) => m + n" = () => (n: number) => number
Line 28 col 39 ParenthesizedArrowFunctionExpression "(n: number) => m + n" = (n: number) => number
Line 28 col 40 IdentifierName "n" = number
Line 28 col 54 AddExpression "m + n" = number
Line 28 col 54 IdentifierName "m" = number
Line 28 col 58 IdentifierName "n" = number
Line 29 col 4 IdentifierName "e" = number
Line 29 col 8 InvocationExpression "arrrr()(3)()(4)" = number
Line 29 col 8 InvocationExpression "arrrr()(3)()" = (n: number) => number
Line 29 col 8 InvocationExpression "arrrr()(3)" = () => (n: number) => number
Line 29 col 8 InvocationExpression "arrrr()" = (m: number) => () => (n: number) => number
Line 29 col 8 IdentifierName "arrrr" = () => (m: number) => () => (n: number) => number
Line 30 col 4 IdentifierName "e" = number
Line 33 col 9 IdentifierName "someFn" = typeof someFn
Line 34 col 8 IdentifierName "arr" = (n: number) => (p: number) => number
Line 34 col 14 ParenthesizedArrowFunctionExpression "(n: number) => (p: number) => p * n" = (n: number) => (p: number) => number
Line 34 col 15 IdentifierName "n" = number
Line 34 col 29 ParenthesizedArrowFunctionExpression "(p: number) => p * n" = (p: number) => number
Line 34 col 30 IdentifierName "p" = number
Line 34 col 44 MultiplyExpression "p * n" = number
Line 34 col 44 IdentifierName "p" = number
Line 34 col 48 IdentifierName "n" = number
Line 35 col 0 InvocationExpression "arr(3)(4).toExponential()" = string
Line 35 col 0 MemberAccessExpression "arr(3)(4).toExponential" = (fractionDigits?: number) => string
Line 35 col 0 InvocationExpression "arr(3)(4)" = number
Line 35 col 0 InvocationExpression "arr(3)" = (p: number) => number
Line 35 col 0 IdentifierName "arr" = (n: number) => (p: number) => number
Line 35 col 14 IdentifierName "toExponential" = (fractionDigits?: number) => string
Line 39 col 9 IdentifierName "someOtherFn" = typeof someOtherFn
Line 40 col 8 IdentifierName "arr" = (n: number) => string
Line 40 col 14 ParenthesizedArrowFunctionExpression "(n: number) => '' + n" = (n: number) => string
Line 40 col 15 IdentifierName "n" = number
Line 40 col 29 AddExpression "'' + n" = string
Line 40 col 34 IdentifierName "n" = number
Line 41 col 0 InvocationExpression "arr(4).charAt(0)" = string
Line 41 col 0 MemberAccessExpression "arr(4).charAt" = (pos: number) => string
Line 41 col 0 InvocationExpression "arr(4)" = string
Line 41 col 0 IdentifierName "arr" = (n: number) => string
Line 41 col 11 IdentifierName "charAt" = (pos: number) => string
Line 45 col 9 IdentifierName "outerFn" = typeof outerFn
Line 46 col 13 IdentifierName "innerFn" = () => void
Line 47 col 12 IdentifierName "arrowFn" = () => void
Line 47 col 22 ParenthesizedArrowFunctionExpression "() => { }" = () => void
Line 48 col 12 IdentifierName "p" = void
Line 48 col 16 InvocationExpression "arrowFn()" = void
Line 48 col 16 IdentifierName "arrowFn" = () => void
Line 49 col 12 IdentifierName "p" = void
Line 54 col 4 IdentifierName "f" = (n: string) => () => string
Line 54 col 8 ParenthesizedArrowFunctionExpression "(n: string) => {
    function fn(x: number) {
        return () => n + x;
    }
    return fn(4);
}" = (n: string) => () => string
Line 54 col 9 IdentifierName "n" = string
Line 55 col 13 IdentifierName "fn" = (x: number) => () => string
Line 55 col 16 IdentifierName "x" = number
Line 56 col 15 ParenthesizedArrowFunctionExpression "() => n + x" = () => string
Line 56 col 21 AddExpression "n + x" = string
Line 56 col 21 IdentifierName "n" = string
Line 56 col 25 IdentifierName "x" = number
Line 58 col 11 InvocationExpression "fn(4)" = () => string
Line 58 col 11 IdentifierName "fn" = (x: number) => () => string
Line 60 col 4 IdentifierName "g" = string
Line 60 col 8 InvocationExpression "f('')()" = string
Line 60 col 8 InvocationExpression "f('')" = () => string
Line 60 col 8 IdentifierName "f" = (n: string) => () => string
Line 61 col 4 IdentifierName "g" = string
Line 65 col 9 IdentifierName "someOuterFn" = typeof someOuterFn
Line 66 col 8 IdentifierName "arr" = (n: string) => () => () => number
Line 66 col 14 ParenthesizedArrowFunctionExpression "(n: string) => {
        function innerFn() {
            return () => n.length;
        }
        return innerFn;
    }" = (n: string) => () => () => number
Line 66 col 15 IdentifierName "n" = string
Line 67 col 17 IdentifierName "innerFn" = () => () => number
Line 68 col 19 ParenthesizedArrowFunctionExpression "() => n.length" = () => number
Line 68 col 25 MemberAccessExpression "n.length" = number
Line 68 col 25 IdentifierName "n" = string
Line 68 col 27 IdentifierName "length" = number
Line 70 col 15 IdentifierName "innerFn" = () => () => number
Line 72 col 11 IdentifierName "arr" = (n: string) => () => () => number
Line 74 col 4 IdentifierName "h" = number
Line 74 col 8 InvocationExpression "someOuterFn()('')()()" = number
Line 74 col 8 InvocationExpression "someOuterFn()('')()" = () => number
Line 74 col 8 InvocationExpression "someOuterFn()('')" = () => () => number
Line 74 col 8 InvocationExpression "someOuterFn()" = (n: string) => () => () => number
Line 74 col 8 IdentifierName "someOuterFn" = typeof someOuterFn
Line 75 col 0 InvocationExpression "h.toExponential()" = string
Line 75 col 0 MemberAccessExpression "h.toExponential" = (fractionDigits?: number) => string
Line 75 col 0 IdentifierName "h" = number
Line 75 col 2 IdentifierName "toExponential" = (fractionDigits?: number) => string
Line 78 col 9 IdentifierName "tryCatchFn" = typeof tryCatchFn
Line 80 col 12 IdentifierName "x" = () => any
Line 80 col 16 ParenthesizedArrowFunctionExpression "() => this" = () => any
Line 80 col 22 ThisKeyword "this" = any
Line 81 col 13 IdentifierName "e" = any
Line 82 col 12 IdentifierName "t" = () => any
Line 82 col 16 ParenthesizedArrowFunctionExpression "() => e + this" = () => any
Line 82 col 22 AddExpression "e + this" = any
Line 82 col 22 IdentifierName "e" = any
Line 82 col 26 ThisKeyword "this" = any
Line 84 col 12 IdentifierName "m" = () => string
Line 84 col 16 ParenthesizedArrowFunctionExpression "() => this + ''" = () => string
Line 84 col 22 AddExpression "this + ''" = string
Line 84 col 22 ThisKeyword "this" = any