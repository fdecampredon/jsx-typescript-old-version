=== tests/cases/compiler/wrappedAndRecursiveConstraints3.ts ===
Line 0 col 6 IdentifierName "C" = C<T>
Line 0 col 8 IdentifierName "T" = T
Line 0 col 20 IdentifierName "length" = number
Line 1 col 16 IdentifierName "x" = T
Line 1 col 19 IdentifierName "T" = T
Line 2 col 0 IdentifierName "foo" = <U extends T>(x: U) => <V extends U>(x: V) => V
Line 2 col 8 IdentifierName "U" = U
Line 2 col 18 IdentifierName "T" = T
Line 2 col 21 IdentifierName "x" = U
Line 2 col 24 IdentifierName "U" = U
Line 3 col 17 IdentifierName "bar" = <V extends U>(x: V) => V
Line 3 col 21 IdentifierName "V" = V
Line 3 col 31 IdentifierName "U" = U
Line 3 col 34 IdentifierName "x" = V
Line 3 col 37 IdentifierName "V" = V
Line 4 col 19 IdentifierName "x" = V
Line 6 col 15 IdentifierName "bar" = <V extends U>(x: V) => V
Line 10 col 4 IdentifierName "c" = C<{ length: number; }>
Line 10 col 8 ObjectCreationExpression "new C({ length: 2 })" = C<{ length: number; }>
Line 10 col 12 IdentifierName "C" = { prototype: C<any>; new<T extends { length: number; }>(x: T): C<T>; }
Line 10 col 14 ObjectLiteralExpression "{ length: 2 }" = { length: number; }
Line 10 col 16 IdentifierName "length" = number
Line 11 col 4 IdentifierName "r" = <V extends U>(x: V) => V
Line 11 col 8 InvocationExpression "c.foo({ length: 3, charAt: (x: number) => { '' } })" = <V extends U>(x: V) => V
Line 11 col 8 MemberAccessExpression "c.foo" = <U extends T>(x: U) => <V extends U>(x: V) => V
Line 11 col 8 IdentifierName "c" = C<{ length: number; }>
Line 11 col 10 IdentifierName "foo" = <U extends T>(x: U) => <V extends U>(x: V) => V
Line 11 col 14 ObjectLiteralExpression "{ length: 3, charAt: (x: number) => { '' } }" = { length: number; charAt: (x: number) => void; }
Line 11 col 16 IdentifierName "length" = number
Line 11 col 27 IdentifierName "charAt" = (x: number) => void
Line 11 col 35 ParenthesizedArrowFunctionExpression "(x: number) => { '' }" = (x: number) => void
Line 11 col 36 IdentifierName "x" = number
Line 12 col 4 IdentifierName "r2" = string
Line 12 col 9 InvocationExpression "r('')" = string
Line 12 col 9 IdentifierName "r" = <V extends U>(x: V) => V