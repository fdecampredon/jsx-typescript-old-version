=== tests/cases/compiler/moduledecl.ts ===
module a {
>a : a
}

module b.a {
>b : b
>a : b.a
}

module c.a.b {
>c : c
>a : c.a
>b : c.a.b

    import ma = a;
>ma : ma
>a : a
}

module mImport {
>mImport : mImport

    import d = a;
>d : d
>a : a

    import e = b.a;
>e : e
>b : b
>a : any

    import d1 = a;
>d1 : d1
>a : a

    import e1 = b.a;
>e1 : e1
>b : b
>a : any
}

module m0 {
>m0 : m0

    function f1() {
>f1 : typeof f1
    }

    function f2(s: string);
>f2 : typeof f2
>s : string

    function f2(n: number);
>f2 : typeof f2
>n : number

    function f2(ns: any) {
>f2 : typeof f2
>ns : any
    }

    class c1 {
>c1 : c1

        public a : ()=>string;
>a : () => string

        private b: ()=>number;
>b : () => number

        private static s1;
>s1 : any

        public static s2;
>s2 : any
    }

    interface i1 {
>i1 : i1

        () : Object;
>Object : Object

        [n: number]: c1;
>n : number
>c1 : c1
    }

    import m2 = a;
>m2 : m2
>a : a

    import m3 = b;
>m3 : m3
>b : b

    import m4 = b.a;
>m4 : m4
>b : b
>a : any

    import m5 = c;
>m5 : m5
>c : c

    import m6 = c.a;
>m6 : m6
>c : c
>a : any

    import m7 = c.a.b;
>m7 : m7
>c : c
>a : c.a
>b : any
}

module m1 {
>m1 : m1

    export function f1() {
>f1 : typeof f1
    }

    export function f2(s: string);
>f2 : typeof f2
>s : string

    export function f2(n: number);
>f2 : typeof f2
>n : number

    export function f2(ns: any) {
>f2 : typeof f2
>ns : any
    }

    export class c1 {
>c1 : c1

        public a: () =>string;
>a : () => string

        private b: () =>number;
>b : () => number

        private static s1;
>s1 : any

        public static s2;
>s2 : any

        public d() {
>d : () => string

            return "Hello";
        }

        public e: { x: number; y: string; };
>e : { x: number; y: string; }
>x : number
>y : string

        constructor (public n, public n2: number, private n3, private n4: string) {
>n : any
>n2 : number
>n3 : any
>n4 : string
        }
    }

    export interface i1 {
>i1 : i1

        () : Object;
>Object : Object

        [n: number]: c1;
>n : number
>c1 : c1
    }

    import m2 = a;
>m2 : m2
>a : a

    import m3 = b;
>m3 : m3
>b : b

    import m4 = b.a;
>m4 : m4
>b : b
>a : any

    import m5 = c;
>m5 : m5
>c : c

    import m6 = c.a;
>m6 : m6
>c : c
>a : any

    import m7 = c.a.b;
>m7 : m7
>c : c
>a : c.a
>b : any
}

module m {
>m : m

    export module m2 {
>m2 : m2

        var a = 10;
>a : number

        export var b: number;
>b : number
    }

    export module m3 {
>m3 : m3

        export var c: number;
>c : number
    }
}

module m {
>m : m

    export module m25 {
>m25 : m25

        export module m5 {
>m5 : m5

            export var c: number;
>c : number
        }
    }
}

module m13 {
>m13 : m13

    export module m4 {
>m4 : m4

        export module m2 {
>m2 : m2

            export module m3 {
>m3 : m3

                export var c: number;
>c : number
            }
        }

        export function f() {
>f : typeof f

            return 20;
        }
    }
}

declare module m4 {
>m4 : m4

    export var b;
>b : any
}

declare module m5 {
>m5 : m5

    export var c;
>c : any
}

declare module m43 {
>m43 : m43

    export var b;
>b : any
}

declare module m55 {
>m55 : m55

    export var c;
>c : any
}

declare module "m3" {
    export var b: number;
>b : number
}

module exportTests {
>exportTests : exportTests

    export class C1_public {
>C1_public : C1_public

        private f2() {
>f2 : () => number

            return 30;
        }

        public f3() {
>f3 : () => string

            return "string";
        }
    }
    class C2_private {
>C2_private : C2_private

        private f2() {
>f2 : () => number

            return 30;
        }

        public f3() {
>f3 : () => string

            return "string";
        }
    }

    export class C3_public {
>C3_public : C3_public

        private getC2_private() {
>getC2_private : () => C2_private

            return new C2_private();
>new C2_private() : C2_private
>C2_private : typeof C2_private
        }
        private setC2_private(arg: C2_private) {
>setC2_private : (arg: C2_private) => void
>arg : C2_private
>C2_private : C2_private
        }
        private get c2() {
>c2 : C2_private

            return new C2_private();
>new C2_private() : C2_private
>C2_private : typeof C2_private
        }
        public getC1_public() {
>getC1_public : () => C1_public

            return new C1_public();
>new C1_public() : C1_public
>C1_public : typeof C1_public
        }
        public setC1_public(arg: C1_public) {
>setC1_public : (arg: C1_public) => void
>arg : C1_public
>C1_public : C1_public
        }
        public get c1() {
>c1 : C1_public

            return new C1_public();
>new C1_public() : C1_public
>C1_public : typeof C1_public
        }
    }
}

declare module mAmbient {
>mAmbient : mAmbient

    class C {
>C : C

        public myProp: number;
>myProp : number
    }

    function foo() : C;
>foo : typeof foo
>C : C

    var aVar: C;
>aVar : C
>C : C

    interface B {
>B : B

        x: number;
>x : number

        y: C;
>y : C
>C : C
    }
    enum e {
>e : e

        x,
>x : e

        y,
>y : e

        z
>z : e
    }

    module m3 {
>m3 : m3

        class C {
>C : C

            public myProp: number;
>myProp : number
        }

        function foo(): C;
>foo : typeof foo
>C : C

        var aVar: C;
>aVar : C
>C : C

        interface B {
>B : B

            x: number;
>x : number

            y: C;
>y : C
>C : C
        }
        enum e {
>e : e

            x,
>x : e

            y,
>y : e

            z
>z : e
        }
    }
}

function foo() {
>foo : typeof foo

    return mAmbient.foo();
>mAmbient.foo() : mAmbient.C
>mAmbient.foo : typeof mAmbient.foo
>mAmbient : typeof mAmbient
>foo : typeof mAmbient.foo
}

var cVar = new mAmbient.C();
>cVar : mAmbient.C
>new mAmbient.C() : mAmbient.C
>mAmbient.C : typeof mAmbient.C
>mAmbient : typeof mAmbient
>C : typeof mAmbient.C

var aVar = mAmbient.aVar;
>aVar : mAmbient.C
>mAmbient.aVar : mAmbient.C
>mAmbient : typeof mAmbient
>aVar : mAmbient.C

var bB: mAmbient.B;
>bB : mAmbient.B
>mAmbient : mAmbient
>B : mAmbient.B

var eVar: mAmbient.e;
>eVar : mAmbient.e
>mAmbient : mAmbient
>e : mAmbient.e

function m3foo() {
>m3foo : typeof m3foo

    return mAmbient.m3.foo();
>mAmbient.m3.foo() : mAmbient.m3.C
>mAmbient.m3.foo : typeof mAmbient.m3.foo
>mAmbient.m3 : typeof mAmbient.m3
>mAmbient : typeof mAmbient
>m3 : typeof mAmbient.m3
>foo : typeof mAmbient.m3.foo
}

var m3cVar = new mAmbient.m3.C();
>m3cVar : mAmbient.m3.C
>new mAmbient.m3.C() : mAmbient.m3.C
>mAmbient.m3.C : typeof mAmbient.m3.C
>mAmbient.m3 : typeof mAmbient.m3
>mAmbient : typeof mAmbient
>m3 : typeof mAmbient.m3
>C : typeof mAmbient.m3.C

var m3aVar = mAmbient.m3.aVar;
>m3aVar : mAmbient.m3.C
>mAmbient.m3.aVar : mAmbient.m3.C
>mAmbient.m3 : typeof mAmbient.m3
>mAmbient : typeof mAmbient
>m3 : typeof mAmbient.m3
>aVar : mAmbient.m3.C

var m3bB: mAmbient.m3.B;
>m3bB : mAmbient.m3.B
>mAmbient : mAmbient
>m3 : mAmbient.m3
>B : mAmbient.m3.B

var m3eVar: mAmbient.m3.e;
>m3eVar : mAmbient.m3.e
>mAmbient : mAmbient
>m3 : mAmbient.m3
>e : mAmbient.m3.e


