=== tests/cases/compiler/objectTypesIdentityWithOptionality.ts ===
// object types are identical structurally

class A {
>A : A

    foo: string;
>foo : string
}

class B {
>B : B

    foo: string;
>foo : string
}

class C<T> {
>C : C<T>
>T : T

    foo: T;
>foo : T
>T : T
}

interface I {
>I : I

    foo?: string;
>foo : string
}

var a: { foo?: string; }
>a : { foo?: string; }
>foo : string

var b = { foo: '' };
>b : { foo: string; }
>{ foo: '' } : { foo: string; }
>foo : string

function foo2(x: I);
>foo2 : typeof foo2
>x : I
>I : I

function foo2(x: I); // error
>foo2 : typeof foo2
>x : I
>I : I

function foo2(x: any) { }
>foo2 : typeof foo2
>x : any

function foo3(x: typeof a);
>foo3 : typeof foo3
>x : { foo?: string; }
>a : { foo?: string; }

function foo3(x: typeof a); // error
>foo3 : typeof foo3
>x : { foo?: string; }
>a : { foo?: string; }

function foo3(x: any) { }
>foo3 : typeof foo3
>x : any

function foo6(x: A);
>foo6 : typeof foo6
>x : A
>A : A

function foo6(x: I); // ok
>foo6 : typeof foo6
>x : I
>I : I

function foo6(x: any) { }
>foo6 : typeof foo6
>x : any

function foo7(x: A);
>foo7 : typeof foo7
>x : A
>A : A

function foo7(x: typeof a); // ok
>foo7 : typeof foo7
>x : { foo?: string; }
>a : { foo?: string; }

function foo7(x: any) { }
>foo7 : typeof foo7
>x : any

function foo8(x: B);
>foo8 : typeof foo8
>x : B
>B : B

function foo8(x: I); // ok
>foo8 : typeof foo8
>x : I
>I : I

function foo8(x: any) { }
>foo8 : typeof foo8
>x : any

function foo10(x: B);
>foo10 : typeof foo10
>x : B
>B : B

function foo10(x: typeof a); // ok
>foo10 : typeof foo10
>x : { foo?: string; }
>a : { foo?: string; }

function foo10(x: any) { }
>foo10 : typeof foo10
>x : any

function foo12(x: I);
>foo12 : typeof foo12
>x : I
>I : I

function foo12(x: C<string>); // ok
>foo12 : typeof foo12
>x : C<string>
>C : C<T>

function foo12(x: any) { }
>foo12 : typeof foo12
>x : any

function foo13(x: I);
>foo13 : typeof foo13
>x : I
>I : I

function foo13(x: typeof a); // error
>foo13 : typeof foo13
>x : { foo?: string; }
>a : { foo?: string; }

function foo13(x: any) { }
>foo13 : typeof foo13
>x : any

function foo14(x: I);
>foo14 : typeof foo14
>x : I
>I : I

function foo14(x: typeof b); // ok
>foo14 : typeof foo14
>x : { foo: string; }
>b : { foo: string; }

function foo14(x: any) { }
>foo14 : typeof foo14
>x : any

