==== tests/cases/compiler/promiseChaining1.ts (2 errors) ====
    // same example but with constraints on each type parameter
    class Chain2<T extends { length: number }> {
        constructor(public value: T) { }
        then<S extends Function>(cb: (x: T) => S): Chain2<S> {
            var result = cb(this.value);
            // should get a fresh type parameter which each then call
            var z = this.then(x => result)/*S*/.then(x => "abc")/*Function*/.then(x => x.length)/*number*/; // Should error on "abc" because it is not a Function
                                                ~~~~
!!! promiseChaining1.ts(7,45): error TS2082: Supplied parameters do not match any signature of call target:
!!! 	Call signatures of types '(x: S) => string' and '(x: S) => Function' are incompatible:
!!! 		Type 'String' is missing property 'apply' from type 'Function'.
                                                ~~~~
!!! promiseChaining1.ts(7,45): error TS2087: Could not select overload for 'call' expression.
            return new Chain2(result);
        }
    }