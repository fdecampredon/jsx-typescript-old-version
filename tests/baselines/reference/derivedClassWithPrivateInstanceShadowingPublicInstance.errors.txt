==== tests/cases/compiler/derivedClassWithPrivateInstanceShadowingPublicInstance.ts (9 errors) ====
    class Base {
        public x: string;
        public fn(): string {
            return '';
        }
    
        public get a() { return 1; }
        public set a(v) { }
    }
    
    // error, not a subtype
    class Derived extends Base {
          ~~~~~~~
!!! error TS2141: Class 'Derived' cannot extend class 'Base':
!!! 	Property 'x' defined as private in type 'Derived' is defined as public in type 'Base'.
        private x: string; 
        private fn(): string {
            return '';
        }
    
        private get a() { return 1; }
        private set a(v) { }
    }
    
    var r = Base.x; // ok
                 ~
!!! error TS2094: The property 'x' does not exist on value of type 'typeof Base'.
    var r2 = Derived.x; // error
                     ~
!!! error TS2094: The property 'x' does not exist on value of type 'typeof Derived'.
    
    var r3 = Base.fn(); // ok
                  ~~
!!! error TS2094: The property 'fn' does not exist on value of type 'typeof Base'.
    var r4 = Derived.fn(); // error
                     ~~
!!! error TS2094: The property 'fn' does not exist on value of type 'typeof Derived'.
    
    var r5 = Base.a; // ok
                  ~
!!! error TS2094: The property 'a' does not exist on value of type 'typeof Base'.
    Base.a = 2; // ok
         ~
!!! error TS2094: The property 'a' does not exist on value of type 'typeof Base'.
    
    var r6 = Derived.a; // error
                     ~
!!! error TS2094: The property 'a' does not exist on value of type 'typeof Derived'.
    Derived.a = 2; // error
            ~
!!! error TS2094: The property 'a' does not exist on value of type 'typeof Derived'.