=== tests/cases/compiler/subtypingWithOptionalProperties.ts ===
// subtyping is not transitive due to optional properties but the subtyping algorithm assumes it is for the 99% case

// returns { s?: number; }
function f<T>(a: T) {
>f : typeof f
>T : T
>a : T
>T : T

    var b: { s?: number } = a;
>b : { s?: number; }
>s : number
>a : T

    return b;
>b : { s?: number; }
}

var r = f({ s: new Object() }); // ok
>r : { s?: number; }
>f({ s: new Object() }) : { s?: number; }
>f : typeof f
>{ s: new Object() } : { s: Object; }
>s : Object
>new Object() : Object
>Object : { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }

r.s && r.s.toFixed(); // would blow up at runtime
>r.s && r.s.toFixed() : string
>r.s : number
>r : { s?: number; }
>s : number
>r.s.toFixed() : string
>r.s.toFixed : (fractionDigits?: number) => string
>r.s : number
>r : { s?: number; }
>s : number
>toFixed : (fractionDigits?: number) => string

