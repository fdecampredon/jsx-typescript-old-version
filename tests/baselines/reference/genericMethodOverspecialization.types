=== tests/cases/compiler/genericMethodOverspecialization.ts ===
Line 0 col 4 IdentifierName "names" = string[]
Line 0 col 12 ArrayLiteralExpression "["list", "table1", "table2", "table3", "summary"]" = string[]
Line 2 col 10 IdentifierName "HTMLElement" = HTMLElement
Line 3 col 0 IdentifierName "clientWidth" = number
Line 4 col 0 IdentifierName "isDisabled" = boolean
Line 7 col 12 IdentifierName "document" = Document
Line 7 col 22 IdentifierName "Document" = Document
Line 8 col 10 IdentifierName "Document" = Document
Line 9 col 0 IdentifierName "getElementById" = (elementId: string) => HTMLElement
Line 9 col 19 IdentifierName "elementId" = string
Line 9 col 39 IdentifierName "HTMLElement" = HTMLElement
Line 12 col 4 IdentifierName "elements" = HTMLElement[]
Line 12 col 15 InvocationExpression "names.map(function (name) {
    return document.getElementById(name);
})" = HTMLElement[]
Line 12 col 15 MemberAccessExpression "names.map" = <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
Line 12 col 15 IdentifierName "names" = string[]
Line 12 col 21 IdentifierName "map" = <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]
Line 12 col 25 FunctionExpression "function (name) {
    return document.getElementById(name);
}" = (name: string) => HTMLElement
Line 12 col 35 IdentifierName "name" = string
Line 13 col 11 InvocationExpression "document.getElementById(name)" = HTMLElement
Line 13 col 11 MemberAccessExpression "document.getElementById" = (elementId: string) => HTMLElement
Line 13 col 11 IdentifierName "document" = Document
Line 13 col 20 IdentifierName "getElementById" = (elementId: string) => HTMLElement
Line 13 col 35 IdentifierName "name" = string
Line 17 col 4 IdentifierName "xxx" = HTMLElement[]
Line 17 col 10 InvocationExpression "elements.filter(function (e) {
    return !e.isDisabled;
})" = HTMLElement[]
Line 17 col 10 MemberAccessExpression "elements.filter" = (callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => boolean, thisArg?: any) => HTMLElement[]
Line 17 col 10 IdentifierName "elements" = HTMLElement[]
Line 17 col 19 IdentifierName "filter" = (callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => boolean, thisArg?: any) => HTMLElement[]
Line 17 col 26 FunctionExpression "function (e) {
    return !e.isDisabled;
}" = (e: HTMLElement) => boolean
Line 17 col 36 IdentifierName "e" = HTMLElement
Line 18 col 11 LogicalNotExpression "!e.isDisabled" = boolean
Line 18 col 12 MemberAccessExpression "e.isDisabled" = boolean
Line 18 col 12 IdentifierName "e" = HTMLElement
Line 18 col 14 IdentifierName "isDisabled" = boolean
Line 21 col 4 IdentifierName "widths" = number[]
Line 21 col 22 InvocationExpression "elements.map(function (e) { // should not error
    return e.clientWidth;
})" = number[]
Line 21 col 22 MemberAccessExpression "elements.map" = <U>(callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => U, thisArg?: any) => U[]
Line 21 col 22 IdentifierName "elements" = HTMLElement[]
Line 21 col 31 IdentifierName "map" = <U>(callbackfn: (value: HTMLElement, index: number, array: HTMLElement[]) => U, thisArg?: any) => U[]
Line 21 col 35 FunctionExpression "function (e) { // should not error
    return e.clientWidth;
}" = (e: HTMLElement) => number
Line 21 col 45 IdentifierName "e" = HTMLElement
Line 22 col 11 MemberAccessExpression "e.clientWidth" = number
Line 22 col 11 IdentifierName "e" = HTMLElement
Line 22 col 13 IdentifierName "clientWidth" = number