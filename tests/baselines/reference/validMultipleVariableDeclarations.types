=== tests/cases/compiler/validMultipleVariableDeclarations.ts ===
Line 2 col 4 IdentifierName "x" = number
Line 3 col 4 IdentifierName "x" = number
Line 5 col 8 IdentifierName "x" = number
Line 6 col 13 IdentifierName "x" = number
Line 8 col 4 IdentifierName "x" = number
Line 8 col 8 CastExpression "<number>undefined" = number
Line 8 col 16 IdentifierName "undefined" = any
Line 11 col 9 IdentifierName "declSpace" = typeof declSpace
Line 12 col 8 IdentifierName "x" = string
Line 15 col 10 IdentifierName "Point" = Point
Line 15 col 18 IdentifierName "x" = number
Line 15 col 29 IdentifierName "y" = number
Line 17 col 4 IdentifierName "p" = Point
Line 17 col 7 IdentifierName "Point" = Point
Line 18 col 4 IdentifierName "p" = { x: number; y: number; }
Line 18 col 8 ObjectLiteralExpression "{ x: 1, y: 2 }" = { x: number; y: number; }
Line 18 col 10 IdentifierName "x" = number
Line 18 col 16 IdentifierName "y" = number
Line 19 col 4 IdentifierName "p" = Point
Line 19 col 7 IdentifierName "Point" = Point
Line 19 col 15 ObjectLiteralExpression "{ x: 0, y: undefined }" = { x: number; y: any; }
Line 19 col 17 IdentifierName "x" = number
Line 19 col 23 IdentifierName "y" = any
Line 19 col 26 IdentifierName "undefined" = any
Line 20 col 4 IdentifierName "p" = { x: number; y: number; }
Line 20 col 8 ObjectLiteralExpression "{ x: 1, y: <number>undefined }" = { x: number; y: number; }
Line 20 col 10 IdentifierName "x" = number
Line 20 col 16 IdentifierName "y" = number
Line 20 col 19 CastExpression "<number>undefined" = number
Line 20 col 27 IdentifierName "undefined" = any
Line 21 col 4 IdentifierName "p" = { x: number; y: number; }
Line 21 col 9 IdentifierName "x" = number
Line 21 col 20 IdentifierName "y" = number
Line 21 col 35 ObjectLiteralExpression "{ x: 1, y: 2 }" = { x: number; y: number; }
Line 21 col 37 IdentifierName "x" = number
Line 21 col 43 IdentifierName "y" = number
Line 22 col 4 IdentifierName "p" = { x: number; y: number; }
Line 22 col 8 CastExpression "<{ x: number; y: number; }>{ x: 0, y: undefined }" = { x: number; y: number; }
Line 22 col 11 IdentifierName "x" = number
Line 22 col 22 IdentifierName "y" = number
Line 22 col 35 ObjectLiteralExpression "{ x: 0, y: undefined }" = { x: number; y: any; }
Line 22 col 37 IdentifierName "x" = number
Line 22 col 43 IdentifierName "y" = any
Line 22 col 46 IdentifierName "undefined" = any
Line 23 col 4 IdentifierName "p" = Point
Line 23 col 14 IdentifierName "p" = Point
Line 25 col 4 IdentifierName "fn" = (s: string) => number
Line 25 col 9 FunctionExpression "function (s: string) { return 42; }" = (s: string) => number
Line 25 col 19 IdentifierName "s" = string
Line 26 col 4 IdentifierName "fn" = (s: string) => number
Line 26 col 9 ParenthesizedArrowFunctionExpression "(s: string) => 3" = (s: string) => number
Line 26 col 10 IdentifierName "s" = string
Line 27 col 4 IdentifierName "fn" = (s: string) => number
Line 27 col 9 IdentifierName "s" = string
Line 28 col 4 IdentifierName "fn" = (s: string) => number
Line 28 col 11 IdentifierName "s" = string
Line 29 col 4 IdentifierName "fn" = (s: string) => number
Line 29 col 9 CastExpression "<(s: string) => number> null" = (s: string) => number
Line 29 col 11 IdentifierName "s" = string
Line 30 col 4 IdentifierName "fn" = (s: string) => number
Line 30 col 15 IdentifierName "fn" = (s: string) => number
Line 32 col 4 IdentifierName "a" = string[]
Line 33 col 4 IdentifierName "a" = string[]
Line 33 col 8 ArrayLiteralExpression "['a', 'b']" = string[]
Line 34 col 4 IdentifierName "a" = string[]
Line 34 col 8 CastExpression "<string[]>[]" = string[]
Line 34 col 18 ArrayLiteralExpression "[]" = string[]
Line 35 col 4 IdentifierName "a" = string[]
Line 35 col 18 ArrayLiteralExpression "[]" = string[]
Line 36 col 4 IdentifierName "a" = string[]
Line 36 col 8 ObjectCreationExpression "new Array<string>()" = string[]
Line 36 col 12 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; (arrayLength?: number): any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new(arrayLength?: number): any[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }
Line 37 col 4 IdentifierName "a" = string[]
Line 37 col 14 IdentifierName "a" = string[]