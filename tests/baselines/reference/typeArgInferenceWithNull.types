=== tests/cases/compiler/typeArgInferenceWithNull.ts ===
// All legal

function fn4<T extends string>(n: T) { }
>fn4 : typeof fn4
>T : T
>n : T
>T : T

fn4(null);
>fn4(null) : void
>fn4 : typeof fn4

function fn5<T extends { x: string }>(n: T) { }
>fn5 : typeof fn5
>T : T
>x : string
>n : T
>T : T

fn5({ x: null });
>fn5({ x: null }) : void
>fn5 : typeof fn5
>{ x: null } : { x: any; }
>x : any

function fn6<T extends { x: string }>(n: T, fun: (x: T) => void, n2: T) { }
>fn6 : typeof fn6
>T : T
>x : string
>n : T
>T : T
>fun : (x: T) => void
>x : T
>T : T
>n2 : T
>T : T

fn6({ x: null }, y => { }, { x: "" }); // y has type { x: any }, but ideally would have type { x: string }
>fn6({ x: null }, y => { }, { x: "" }) : void
>fn6 : typeof fn6
>{ x: null } : { x: any; }
>x : any
>y => { } : (y: { x: any; }) => void
>y : { x: any; }
>{ x: "" } : { x: string; }
>x : string

