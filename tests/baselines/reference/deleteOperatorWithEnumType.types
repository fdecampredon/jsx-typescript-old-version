=== tests/cases/compiler/deleteOperatorWithEnumType.ts ===
// delete  operator on enum type

enum ENUM { };
>ENUM : ENUM

enum ENUM1 { 1, 2, "" };
>ENUM1 : ENUM1

// enum type var
var ResultIsBoolean1 = delete ENUM;
>ResultIsBoolean1 : boolean
>delete ENUM : boolean
>ENUM : typeof ENUM

var ResultIsBoolean2 = delete ENUM1;
>ResultIsBoolean2 : boolean
>delete ENUM1 : boolean
>ENUM1 : typeof ENUM1

// enum type expressions
var ResultIsBoolean3 = delete ENUM1[0];
>ResultIsBoolean3 : boolean
>delete ENUM1[0] : boolean
>ENUM1[0] : string
>ENUM1 : typeof ENUM1

var ResultIsBoolean4 = delete (ENUM[0] + ENUM1[1]);
>ResultIsBoolean4 : boolean
>delete (ENUM[0] + ENUM1[1]) : boolean
>(ENUM[0] + ENUM1[1]) : string
>ENUM[0] + ENUM1[1] : string
>ENUM[0] : string
>ENUM : typeof ENUM
>ENUM1[1] : ENUM1
>ENUM1 : typeof ENUM1

// multiple delete  operators
var ResultIsBoolean5 = delete delete ENUM;
>ResultIsBoolean5 : boolean
>delete delete ENUM : boolean
>delete ENUM : boolean
>ENUM : typeof ENUM

var ResultIsBoolean6 = delete delete delete (ENUM[0] + ENUM1[1]);
>ResultIsBoolean6 : boolean
>delete delete delete (ENUM[0] + ENUM1[1]) : boolean
>delete delete (ENUM[0] + ENUM1[1]) : boolean
>delete (ENUM[0] + ENUM1[1]) : boolean
>(ENUM[0] + ENUM1[1]) : string
>ENUM[0] + ENUM1[1] : string
>ENUM[0] : string
>ENUM : typeof ENUM
>ENUM1[1] : ENUM1
>ENUM1 : typeof ENUM1

>// miss assignment operators
delete ENUM : boolean

// miss assignment operators
delete ENUM;
>ENUM : typeof ENUM

delete ENUM1;
>delete ENUM1 : boolean
>ENUM1 : typeof ENUM1

delete ENUM1[1];
>delete ENUM1[1] : boolean
>ENUM1[1] : ENUM1
>ENUM1 : typeof ENUM1

delete ENUM, ENUM1;
>delete ENUM, ENUM1 : typeof ENUM1
>delete ENUM : boolean
>ENUM : typeof ENUM
>ENUM1 : typeof ENUM1

