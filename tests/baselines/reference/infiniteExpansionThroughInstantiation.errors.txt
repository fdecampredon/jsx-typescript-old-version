==== tests/cases/compiler/infiniteExpansionThroughInstantiation.ts (2 errors) ====
    // instantiating a derived type can cause an infinitely expanding type reference to be generated
    
    interface List<T> {
        data: T;
        next: List<T>;
        owner: OwnerList<T>;
    }
    
    // will have an owner property that is an infinitely expanding type reference
    interface OwnerList<U> extends List<List<U>> {
        name: string;
    }
    
    var list: List<string>;
    var ownerList: OwnerList<string>;
    list = ownerList; 
    ~~~~
!!! infiniteExpansionThroughInstantiation.ts(16,1): error TS2012: Cannot convert 'OwnerList<string>' to 'List<string>':
!!! 	Types of property 'data' of types 'OwnerList<string>' and 'List<string>' are incompatible.
    
    function other<T>(x: T) {
        var list: List<T>;
        var ownerList: OwnerList<T>;
        list = ownerList; 
        ~~~~
!!! infiniteExpansionThroughInstantiation.ts(21,5): error TS2012: Cannot convert 'OwnerList<T>' to 'List<T>':
!!! 	Types of property 'data' of types 'OwnerList<T>' and 'List<T>' are incompatible.
    
    }
    