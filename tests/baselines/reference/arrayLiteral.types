=== tests/cases/compiler/arrayLiteral.ts ===
Line 0 col 4 IdentifierName "x" = any[]
Line 0 col 8 ArrayLiteralExpression "[]" = undefined[]
Line 1 col 4 IdentifierName "x" = any[]
Line 1 col 8 ObjectCreationExpression "new Array(1)" = any[]
Line 1 col 12 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; (arrayLength?: number): any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new(arrayLength?: number): any[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }
Line 3 col 4 IdentifierName "y" = number[]
Line 3 col 8 ArrayLiteralExpression "[1]" = number[]
Line 4 col 4 IdentifierName "y" = number[]
Line 4 col 8 ArrayLiteralExpression "[1, 2]" = number[]
Line 5 col 4 IdentifierName "y" = number[]
Line 5 col 8 ObjectCreationExpression "new Array<number>()" = number[]
Line 5 col 12 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; (arrayLength?: number): any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new(arrayLength?: number): any[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }
Line 7 col 4 IdentifierName "x2" = number[]
Line 7 col 19 ArrayLiteralExpression "[]" = number[]
Line 8 col 4 IdentifierName "x2" = number[]
Line 8 col 19 ObjectCreationExpression "new Array(1)" = any[]
Line 8 col 23 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; (arrayLength?: number): any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new(arrayLength?: number): any[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }
Line 10 col 4 IdentifierName "y2" = number[]
Line 10 col 19 ArrayLiteralExpression "[1]" = number[]
Line 11 col 4 IdentifierName "y2" = number[]
Line 11 col 19 ArrayLiteralExpression "[1, 2]" = number[]
Line 12 col 4 IdentifierName "y2" = number[]
Line 12 col 19 ObjectCreationExpression "new Array<number>()" = number[]
Line 12 col 23 IdentifierName "Array" = { isArray(arg: any): boolean; prototype: any[]; (arrayLength?: number): any[]; <T>(arrayLength: number): T[]; <T>(...items: T[]): T[]; new(arrayLength?: number): any[]; new<T>(arrayLength: number): T[]; new<T>(...items: T[]): T[]; }