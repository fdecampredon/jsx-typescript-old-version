=== tests/cases/compiler/heterogeneousArrayLiterals.ts ===
Line 2 col 4 IdentifierName "a" = {}[]
Line 2 col 8 ArrayLiteralExpression "[1, '']" = {}[]
Line 3 col 4 IdentifierName "b" = number[]
Line 3 col 8 ArrayLiteralExpression "[1, null]" = number[]
Line 4 col 4 IdentifierName "c" = {}[]
Line 4 col 8 ArrayLiteralExpression "[1, '', null]" = {}[]
Line 5 col 4 IdentifierName "d" = {}[]
Line 5 col 8 ArrayLiteralExpression "[{}, 1]" = {}[]
Line 5 col 9 ObjectLiteralExpression "{}" = {}
Line 6 col 4 IdentifierName "e" = {}[]
Line 6 col 8 ArrayLiteralExpression "[{}, Object]" = {}[]
Line 6 col 9 ObjectLiteralExpression "{}" = {}
Line 6 col 13 IdentifierName "Object" = { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }
Line 8 col 4 IdentifierName "f" = number[][]
Line 8 col 8 ArrayLiteralExpression "[[], [1]]" = number[][]
Line 8 col 9 ArrayLiteralExpression "[]" = any[]
Line 8 col 13 ArrayLiteralExpression "[1]" = number[]
Line 9 col 4 IdentifierName "g" = {}[]
Line 9 col 8 ArrayLiteralExpression "[[1], ['']]" = {}[]
Line 9 col 9 ArrayLiteralExpression "[1]" = number[]
Line 9 col 14 ArrayLiteralExpression "['']" = string[]
Line 11 col 4 IdentifierName "h" = { foo: number; }[]
Line 11 col 8 ArrayLiteralExpression "[{ foo: 1, bar: '' }, { foo: 2 }]" = { foo: number; }[]
Line 11 col 9 ObjectLiteralExpression "{ foo: 1, bar: '' }" = { foo: number; bar: string; }
Line 11 col 11 IdentifierName "foo" = number
Line 11 col 19 IdentifierName "bar" = string
Line 11 col 30 ObjectLiteralExpression "{ foo: 2 }" = { foo: number; }
Line 11 col 32 IdentifierName "foo" = number
Line 12 col 4 IdentifierName "i" = {}[]
Line 12 col 8 ArrayLiteralExpression "[{ foo: 1, bar: '' }, { foo: '' }]" = {}[]
Line 12 col 9 ObjectLiteralExpression "{ foo: 1, bar: '' }" = { foo: number; bar: string; }
Line 12 col 11 IdentifierName "foo" = number
Line 12 col 19 IdentifierName "bar" = string
Line 12 col 30 ObjectLiteralExpression "{ foo: '' }" = { foo: string; }
Line 12 col 32 IdentifierName "foo" = string
Line 14 col 4 IdentifierName "j" = {}[]
Line 14 col 8 ArrayLiteralExpression "[() => 1, () => '']" = {}[]
Line 14 col 9 ParenthesizedArrowFunctionExpression "() => 1" = () => number
Line 14 col 18 ParenthesizedArrowFunctionExpression "() => ''" = () => string
Line 15 col 4 IdentifierName "k" = { (): number; }[]
Line 15 col 8 ArrayLiteralExpression "[() => 1, () => 1]" = { (): number; }[]
Line 15 col 9 ParenthesizedArrowFunctionExpression "() => 1" = () => number
Line 15 col 18 ParenthesizedArrowFunctionExpression "() => 1" = () => number
Line 16 col 4 IdentifierName "l" = { (): any; }[]
Line 16 col 8 ArrayLiteralExpression "[() => 1, () => null]" = { (): any; }[]
Line 16 col 9 ParenthesizedArrowFunctionExpression "() => 1" = () => number
Line 16 col 18 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 17 col 4 IdentifierName "m" = { (): any; }[]
Line 17 col 8 ArrayLiteralExpression "[() => 1, () => '', () => null]" = { (): any; }[]
Line 17 col 9 ParenthesizedArrowFunctionExpression "() => 1" = () => number
Line 17 col 18 ParenthesizedArrowFunctionExpression "() => ''" = () => string
Line 17 col 28 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 18 col 4 IdentifierName "n" = {}[]
Line 18 col 8 ArrayLiteralExpression "[[() => 1], [() => '']]" = {}[]
Line 18 col 9 ArrayLiteralExpression "[() => 1]" = { (): number; }[]
Line 18 col 10 ParenthesizedArrowFunctionExpression "() => 1" = () => number
Line 18 col 20 ArrayLiteralExpression "[() => '']" = { (): string; }[]
Line 18 col 21 ParenthesizedArrowFunctionExpression "() => ''" = () => string
Line 20 col 6 IdentifierName "Base" = Base
Line 20 col 13 IdentifierName "foo" = string
Line 21 col 6 IdentifierName "Derived" = Derived
Line 21 col 22 IdentifierName "Base" = Base
Line 21 col 29 IdentifierName "bar" = string
Line 22 col 6 IdentifierName "Derived2" = Derived2
Line 22 col 23 IdentifierName "Base" = Base
Line 22 col 30 IdentifierName "baz" = string
Line 23 col 4 IdentifierName "base" = Base
Line 23 col 10 IdentifierName "Base" = Base
Line 24 col 4 IdentifierName "derived" = Derived
Line 24 col 13 IdentifierName "Derived" = Derived
Line 25 col 4 IdentifierName "derived2" = Derived2
Line 25 col 14 IdentifierName "Derived2" = Derived2
Line 27 col 7 IdentifierName "Derived" = Derived
Line 28 col 8 IdentifierName "h" = { foo: Base; }[]
Line 28 col 12 ArrayLiteralExpression "[{ foo: base, basear: derived }, { foo: base }]" = { foo: Base; }[]
Line 28 col 13 ObjectLiteralExpression "{ foo: base, basear: derived }" = { foo: Base; basear: Derived; }
Line 28 col 15 IdentifierName "foo" = Base
Line 28 col 20 IdentifierName "base" = Base
Line 28 col 26 IdentifierName "basear" = Derived
Line 28 col 34 IdentifierName "derived" = Derived
Line 28 col 45 ObjectLiteralExpression "{ foo: base }" = { foo: Base; }
Line 28 col 47 IdentifierName "foo" = Base
Line 28 col 52 IdentifierName "base" = Base
Line 29 col 8 IdentifierName "i" = {}[]
Line 29 col 12 ArrayLiteralExpression "[{ foo: base, basear: derived }, { foo: derived }]" = {}[]
Line 29 col 13 ObjectLiteralExpression "{ foo: base, basear: derived }" = { foo: Base; basear: Derived; }
Line 29 col 15 IdentifierName "foo" = Base
Line 29 col 20 IdentifierName "base" = Base
Line 29 col 26 IdentifierName "basear" = Derived
Line 29 col 34 IdentifierName "derived" = Derived
Line 29 col 45 ObjectLiteralExpression "{ foo: derived }" = { foo: Derived; }
Line 29 col 47 IdentifierName "foo" = Derived
Line 29 col 52 IdentifierName "derived" = Derived
Line 31 col 8 IdentifierName "j" = { (): Base; }[]
Line 31 col 12 ArrayLiteralExpression "[() => base, () => derived]" = { (): Base; }[]
Line 31 col 13 ParenthesizedArrowFunctionExpression "() => base" = () => Base
Line 31 col 19 IdentifierName "base" = Base
Line 31 col 25 ParenthesizedArrowFunctionExpression "() => derived" = () => Derived
Line 31 col 31 IdentifierName "derived" = Derived
Line 32 col 8 IdentifierName "k" = {}[]
Line 32 col 12 ArrayLiteralExpression "[() => base, () => 1]" = {}[]
Line 32 col 13 ParenthesizedArrowFunctionExpression "() => base" = () => Base
Line 32 col 19 IdentifierName "base" = Base
Line 32 col 25 ParenthesizedArrowFunctionExpression "() => 1" = () => number
Line 33 col 8 IdentifierName "l" = { (): any; }[]
Line 33 col 12 ArrayLiteralExpression "[() => base, () => null]" = { (): any; }[]
Line 33 col 13 ParenthesizedArrowFunctionExpression "() => base" = () => Base
Line 33 col 19 IdentifierName "base" = Base
Line 33 col 25 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 34 col 8 IdentifierName "m" = { (): any; }[]
Line 34 col 12 ArrayLiteralExpression "[() => base, () => derived, () => null]" = { (): any; }[]
Line 34 col 13 ParenthesizedArrowFunctionExpression "() => base" = () => Base
Line 34 col 19 IdentifierName "base" = Base
Line 34 col 25 ParenthesizedArrowFunctionExpression "() => derived" = () => Derived
Line 34 col 31 IdentifierName "derived" = Derived
Line 34 col 40 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 35 col 8 IdentifierName "n" = { (): Base; }[][]
Line 35 col 12 ArrayLiteralExpression "[[() => base], [() => derived]]" = { (): Base; }[][]
Line 35 col 13 ArrayLiteralExpression "[() => base]" = { (): Base; }[]
Line 35 col 14 ParenthesizedArrowFunctionExpression "() => base" = () => Base
Line 35 col 20 IdentifierName "base" = Base
Line 35 col 27 ArrayLiteralExpression "[() => derived]" = { (): Derived; }[]
Line 35 col 28 ParenthesizedArrowFunctionExpression "() => derived" = () => Derived
Line 35 col 34 IdentifierName "derived" = Derived
Line 36 col 8 IdentifierName "o" = {}[]
Line 36 col 12 ArrayLiteralExpression "[derived, derived2]" = {}[]
Line 36 col 13 IdentifierName "derived" = Derived
Line 36 col 22 IdentifierName "derived2" = Derived2
Line 37 col 8 IdentifierName "p" = Base[]
Line 37 col 12 ArrayLiteralExpression "[derived, derived2, base]" = Base[]
Line 37 col 13 IdentifierName "derived" = Derived
Line 37 col 22 IdentifierName "derived2" = Derived2
Line 37 col 32 IdentifierName "base" = Base
Line 38 col 8 IdentifierName "q" = {}[]
Line 38 col 12 ArrayLiteralExpression "[[() => derived2], [() => derived]]" = {}[]
Line 38 col 13 ArrayLiteralExpression "[() => derived2]" = { (): Derived2; }[]
Line 38 col 14 ParenthesizedArrowFunctionExpression "() => derived2" = () => Derived2
Line 38 col 20 IdentifierName "derived2" = Derived2
Line 38 col 31 ArrayLiteralExpression "[() => derived]" = { (): Derived; }[]
Line 38 col 32 ParenthesizedArrowFunctionExpression "() => derived" = () => Derived
Line 38 col 38 IdentifierName "derived" = Derived
Line 41 col 7 IdentifierName "WithContextualType" = WithContextualType
Line 43 col 8 IdentifierName "a" = Base[]
Line 43 col 11 IdentifierName "Base" = Base
Line 43 col 20 ArrayLiteralExpression "[derived, derived2]" = Base[]
Line 43 col 21 IdentifierName "derived" = Derived
Line 43 col 30 IdentifierName "derived2" = Derived2
Line 44 col 8 IdentifierName "b" = Derived[]
Line 44 col 11 IdentifierName "Derived" = Derived
Line 44 col 23 ArrayLiteralExpression "[null]" = Derived[]
Line 45 col 8 IdentifierName "c" = Derived[]
Line 45 col 11 IdentifierName "Derived" = Derived
Line 45 col 23 ArrayLiteralExpression "[]" = Derived[]
Line 46 col 8 IdentifierName "d" = { (): Base; }[]
Line 46 col 17 IdentifierName "Base" = Base
Line 46 col 28 ArrayLiteralExpression "[() => derived, () => derived2]" = { (): Base; }[]
Line 46 col 29 ParenthesizedArrowFunctionExpression "() => derived" = () => Derived
Line 46 col 35 IdentifierName "derived" = Derived
Line 46 col 44 ParenthesizedArrowFunctionExpression "() => derived2" = () => Derived2
Line 46 col 50 IdentifierName "derived2" = Derived2
Line 49 col 9 IdentifierName "foo" = typeof foo
Line 49 col 13 IdentifierName "T" = T
Line 49 col 16 IdentifierName "U" = U
Line 49 col 19 IdentifierName "t" = T
Line 49 col 22 IdentifierName "T" = T
Line 49 col 25 IdentifierName "u" = U
Line 49 col 28 IdentifierName "U" = U
Line 50 col 8 IdentifierName "a" = T[]
Line 50 col 12 ArrayLiteralExpression "[t, t]" = T[]
Line 50 col 13 IdentifierName "t" = T
Line 50 col 16 IdentifierName "t" = T
Line 51 col 8 IdentifierName "b" = T[]
Line 51 col 12 ArrayLiteralExpression "[t, null]" = T[]
Line 51 col 13 IdentifierName "t" = T
Line 52 col 8 IdentifierName "c" = {}[]
Line 52 col 12 ArrayLiteralExpression "[t, u]" = {}[]
Line 52 col 13 IdentifierName "t" = T
Line 52 col 16 IdentifierName "u" = U
Line 53 col 8 IdentifierName "d" = {}[]
Line 53 col 12 ArrayLiteralExpression "[t, 1]" = {}[]
Line 53 col 13 IdentifierName "t" = T
Line 54 col 8 IdentifierName "e" = {}[]
Line 54 col 12 ArrayLiteralExpression "[() => t, () => u]" = {}[]
Line 54 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 54 col 19 IdentifierName "t" = T
Line 54 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 54 col 28 IdentifierName "u" = U
Line 55 col 8 IdentifierName "f" = { (): any; }[]
Line 55 col 12 ArrayLiteralExpression "[() => t, () => u, () => null]" = { (): any; }[]
Line 55 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 55 col 19 IdentifierName "t" = T
Line 55 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 55 col 28 IdentifierName "u" = U
Line 55 col 31 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 58 col 9 IdentifierName "foo2" = typeof foo2
Line 58 col 14 IdentifierName "T" = T
Line 58 col 24 IdentifierName "Base" = Base
Line 58 col 30 IdentifierName "U" = U
Line 58 col 40 IdentifierName "Derived" = Derived
Line 58 col 49 IdentifierName "t" = T
Line 58 col 52 IdentifierName "T" = T
Line 58 col 55 IdentifierName "u" = U
Line 58 col 58 IdentifierName "U" = U
Line 59 col 8 IdentifierName "a" = T[]
Line 59 col 12 ArrayLiteralExpression "[t, t]" = T[]
Line 59 col 13 IdentifierName "t" = T
Line 59 col 16 IdentifierName "t" = T
Line 60 col 8 IdentifierName "b" = T[]
Line 60 col 12 ArrayLiteralExpression "[t, null]" = T[]
Line 60 col 13 IdentifierName "t" = T
Line 61 col 8 IdentifierName "c" = {}[]
Line 61 col 12 ArrayLiteralExpression "[t, u]" = {}[]
Line 61 col 13 IdentifierName "t" = T
Line 61 col 16 IdentifierName "u" = U
Line 62 col 8 IdentifierName "d" = {}[]
Line 62 col 12 ArrayLiteralExpression "[t, 1]" = {}[]
Line 62 col 13 IdentifierName "t" = T
Line 63 col 8 IdentifierName "e" = {}[]
Line 63 col 12 ArrayLiteralExpression "[() => t, () => u]" = {}[]
Line 63 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 63 col 19 IdentifierName "t" = T
Line 63 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 63 col 28 IdentifierName "u" = U
Line 64 col 8 IdentifierName "f" = { (): any; }[]
Line 64 col 12 ArrayLiteralExpression "[() => t, () => u, () => null]" = { (): any; }[]
Line 64 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 64 col 19 IdentifierName "t" = T
Line 64 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 64 col 28 IdentifierName "u" = U
Line 64 col 31 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 66 col 8 IdentifierName "g" = Base[]
Line 66 col 12 ArrayLiteralExpression "[t, base]" = Base[]
Line 66 col 13 IdentifierName "t" = T
Line 66 col 16 IdentifierName "base" = Base
Line 67 col 8 IdentifierName "h" = {}[]
Line 67 col 12 ArrayLiteralExpression "[t, derived]" = {}[]
Line 67 col 13 IdentifierName "t" = T
Line 67 col 16 IdentifierName "derived" = Derived
Line 68 col 8 IdentifierName "i" = Base[]
Line 68 col 12 ArrayLiteralExpression "[u, base]" = Base[]
Line 68 col 13 IdentifierName "u" = U
Line 68 col 16 IdentifierName "base" = Base
Line 69 col 8 IdentifierName "j" = Derived[]
Line 69 col 12 ArrayLiteralExpression "[u, derived]" = Derived[]
Line 69 col 13 IdentifierName "u" = U
Line 69 col 16 IdentifierName "derived" = Derived
Line 72 col 9 IdentifierName "foo3" = typeof foo3
Line 72 col 14 IdentifierName "T" = T
Line 72 col 24 IdentifierName "Derived" = Derived
Line 72 col 33 IdentifierName "U" = U
Line 72 col 43 IdentifierName "Derived" = Derived
Line 72 col 52 IdentifierName "t" = T
Line 72 col 55 IdentifierName "T" = T
Line 72 col 58 IdentifierName "u" = U
Line 72 col 61 IdentifierName "U" = U
Line 73 col 8 IdentifierName "a" = T[]
Line 73 col 12 ArrayLiteralExpression "[t, t]" = T[]
Line 73 col 13 IdentifierName "t" = T
Line 73 col 16 IdentifierName "t" = T
Line 74 col 8 IdentifierName "b" = T[]
Line 74 col 12 ArrayLiteralExpression "[t, null]" = T[]
Line 74 col 13 IdentifierName "t" = T
Line 75 col 8 IdentifierName "c" = {}[]
Line 75 col 12 ArrayLiteralExpression "[t, u]" = {}[]
Line 75 col 13 IdentifierName "t" = T
Line 75 col 16 IdentifierName "u" = U
Line 76 col 8 IdentifierName "d" = {}[]
Line 76 col 12 ArrayLiteralExpression "[t, 1]" = {}[]
Line 76 col 13 IdentifierName "t" = T
Line 77 col 8 IdentifierName "e" = {}[]
Line 77 col 12 ArrayLiteralExpression "[() => t, () => u]" = {}[]
Line 77 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 77 col 19 IdentifierName "t" = T
Line 77 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 77 col 28 IdentifierName "u" = U
Line 78 col 8 IdentifierName "f" = { (): any; }[]
Line 78 col 12 ArrayLiteralExpression "[() => t, () => u, () => null]" = { (): any; }[]
Line 78 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 78 col 19 IdentifierName "t" = T
Line 78 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 78 col 28 IdentifierName "u" = U
Line 78 col 31 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 80 col 8 IdentifierName "g" = Base[]
Line 80 col 12 ArrayLiteralExpression "[t, base]" = Base[]
Line 80 col 13 IdentifierName "t" = T
Line 80 col 16 IdentifierName "base" = Base
Line 81 col 8 IdentifierName "h" = Derived[]
Line 81 col 12 ArrayLiteralExpression "[t, derived]" = Derived[]
Line 81 col 13 IdentifierName "t" = T
Line 81 col 16 IdentifierName "derived" = Derived
Line 82 col 8 IdentifierName "i" = Base[]
Line 82 col 12 ArrayLiteralExpression "[u, base]" = Base[]
Line 82 col 13 IdentifierName "u" = U
Line 82 col 16 IdentifierName "base" = Base
Line 83 col 8 IdentifierName "j" = Derived[]
Line 83 col 12 ArrayLiteralExpression "[u, derived]" = Derived[]
Line 83 col 13 IdentifierName "u" = U
Line 83 col 16 IdentifierName "derived" = Derived
Line 86 col 9 IdentifierName "foo4" = typeof foo4
Line 86 col 14 IdentifierName "T" = T
Line 86 col 24 IdentifierName "Base" = Base
Line 86 col 30 IdentifierName "U" = U
Line 86 col 40 IdentifierName "Base" = Base
Line 86 col 46 IdentifierName "t" = T
Line 86 col 49 IdentifierName "T" = T
Line 86 col 52 IdentifierName "u" = U
Line 86 col 55 IdentifierName "U" = U
Line 87 col 8 IdentifierName "a" = T[]
Line 87 col 12 ArrayLiteralExpression "[t, t]" = T[]
Line 87 col 13 IdentifierName "t" = T
Line 87 col 16 IdentifierName "t" = T
Line 88 col 8 IdentifierName "b" = T[]
Line 88 col 12 ArrayLiteralExpression "[t, null]" = T[]
Line 88 col 13 IdentifierName "t" = T
Line 89 col 8 IdentifierName "c" = {}[]
Line 89 col 12 ArrayLiteralExpression "[t, u]" = {}[]
Line 89 col 13 IdentifierName "t" = T
Line 89 col 16 IdentifierName "u" = U
Line 90 col 8 IdentifierName "d" = {}[]
Line 90 col 12 ArrayLiteralExpression "[t, 1]" = {}[]
Line 90 col 13 IdentifierName "t" = T
Line 91 col 8 IdentifierName "e" = {}[]
Line 91 col 12 ArrayLiteralExpression "[() => t, () => u]" = {}[]
Line 91 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 91 col 19 IdentifierName "t" = T
Line 91 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 91 col 28 IdentifierName "u" = U
Line 92 col 8 IdentifierName "f" = { (): any; }[]
Line 92 col 12 ArrayLiteralExpression "[() => t, () => u, () => null]" = { (): any; }[]
Line 92 col 13 ParenthesizedArrowFunctionExpression "() => t" = () => T
Line 92 col 19 IdentifierName "t" = T
Line 92 col 22 ParenthesizedArrowFunctionExpression "() => u" = () => U
Line 92 col 28 IdentifierName "u" = U
Line 92 col 31 ParenthesizedArrowFunctionExpression "() => null" = () => any
Line 94 col 8 IdentifierName "g" = Base[]
Line 94 col 12 ArrayLiteralExpression "[t, base]" = Base[]
Line 94 col 13 IdentifierName "t" = T
Line 94 col 16 IdentifierName "base" = Base
Line 95 col 8 IdentifierName "h" = {}[]
Line 95 col 12 ArrayLiteralExpression "[t, derived]" = {}[]
Line 95 col 13 IdentifierName "t" = T
Line 95 col 16 IdentifierName "derived" = Derived
Line 96 col 8 IdentifierName "i" = Base[]
Line 96 col 12 ArrayLiteralExpression "[u, base]" = Base[]
Line 96 col 13 IdentifierName "u" = U
Line 96 col 16 IdentifierName "base" = Base
Line 97 col 8 IdentifierName "j" = {}[]
Line 97 col 12 ArrayLiteralExpression "[u, derived]" = {}[]
Line 97 col 13 IdentifierName "u" = U
Line 97 col 16 IdentifierName "derived" = Derived
Line 99 col 8 IdentifierName "k" = Base[]
Line 99 col 11 IdentifierName "Base" = Base
Line 99 col 20 ArrayLiteralExpression "[t, u]" = Base[]
Line 99 col 21 IdentifierName "t" = T
Line 99 col 24 IdentifierName "u" = U