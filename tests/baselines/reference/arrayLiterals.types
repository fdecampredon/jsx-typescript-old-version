=== tests/cases/compiler/arrayLiterals.ts ===
Line 2 col 4 IdentifierName "arr1" = {}[]
Line 2 col 10 ArrayLiteralExpression "[[], [1], ['']]" = {}[]
Line 2 col 11 ArrayLiteralExpression "[]" = any[]
Line 2 col 15 ArrayLiteralExpression "[1]" = number[]
Line 2 col 20 ArrayLiteralExpression "['']" = string[]
Line 3 col 4 IdentifierName "arr1" = {}[]
Line 5 col 4 IdentifierName "arr2" = {}[]
Line 5 col 11 ArrayLiteralExpression "[[null], [1], ['']]" = {}[]
Line 5 col 12 ArrayLiteralExpression "[null]" = any[]
Line 5 col 20 ArrayLiteralExpression "[1]" = number[]
Line 5 col 25 ArrayLiteralExpression "['']" = string[]
Line 6 col 4 IdentifierName "arr2" = {}[]
Line 10 col 4 IdentifierName "stringArrArr" = string[][]
Line 10 col 19 ArrayLiteralExpression "[[''], [""]]" = string[][]
Line 10 col 20 ArrayLiteralExpression "['']" = string[]
Line 10 col 26 ArrayLiteralExpression "[""]" = string[]
Line 11 col 4 IdentifierName "stringArrArr" = string[][]
Line 13 col 4 IdentifierName "stringArr" = string[]
Line 13 col 16 ArrayLiteralExpression "['', ""]" = string[]
Line 14 col 4 IdentifierName "stringArr" = string[]
Line 16 col 4 IdentifierName "numberArr" = number[]
Line 16 col 16 ArrayLiteralExpression "[0, 0.0, 0x00, 1e1]" = number[]
Line 17 col 4 IdentifierName "numberArr" = number[]
Line 19 col 4 IdentifierName "boolArr" = boolean[]
Line 19 col 14 ArrayLiteralExpression "[false, true, false, true]" = boolean[]
Line 20 col 4 IdentifierName "boolArr" = boolean[]
Line 22 col 6 IdentifierName "C" = C
Line 22 col 18 IdentifierName "p" = any
Line 23 col 4 IdentifierName "classArr" = C[]
Line 23 col 15 ArrayLiteralExpression "[new C(), new C()]" = C[]
Line 23 col 16 ObjectCreationExpression "new C()" = C
Line 23 col 20 IdentifierName "C" = typeof C
Line 23 col 25 ObjectCreationExpression "new C()" = C
Line 23 col 29 IdentifierName "C" = typeof C
Line 24 col 4 IdentifierName "classArr" = C[]
Line 24 col 14 IdentifierName "C" = C
Line 26 col 4 IdentifierName "classTypeArray" = typeof C[]
Line 26 col 21 ArrayLiteralExpression "[C, C, C]" = typeof C[]
Line 26 col 22 IdentifierName "C" = typeof C
Line 26 col 25 IdentifierName "C" = typeof C
Line 26 col 28 IdentifierName "C" = typeof C
Line 27 col 4 IdentifierName "classTypeArray" = typeof C[]
Line 27 col 20 IdentifierName "Array" = Array<T>
Line 27 col 33 IdentifierName "C" = typeof C
Line 30 col 4 IdentifierName "context1" = { [n: number]: { a: string; b: number; }; }
Line 30 col 17 IdentifierName "n" = number
Line 30 col 31 IdentifierName "a" = string
Line 30 col 42 IdentifierName "b" = number
Line 30 col 60 ArrayLiteralExpression "[{ a: '', b: 0, c: '' }, { a: "", b: 3, c: 0 }]" = { a: string; b: number; }[]
Line 30 col 61 ObjectLiteralExpression "{ a: '', b: 0, c: '' }" = { a: string; b: number; c: string; }
Line 30 col 63 IdentifierName "a" = string
Line 30 col 70 IdentifierName "b" = number
Line 30 col 76 IdentifierName "c" = string
Line 30 col 85 ObjectLiteralExpression "{ a: "", b: 3, c: 0 }" = { a: string; b: number; c: number; }
Line 30 col 87 IdentifierName "a" = string
Line 30 col 94 IdentifierName "b" = number
Line 30 col 100 IdentifierName "c" = number
Line 31 col 4 IdentifierName "context2" = {}[]
Line 31 col 15 ArrayLiteralExpression "[{ a: '', b: 0, c: '' }, { a: "", b: 3, c: 0 }]" = {}[]
Line 31 col 16 ObjectLiteralExpression "{ a: '', b: 0, c: '' }" = { a: string; b: number; c: string; }
Line 31 col 18 IdentifierName "a" = string
Line 31 col 25 IdentifierName "b" = number
Line 31 col 31 IdentifierName "c" = string
Line 31 col 40 ObjectLiteralExpression "{ a: "", b: 3, c: 0 }" = { a: string; b: number; c: number; }
Line 31 col 42 IdentifierName "a" = string
Line 31 col 49 IdentifierName "b" = number
Line 31 col 55 IdentifierName "c" = number
Line 32 col 4 IdentifierName "context2" = {}[]
Line 32 col 14 IdentifierName "Array" = Array<T>
Line 35 col 6 IdentifierName "Base" = Base
Line 35 col 21 IdentifierName "p" = any
Line 36 col 6 IdentifierName "Derived1" = Derived1
Line 36 col 23 IdentifierName "Base" = Base
Line 36 col 38 IdentifierName "m" = any
Line 37 col 6 IdentifierName "Derived2" = Derived2
Line 37 col 23 IdentifierName "Base" = Base
Line 37 col 38 IdentifierName "n" = any
Line 38 col 4 IdentifierName "context3" = Base[]
Line 38 col 14 IdentifierName "Base" = Base
Line 38 col 23 ArrayLiteralExpression "[new Derived1(), new Derived2()]" = Base[]
Line 38 col 24 ObjectCreationExpression "new Derived1()" = Derived1
Line 38 col 28 IdentifierName "Derived1" = typeof Derived1
Line 38 col 40 ObjectCreationExpression "new Derived2()" = Derived2
Line 38 col 44 IdentifierName "Derived2" = typeof Derived2
Line 41 col 4 IdentifierName "context4" = Base[]
Line 41 col 14 IdentifierName "Base" = Base
Line 41 col 23 ArrayLiteralExpression "[new Derived1(), new Derived1()]" = Base[]
Line 41 col 24 ObjectCreationExpression "new Derived1()" = Derived1
Line 41 col 28 IdentifierName "Derived1" = typeof Derived1
Line 41 col 40 ObjectCreationExpression "new Derived1()" = Derived1
Line 41 col 44 IdentifierName "Derived1" = typeof Derived1