=== tests/cases/compiler/typeArgInference2.ts ===
interface Item {
>Item : Item

    name: string;
>name : string
}

declare function foo<T extends Item>(x?: T, y?: T): T;
>foo : typeof foo
>T : T
>Item : Item
>x : T
>T : T
>y : T
>T : T
>T : T

var z1 = foo(null);                   // any
>z1 : any
>foo(null) : any
>foo : typeof foo

var z2 = foo();                       // Item
>z2 : Item
>foo() : Item
>foo : typeof foo

var z3 = foo({ name: null });         // { name: any }
>z3 : { name: any; }
>foo({ name: null }) : { name: any; }
>foo : typeof foo
>{ name: null } : { name: any; }
>name : any

var z4 = foo({ name: "abc" });        // { name: string }
>z4 : { name: string; }
>foo({ name: "abc" }) : { name: string; }
>foo : typeof foo
>{ name: "abc" } : { name: string; }
>name : string

var z5 = foo({ name: "abc", a: 5 });  // { name: string; a: number }
>z5 : { name: string; a: number; }
>foo({ name: "abc", a: 5 }) : { name: string; a: number; }
>foo : typeof foo
>{ name: "abc", a: 5 } : { name: string; a: number; }
>name : string
>a : number

var z6 = foo({ name: "abc", a: 5 }, { name: "def", b: 5 });  // Item
>z6 : Item
>foo({ name: "abc", a: 5 }, { name: "def", b: 5 }) : Item
>foo : typeof foo
>{ name: "abc", a: 5 } : { name: string; a: number; }
>name : string
>a : number
>{ name: "def", b: 5 } : { name: string; b: number; }
>name : string
>b : number

