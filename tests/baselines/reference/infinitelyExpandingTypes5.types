=== tests/cases/compiler/infinitelyExpandingTypes5.ts ===
Line 0 col 10 IdentifierName "Query" = Query<T>
Line 0 col 16 IdentifierName "T" = T
Line 1 col 0 IdentifierName "foo" = (x: T) => Query<T[]>
Line 1 col 8 IdentifierName "x" = T
Line 1 col 11 IdentifierName "T" = T
Line 1 col 15 IdentifierName "Query" = Query<T>
Line 1 col 21 IdentifierName "T" = T
Line 4 col 10 IdentifierName "Enumerator" = Enumerator<T>
Line 4 col 21 IdentifierName "T" = T
Line 5 col 5 IdentifierName "action" = (item: T, index: number) => boolean
Line 5 col 14 IdentifierName "item" = T
Line 5 col 20 IdentifierName "T" = T
Line 5 col 23 IdentifierName "index" = number
Line 8 col 9 IdentifierName "from" = { <T>(array: T[]): Query<T>; <T>(enumerator: Enumerator<T>): Query<T>; }
Line 8 col 14 IdentifierName "T" = T
Line 8 col 17 IdentifierName "array" = T[]
Line 8 col 24 IdentifierName "T" = T
Line 8 col 30 IdentifierName "Query" = Query<T>
Line 8 col 36 IdentifierName "T" = T
Line 9 col 9 IdentifierName "from" = { <T>(array: T[]): Query<T>; <T>(enumerator: Enumerator<T>): Query<T>; }
Line 9 col 14 IdentifierName "T" = T
Line 9 col 17 IdentifierName "enumerator" = Enumerator<T>
Line 9 col 29 IdentifierName "Enumerator" = Enumerator<T>
Line 9 col 40 IdentifierName "T" = T
Line 9 col 45 IdentifierName "Query" = Query<T>
Line 9 col 51 IdentifierName "T" = T
Line 10 col 9 IdentifierName "from" = { <T>(array: T[]): Query<T>; <T>(enumerator: Enumerator<T>): Query<T>; }
Line 10 col 14 IdentifierName "arg" = any
Line 11 col 11 IdentifierName "undefined" = undefined