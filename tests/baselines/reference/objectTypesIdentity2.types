=== tests/cases/compiler/objectTypesIdentity2.ts ===
// object types are identical structurally

class A {
>A : A

    foo: number;
>foo : number
}

class B {
>B : B

    foo: boolean;
>foo : boolean
}

class C<T> {
>C : C<T>
>T : T

    foo: T;
>foo : T
>T : T
}

interface I {
>I : I

    foo: Date;
>foo : Date
>Date : Date
}

var a: { foo: RegExp; }
>a : { foo: RegExp; }
>foo : RegExp
>RegExp : RegExp

enum E { A }
>E : E
>A : E

var b = { foo: E.A };
>b : { foo: E; }
>{ foo: E.A } : { foo: E; }
>foo : E
>E.A : E
>E : typeof E
>A : E

function foo5(x: A);
>foo5 : typeof foo5
>x : A
>A : A

function foo5(x: B); // ok
>foo5 : typeof foo5
>x : B
>B : B

function foo5(x: any) { }
>foo5 : typeof foo5
>x : any

function foo5b(x: A);
>foo5b : typeof foo5b
>x : A
>A : A

function foo5b(x: C<string>); // ok
>foo5b : typeof foo5b
>x : C<string>
>C : C<T>

function foo5b(x: any) { }
>foo5b : typeof foo5b
>x : any

function foo6(x: A);
>foo6 : typeof foo6
>x : A
>A : A

function foo6(x: I); // ok
>foo6 : typeof foo6
>x : I
>I : I

function foo6(x: any) { }
>foo6 : typeof foo6
>x : any

function foo7(x: A);
>foo7 : typeof foo7
>x : A
>A : A

function foo7(x: typeof a); // ok
>foo7 : typeof foo7
>x : { foo: RegExp; }
>a : { foo: RegExp; }

function foo7(x: any) { }
>foo7 : typeof foo7
>x : any

function foo8(x: B);
>foo8 : typeof foo8
>x : B
>B : B

function foo8(x: I); // ok
>foo8 : typeof foo8
>x : I
>I : I

function foo8(x: any) { }
>foo8 : typeof foo8
>x : any

function foo9(x: B);
>foo9 : typeof foo9
>x : B
>B : B

function foo9(x: C<string>); // ok
>foo9 : typeof foo9
>x : C<string>
>C : C<T>

function foo9(x: any) { }
>foo9 : typeof foo9
>x : any

function foo10(x: B);
>foo10 : typeof foo10
>x : B
>B : B

function foo10(x: typeof a); // ok
>foo10 : typeof foo10
>x : { foo: RegExp; }
>a : { foo: RegExp; }

function foo10(x: any) { }
>foo10 : typeof foo10
>x : any

function foo11(x: B);
>foo11 : typeof foo11
>x : B
>B : B

function foo11(x: typeof b); // ok
>foo11 : typeof foo11
>x : { foo: E; }
>b : { foo: E; }

function foo11(x: any) { }
>foo11 : typeof foo11
>x : any

function foo12(x: I);
>foo12 : typeof foo12
>x : I
>I : I

function foo12(x: C<string>); // ok
>foo12 : typeof foo12
>x : C<string>
>C : C<T>

function foo12(x: any) { }
>foo12 : typeof foo12
>x : any

function foo13(x: I);
>foo13 : typeof foo13
>x : I
>I : I

function foo13(x: typeof a); // ok
>foo13 : typeof foo13
>x : { foo: RegExp; }
>a : { foo: RegExp; }

function foo13(x: any) { }
>foo13 : typeof foo13
>x : any

function foo14(x: I);
>foo14 : typeof foo14
>x : I
>I : I

function foo14(x: typeof b); // ok
>foo14 : typeof foo14
>x : { foo: E; }
>b : { foo: E; }

function foo14(x: any) { }
>foo14 : typeof foo14
>x : any

