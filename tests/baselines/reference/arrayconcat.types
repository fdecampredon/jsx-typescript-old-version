=== tests/cases/compiler/arrayconcat.ts ===
Line 0 col 10 IdentifierName "IOptions" = IOptions
Line 1 col 0 IdentifierName "name" = string
Line 2 col 0 IdentifierName "flag" = boolean
Line 3 col 0 IdentifierName "short" = string
Line 4 col 0 IdentifierName "usage" = string
Line 5 col 0 IdentifierName "set" = (s: string) => void
Line 5 col 11 IdentifierName "s" = string
Line 6 col 0 IdentifierName "type" = string
Line 7 col 0 IdentifierName "experimental" = boolean
Line 10 col 6 IdentifierName "parser" = parser
Line 11 col 8 IdentifierName "options" = IOptions[]
Line 11 col 17 IdentifierName "IOptions" = IOptions
Line 13 col 8 IdentifierName "m" = () => void
Line 14 col 0 AssignmentExpression "this.options = this.options.sort(function(a, b) {
            var aName = a.name.toLowerCase();
            var bName = b.name.toLowerCase();

            if (aName > bName) {
                return 1;
            } else if (aName < bName) {
                return -1;
            } else {
                return 0;
            }
        })" = IOptions[]
Line 14 col 0 MemberAccessExpression "this.options" = IOptions[]
Line 14 col 0 ThisKeyword "this" = parser
Line 14 col 7 IdentifierName "options" = IOptions[]
Line 14 col 17 InvocationExpression "this.options.sort(function(a, b) {
            var aName = a.name.toLowerCase();
            var bName = b.name.toLowerCase();

            if (aName > bName) {
                return 1;
            } else if (aName < bName) {
                return -1;
            } else {
                return 0;
            }
        })" = IOptions[]
Line 14 col 17 MemberAccessExpression "this.options.sort" = (compareFn?: (a: IOptions, b: IOptions) => number) => IOptions[]
Line 14 col 17 MemberAccessExpression "this.options" = IOptions[]
Line 14 col 17 ThisKeyword "this" = parser
Line 14 col 22 IdentifierName "options" = IOptions[]
Line 14 col 30 IdentifierName "sort" = (compareFn?: (a: IOptions, b: IOptions) => number) => IOptions[]
Line 14 col 35 FunctionExpression "function(a, b) {
            var aName = a.name.toLowerCase();
            var bName = b.name.toLowerCase();

            if (aName > bName) {
                return 1;
            } else if (aName < bName) {
                return -1;
            } else {
                return 0;
            }
        }" = (a: IOptions, b: IOptions) => number
Line 14 col 44 IdentifierName "a" = IOptions
Line 14 col 47 IdentifierName "b" = IOptions
Line 15 col 16 IdentifierName "aName" = string
Line 15 col 24 InvocationExpression "a.name.toLowerCase()" = string
Line 15 col 24 MemberAccessExpression "a.name.toLowerCase" = () => string
Line 15 col 24 MemberAccessExpression "a.name" = string
Line 15 col 24 IdentifierName "a" = IOptions
Line 15 col 26 IdentifierName "name" = string
Line 15 col 31 IdentifierName "toLowerCase" = () => string
Line 16 col 16 IdentifierName "bName" = string
Line 16 col 24 InvocationExpression "b.name.toLowerCase()" = string
Line 16 col 24 MemberAccessExpression "b.name.toLowerCase" = () => string
Line 16 col 24 MemberAccessExpression "b.name" = string
Line 16 col 24 IdentifierName "b" = IOptions
Line 16 col 26 IdentifierName "name" = string
Line 16 col 31 IdentifierName "toLowerCase" = () => string
Line 18 col 16 GreaterThanExpression "aName > bName" = boolean
Line 18 col 16 IdentifierName "aName" = string
Line 18 col 24 IdentifierName "bName" = string
Line 20 col 23 LessThanExpression "aName < bName" = boolean
Line 20 col 23 IdentifierName "aName" = string
Line 20 col 31 IdentifierName "bName" = string
Line 21 col 23 NegateExpression "-1" = number