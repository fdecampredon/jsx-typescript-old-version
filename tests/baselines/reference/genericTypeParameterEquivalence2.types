=== tests/cases/compiler/genericTypeParameterEquivalence2.ts ===
Line 1 col 9 IdentifierName "compose" = <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
Line 1 col 17 IdentifierName "A" = any
Line 1 col 20 IdentifierName "B" = any
Line 1 col 23 IdentifierName "C" = any
Line 1 col 26 IdentifierName "f" = (b: B) => C
Line 1 col 30 IdentifierName "b" = B
Line 1 col 33 IdentifierName "B" = B
Line 1 col 39 IdentifierName "C" = C
Line 1 col 42 IdentifierName "g" = (a: A) => B
Line 1 col 46 IdentifierName "a" = A
Line 1 col 48 IdentifierName "A" = A
Line 1 col 54 IdentifierName "B" = B
Line 1 col 59 IdentifierName "a" = A
Line 1 col 61 IdentifierName "A" = A
Line 1 col 67 IdentifierName "C" = C
Line 2 col 11 FunctionExpression "function (a:A) : C {
        return f(g.apply(null, a));
    }" = (a: A) => C
Line 2 col 21 IdentifierName "a" = A
Line 2 col 23 IdentifierName "A" = A
Line 2 col 28 IdentifierName "C" = C
Line 3 col 15 InvocationExpression "f(g.apply(null, a))" = C
Line 3 col 15 IdentifierName "f" = (b: B) => C
Line 3 col 17 InvocationExpression "g.apply(null, a)" = any
Line 3 col 17 MemberAccessExpression "g.apply" = (thisArg: any, argArray?: any) => any
Line 3 col 17 IdentifierName "g" = (a: A) => B
Line 3 col 19 IdentifierName "apply" = (thisArg: any, argArray?: any) => any
Line 3 col 31 IdentifierName "a" = A
Line 8 col 9 IdentifierName "forEach" = <A>(list: A[], f: (a: A, n?: number) => void) => void
Line 8 col 17 IdentifierName "A" = any
Line 8 col 20 IdentifierName "list" = A[]
Line 8 col 26 IdentifierName "A" = A
Line 8 col 31 IdentifierName "f" = (a: A, n?: number) => void
Line 8 col 35 IdentifierName "a" = A
Line 8 col 38 IdentifierName "A" = A
Line 8 col 41 IdentifierName "n" = number
Line 9 col 13 IdentifierName "i" = number
Line 9 col 20 LessThanExpression "i < list.length" = boolean
Line 9 col 20 IdentifierName "i" = number
Line 9 col 24 MemberAccessExpression "list.length" = number
Line 9 col 24 IdentifierName "list" = A[]
Line 9 col 29 IdentifierName "length" = number
Line 9 col 37 PreIncrementExpression "++i" = number
Line 9 col 39 IdentifierName "i" = number
Line 10 col 0 InvocationExpression "f(list[i], i)" = void
Line 10 col 0 IdentifierName "f" = (a: A, n?: number) => void
Line 10 col 10 ElementAccessExpression "list[i]" = A
Line 10 col 10 IdentifierName "list" = A[]
Line 10 col 15 IdentifierName "i" = number
Line 10 col 19 IdentifierName "i" = number
Line 15 col 9 IdentifierName "filter" = <A>(f: (a: A) => boolean, ar: A[]) => A[]
Line 15 col 16 IdentifierName "A" = any
Line 15 col 19 IdentifierName "f" = (a: A) => boolean
Line 15 col 23 IdentifierName "a" = A
Line 15 col 26 IdentifierName "A" = A
Line 15 col 41 IdentifierName "ar" = A[]
Line 15 col 45 IdentifierName "A" = A
Line 15 col 51 IdentifierName "A" = A
Line 16 col 8 IdentifierName "ret" = any[]
Line 16 col 14 ArrayLiteralExpression "[]" = undefined[]
Line 17 col 0 InvocationExpression "forEach(ar, (el) => {
        if (f(el)) {
            ret.push(el);
        }
    } )" = void
Line 17 col 0 IdentifierName "forEach" = <A>(list: A[], f: (a: A, n?: number) => void) => void
Line 17 col 12 IdentifierName "ar" = A[]
Line 17 col 16 ParenthesizedArrowFunctionExpression "(el) => {
        if (f(el)) {
            ret.push(el);
        }
    }" = (el: A) => void
Line 17 col 17 IdentifierName "el" = A
Line 18 col 12 InvocationExpression "f(el)" = boolean
Line 18 col 12 IdentifierName "f" = (a: A) => boolean
Line 18 col 14 IdentifierName "el" = A
Line 19 col 0 InvocationExpression "ret.push(el)" = number
Line 19 col 0 MemberAccessExpression "ret.push" = (...items: any[]) => number
Line 19 col 0 IdentifierName "ret" = any[]
Line 19 col 16 IdentifierName "push" = (...items: any[]) => number
Line 19 col 21 IdentifierName "el" = A
Line 23 col 11 IdentifierName "ret" = any[]
Line 27 col 9 IdentifierName "length2" = <A>(ar: A[]) => number
Line 27 col 17 IdentifierName "A" = any
Line 27 col 20 IdentifierName "ar" = A[]
Line 27 col 24 IdentifierName "A" = A
Line 28 col 11 MemberAccessExpression "ar.length" = number
Line 28 col 11 IdentifierName "ar" = A[]
Line 28 col 14 IdentifierName "length" = number
Line 32 col 9 IdentifierName "curry1" = <A, B, C>(f: (a: A, b: B) => C) => (ax: A) => (bx: B) => C
Line 32 col 16 IdentifierName "A" = any
Line 32 col 19 IdentifierName "B" = any
Line 32 col 22 IdentifierName "C" = any
Line 32 col 25 IdentifierName "f" = (a: A, b: B) => C
Line 32 col 29 IdentifierName "a" = A
Line 32 col 32 IdentifierName "A" = A
Line 32 col 35 IdentifierName "b" = B
Line 32 col 38 IdentifierName "B" = B
Line 32 col 44 IdentifierName "C" = C
Line 32 col 49 IdentifierName "ax" = A
Line 32 col 53 IdentifierName "A" = A
Line 32 col 60 IdentifierName "bx" = B
Line 32 col 64 IdentifierName "B" = B
Line 32 col 70 IdentifierName "C" = C
Line 33 col 11 FunctionExpression "function (ay: A) {
        return function (by: B) {
            return f(ay, by);
        };
    }" = (ay: A) => (by: B) => C
Line 33 col 21 IdentifierName "ay" = A
Line 33 col 25 IdentifierName "A" = A
Line 34 col 15 FunctionExpression "function (by: B) {
            return f(ay, by);
        }" = (by: B) => C
Line 34 col 25 IdentifierName "by" = B
Line 34 col 29 IdentifierName "B" = B
Line 35 col 19 InvocationExpression "f(ay, by)" = C
Line 35 col 19 IdentifierName "f" = (a: A, b: B) => C
Line 35 col 21 IdentifierName "ay" = A
Line 35 col 25 IdentifierName "by" = B
Line 40 col 4 IdentifierName "cfilter" = (ax: (a: any) => boolean) => (bx: any[]) => any[]
Line 40 col 14 InvocationExpression "curry1(filter)" = (ax: (a: any) => boolean) => (bx: any[]) => any[]
Line 40 col 14 IdentifierName "curry1" = <A, B, C>(f: (a: A, b: B) => C) => (ax: A) => (bx: B) => C
Line 40 col 21 IdentifierName "filter" = <A>(f: (a: A) => boolean, ar: A[]) => A[]
Line 48 col 9 IdentifierName "countWhere_1" = <A>(pred: (a: A) => boolean) => (a: A[]) => number
Line 48 col 22 IdentifierName "A" = any
Line 48 col 25 IdentifierName "pred" = (a: A) => boolean
Line 48 col 32 IdentifierName "a" = A
Line 48 col 35 IdentifierName "A" = A
Line 48 col 52 IdentifierName "a" = A[]
Line 48 col 55 IdentifierName "A" = A
Line 49 col 11 InvocationExpression "compose(length2, cfilter(pred))" = (a: any[]) => number
Line 49 col 11 IdentifierName "compose" = <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
Line 49 col 19 IdentifierName "length2" = <A>(ar: A[]) => number
Line 49 col 28 InvocationExpression "cfilter(pred)" = (bx: any[]) => any[]
Line 49 col 28 IdentifierName "cfilter" = (ax: (a: any) => boolean) => (bx: any[]) => any[]
Line 49 col 36 IdentifierName "pred" = (a: A) => boolean
Line 52 col 9 IdentifierName "countWhere_2" = <A>(pred: (a: A) => boolean) => (a: A[]) => number
Line 52 col 22 IdentifierName "A" = any
Line 52 col 25 IdentifierName "pred" = (a: A) => boolean
Line 52 col 32 IdentifierName "a" = A
Line 52 col 35 IdentifierName "A" = A
Line 52 col 52 IdentifierName "a" = A[]
Line 52 col 55 IdentifierName "A" = A
Line 53 col 8 IdentifierName "where" = (bx: any[]) => any[]
Line 53 col 16 InvocationExpression "cfilter(pred)" = (bx: any[]) => any[]
Line 53 col 16 IdentifierName "cfilter" = (ax: (a: any) => boolean) => (bx: any[]) => any[]
Line 53 col 24 IdentifierName "pred" = (a: A) => boolean
Line 54 col 11 InvocationExpression "compose(length2, where)" = (a: any[]) => number
Line 54 col 11 IdentifierName "compose" = <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
Line 54 col 19 IdentifierName "length2" = <A>(ar: A[]) => number
Line 54 col 28 IdentifierName "where" = (bx: any[]) => any[]