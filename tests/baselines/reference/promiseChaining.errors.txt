==== tests/cases/compiler/promiseChaining.ts (51 errors) ====
    <<<<<<< HEAD
    ~~
!!! promiseChaining.ts(1,1): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
      ~~
!!! promiseChaining.ts(1,3): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
        ~~
!!! promiseChaining.ts(1,5): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
            ~~~~
!!! promiseChaining.ts(1,9): error TS2095: Cannot find name 'HEAD'.
    =======
    ~~~
!!! promiseChaining.ts(2,1): error TS1005: '>' expected.
       ~~~
!!! promiseChaining.ts(2,4): error TS1003: Identifier expected.
          ~
!!! promiseChaining.ts(2,7): error TS1003: Identifier expected.
    // This exhibits the bug that you see with Promise typings having generic signatures in a generic type
    
    // BUG 858876: should get a fresh type parameter which each then call
    
    >>>>>>> d99cb83... Clean up 'blocked' tests
    ~
!!! promiseChaining.ts(7,1): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
     ~
!!! promiseChaining.ts(7,2): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
      ~
!!! promiseChaining.ts(7,3): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
       ~
!!! promiseChaining.ts(7,4): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
        ~
!!! promiseChaining.ts(7,5): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
         ~
!!! promiseChaining.ts(7,6): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
          ~
!!! promiseChaining.ts(7,7): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
                   ~~~
!!! promiseChaining.ts(7,16): error TS1005: ';' expected.
                             ~~
!!! promiseChaining.ts(7,26): error TS1005: ';' expected.
                                ~~~~~~~~~
!!! promiseChaining.ts(7,29): error TS1005: ';' expected.
                                          ~~~~~
!!! promiseChaining.ts(7,39): error TS1005: ';' expected.
            ~~~~~~~
!!! promiseChaining.ts(7,9): error TS2095: Cannot find name 'd99cb83'.
                       ~~~~~
!!! promiseChaining.ts(7,20): error TS2095: Cannot find name 'Clean'.
                             ~~
!!! promiseChaining.ts(7,26): error TS2095: Cannot find name 'up'.
                                          ~~~~~
!!! promiseChaining.ts(7,39): error TS2095: Cannot find name 'tests'.
    class Chain<T> {
        constructor(public value: T) { }
        then<S>(cb: (x: T) => S): Chain<S> {
            var result = cb(this.value);
    <<<<<<< HEAD
    ~~
!!! promiseChaining.ts(12,1): error TS1008: Unexpected token; 'statement' expected.
      ~~
!!! promiseChaining.ts(12,3): error TS1008: Unexpected token; 'statement' expected.
        ~~
!!! promiseChaining.ts(12,5): error TS1008: Unexpected token; 'statement' expected.
            ~~~~
!!! promiseChaining.ts(12,9): error TS2095: Cannot find name 'HEAD'.
            // should get a fresh type parameter which each then call
            var z = this.then(x => result)/*S*/.then(x => "abc")/*string*/.then(x => x.length)/*number*/; // No error
            ~~~
!!! promiseChaining.ts(14,9): error TS1005: '>' expected.
            return new Chain(result);
        }
    }
    =======
    ~~~
!!! promiseChaining.ts(18,1): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
       ~~~
!!! promiseChaining.ts(18,4): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
          ~
!!! promiseChaining.ts(18,7): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
            var z = this.then(x => result).then(x => "abc").then(x => x.length); 
                                   ~~~~~~
!!! promiseChaining.ts(19,32): error TS2095: Cannot find name 'result'.
            return new Chain(result);
                             ~~~~~~
!!! promiseChaining.ts(20,26): error TS2095: Cannot find name 'result'.
        }
        ~
!!! promiseChaining.ts(21,5): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
    }
    ~
!!! promiseChaining.ts(22,1): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
    
    // same example but with constraints on each type parameter
    class Chain2<T extends { length: number }> {
        constructor(public value: T) { }
        then<S extends Function>(cb: (x: T) => S): Chain2<S> {
            var result = cb(this.value);
            // should get a fresh type parameter which each then call
            var z = this.then(x => result).then(x => "abc").then(x => x.length);
                                           ~~~~
!!! promiseChaining.ts(30,40): error TS2082: Supplied parameters do not match any signature of call target:
!!! 	Call signatures of types '(x: S) => string' and '(x: S) => Function' are incompatible:
!!! 		Type 'String' is missing property 'apply' from type 'Function'.
                                           ~~~~
!!! promiseChaining.ts(30,40): error TS2087: Could not select overload for 'call' expression.
            return new Chain2(result);
        }
    }
    >>>>>>> d99cb83... Clean up 'blocked' tests
    ~
!!! promiseChaining.ts(34,1): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
     ~
!!! promiseChaining.ts(34,2): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
      ~
!!! promiseChaining.ts(34,3): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
       ~
!!! promiseChaining.ts(34,4): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
        ~
!!! promiseChaining.ts(34,5): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
         ~
!!! promiseChaining.ts(34,6): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
          ~
!!! promiseChaining.ts(34,7): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
                   ~~~
!!! promiseChaining.ts(34,16): error TS1005: ';' expected.
                             ~~
!!! promiseChaining.ts(34,26): error TS1005: ';' expected.
                                ~~~~~~~~~
!!! promiseChaining.ts(34,29): error TS1005: ';' expected.
                                          ~~~~~
!!! promiseChaining.ts(34,39): error TS1005: ';' expected.
            ~~~~~~~
!!! promiseChaining.ts(34,9): error TS2095: Cannot find name 'd99cb83'.
                       ~~~~~
!!! promiseChaining.ts(34,20): error TS2095: Cannot find name 'Clean'.
                             ~~
!!! promiseChaining.ts(34,26): error TS2095: Cannot find name 'up'.
                                          ~~~~~
!!! promiseChaining.ts(34,39): error TS2095: Cannot find name 'tests'.
    