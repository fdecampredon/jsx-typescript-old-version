=== tests/cases/compiler/nullIsSubtypeOfEverythingButUndefined.ts ===
// null is a subtype of any other types except undefined

var r0 = true ? null : null;
>r0 : any
>true ? null : null : any

var r0 = true ? null : null;
>r0 : any
>true ? null : null : any

var u: typeof undefined;
>u : any
>undefined : any

var r0b = true ? u : null;
>r0b : any
>true ? u : null : any
>u : any

var r0b = true ? null : u;
>r0b : any
>true ? null : u : any
>u : any

var r1 = true ? 1 : null;
>r1 : number
>true ? 1 : null : number

var r1 = true ? null : 1;
>r1 : number
>true ? null : 1 : number

var r2 = true ? '' : null;
>r2 : string
>true ? '' : null : string

var r2 = true ? null : '';
>r2 : string
>true ? null : '' : string

var r3 = true ? true : null;
>r3 : boolean
>true ? true : null : boolean

var r3 = true ? null : true;
>r3 : boolean
>true ? null : true : boolean

var r4 = true ? new Date() : null;
>r4 : Date
>true ? new Date() : null : Date
>new Date() : Date
>Date : { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }

var r4 = true ? null : new Date();
>r4 : Date
>true ? null : new Date() : Date
>new Date() : Date
>Date : { prototype: Date; parse(s: string): number; UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number; now(): number; (): string; new(): Date; new(value: number): Date; new(value: string): Date; new(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date; }

var r5 = true ? /1/ : null;
>r5 : RegExp
>true ? /1/ : null : RegExp

var r5 = true ? null : /1/;
>r5 : RegExp
>true ? null : /1/ : RegExp

var r6 = true ? { foo: 1 } : null;
>r6 : { foo: number; }
>true ? { foo: 1 } : null : { foo: number; }
>{ foo: 1 } : { foo: number; }
>foo : number

var r6 = true ? null : { foo: 1 };
>r6 : { foo: number; }
>true ? null : { foo: 1 } : { foo: number; }
>{ foo: 1 } : { foo: number; }
>foo : number

var r7 = true ? () => { } : null;
>r7 : () => void
>true ? () => { } : null : () => void
>() => { } : () => void

var r7 = true ? null : () => { };
>r7 : () => void
>true ? null : () => { } : () => void
>() => { } : () => void

var r8 = true ? <T>(x: T) => { return x } : null;
>r8 : <T>(x: T) => T
>true ? <T>(x: T) => { return x } : null : <T>(x: T) => T
><T>(x: T) => { return x } : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

var r8b = true ? null : <T>(x: T) => { return x }; // type parameters not identical across declarations
>r8b : <T>(x: T) => T
>true ? null : <T>(x: T) => { return x } : <T>(x: T) => T
><T>(x: T) => { return x } : <T>(x: T) => T
>T : T
>x : T
>T : T
>x : T

interface I1 { foo: number; }
>I1 : I1
>foo : number

var i1: I1;
>i1 : I1
>I1 : I1

var r9 = true ? i1 : null;
>r9 : I1
>true ? i1 : null : I1
>i1 : I1

var r9 = true ? null : i1;
>r9 : I1
>true ? null : i1 : I1
>i1 : I1

class C1 { foo: number; }
>C1 : C1
>foo : number

var c1: C1;
>c1 : C1
>C1 : C1

var r10 = true ? c1 : null;
>r10 : C1
>true ? c1 : null : C1
>c1 : C1

var r10 = true ? null : c1;
>r10 : C1
>true ? null : c1 : C1
>c1 : C1

class C2<T> { foo: T; }
>C2 : C2<T>
>T : T
>foo : T
>T : T

var c2: C2<number>;
>c2 : C2<number>
>C2 : C2<T>

var r12 = true ? c2 : null;
>r12 : C2<number>
>true ? c2 : null : C2<number>
>c2 : C2<number>

var r12 = true ? null : c2;
>r12 : C2<number>
>true ? null : c2 : C2<number>
>c2 : C2<number>

enum E { A }
>E : E
>A : E

var r13 = true ? E : null;
>r13 : typeof E
>true ? E : null : typeof E
>E : typeof E

var r13 = true ? null : E;
>r13 : typeof E
>true ? null : E : typeof E
>E : typeof E

var r14 = true ? E.A : null;
>r14 : E
>true ? E.A : null : E
>E.A : E
>E : typeof E
>A : E

var r14 = true ? null : E.A;
>r14 : E
>true ? null : E.A : E
>E.A : E
>E : typeof E
>A : E

function f() { }
>f : typeof f

module f {
>f : f

    export var bar = 1;
>bar : number
}
var af: typeof f;
>af : typeof f
>f : typeof f

var r15 = true ? af : null;
>r15 : typeof f
>true ? af : null : typeof f
>af : typeof f

var r15 = true ? null : af;
>r15 : typeof f
>true ? null : af : typeof f
>af : typeof f

class c { baz: string }
>c : c
>baz : string

module c {
>c : c

    export var bar = 1;
>bar : number
}
var ac: typeof c;
>ac : typeof c
>c : typeof c

var r16 = true ? ac : null;
>r16 : typeof c
>true ? ac : null : typeof c
>ac : typeof c

var r16 = true ? null : ac;
>r16 : typeof c
>true ? null : ac : typeof c
>ac : typeof c

function f17<T>(x: T) {
>f17 : typeof f17
>T : T
>x : T
>T : T

    var r17 = true ? x : null;
>r17 : T
>true ? x : null : T
>x : T

    var r17 = true ? null : x;
>r17 : T
>true ? null : x : T
>x : T
}

function f18<T, U>(x: U) {
>f18 : typeof f18
>T : T
>U : U
>x : U
>U : U

    var r18 = true ? x : null;
>r18 : U
>true ? x : null : U
>x : U

    var r18 = true ? null : x;
>r18 : U
>true ? null : x : U
>x : U
}
//function f18<T, U extends T>(x: U) {
//    var r18 = true ? x : null;
//    var r18 = true ? null : x;
//}

var r19 = true ? new Object() : null;
>r19 : Object
>true ? new Object() : null : Object
>new Object() : Object
>Object : { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }

var r19 = true ? null : new Object();
>r19 : Object
>true ? null : new Object() : Object
>new Object() : Object
>Object : { prototype: Object; getPrototypeOf(o: any): any; getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor; getOwnPropertyNames(o: any): string[]; create(o: any, properties?: PropertyDescriptorMap): any; defineProperty(o: any, p: string, attributes: PropertyDescriptor): any; defineProperties(o: any, properties: PropertyDescriptorMap): any; seal(o: any): any; freeze(o: any): any; preventExtensions(o: any): any; isSealed(o: any): boolean; isFrozen(o: any): boolean; isExtensible(o: any): boolean; keys(o: any): string[]; (): any; (value: any): any; new(value?: any): Object; }

var r20 = true ? {} : null;
>r20 : {}
>true ? {} : null : {}
>{} : {}

var r20 = true ? null : {};
>r20 : {}
>true ? null : {} : {}
>{} : {}

