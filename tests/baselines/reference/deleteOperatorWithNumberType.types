=== tests/cases/compiler/deleteOperatorWithNumberType.ts ===
Line 1 col 4 IdentifierName "NUMBER" = number
Line 2 col 4 IdentifierName "NUMBER1" = number[]
Line 2 col 24 ArrayLiteralExpression "[1, 2]" = number[]
Line 4 col 9 IdentifierName "foo" = typeof foo
Line 6 col 6 IdentifierName "A" = A
Line 7 col 11 IdentifierName "a" = number
Line 8 col 11 IdentifierName "foo" = () => number
Line 10 col 7 IdentifierName "M" = M
Line 11 col 15 IdentifierName "n" = number
Line 14 col 4 IdentifierName "objA" = A
Line 14 col 11 ObjectCreationExpression "new A()" = A
Line 14 col 15 IdentifierName "A" = typeof A
Line 17 col 4 IdentifierName "ResultIsBoolean1" = boolean
Line 17 col 23 DeleteExpression "delete NUMBER" = boolean
Line 17 col 30 IdentifierName "NUMBER" = number
Line 18 col 4 IdentifierName "ResultIsBoolean2" = boolean
Line 18 col 23 DeleteExpression "delete NUMBER1" = boolean
Line 18 col 30 IdentifierName "NUMBER1" = number[]
Line 21 col 4 IdentifierName "ResultIsBoolean3" = boolean
Line 21 col 23 DeleteExpression "delete 1" = boolean
Line 22 col 4 IdentifierName "ResultIsBoolean4" = boolean
Line 22 col 23 DeleteExpression "delete { x: 1, y: 2}" = boolean
Line 22 col 30 ObjectLiteralExpression "{ x: 1, y: 2}" = { x: number; y: number; }
Line 22 col 32 IdentifierName "x" = number
Line 22 col 38 IdentifierName "y" = number
Line 23 col 4 IdentifierName "ResultIsBoolean5" = boolean
Line 23 col 23 DeleteExpression "delete { x: 1, y: (n: number) => { return n; } }" = boolean
Line 23 col 30 ObjectLiteralExpression "{ x: 1, y: (n: number) => { return n; } }" = { x: number; y: (n: number) => number; }
Line 23 col 32 IdentifierName "x" = number
Line 23 col 38 IdentifierName "y" = (n: number) => number
Line 23 col 41 ParenthesizedArrowFunctionExpression "(n: number) => { return n; }" = (n: number) => number
Line 23 col 42 IdentifierName "n" = number
Line 23 col 65 IdentifierName "n" = number
Line 26 col 4 IdentifierName "ResultIsBoolean6" = boolean
Line 26 col 23 DeleteExpression "delete objA.a" = boolean
Line 26 col 30 MemberAccessExpression "objA.a" = number
Line 26 col 30 IdentifierName "objA" = A
Line 26 col 35 IdentifierName "a" = number
Line 27 col 4 IdentifierName "ResultIsBoolean7" = boolean
Line 27 col 23 DeleteExpression "delete M.n" = boolean
Line 27 col 30 MemberAccessExpression "M.n" = number
Line 27 col 30 IdentifierName "M" = typeof M
Line 27 col 32 IdentifierName "n" = number
Line 28 col 4 IdentifierName "ResultIsBoolean8" = boolean
Line 28 col 23 DeleteExpression "delete NUMBER1[0]" = boolean
Line 28 col 30 ElementAccessExpression "NUMBER1[0]" = number
Line 28 col 30 IdentifierName "NUMBER1" = number[]
Line 29 col 4 IdentifierName "ResultIsBoolean9" = boolean
Line 29 col 23 DeleteExpression "delete foo()" = boolean
Line 29 col 30 InvocationExpression "foo()" = number
Line 29 col 30 IdentifierName "foo" = typeof foo
Line 30 col 4 IdentifierName "ResultIsBoolean10" = boolean
Line 30 col 24 DeleteExpression "delete A.foo()" = boolean
Line 30 col 31 InvocationExpression "A.foo()" = number
Line 30 col 31 MemberAccessExpression "A.foo" = () => number
Line 30 col 31 IdentifierName "A" = typeof A
Line 30 col 33 IdentifierName "foo" = () => number
Line 31 col 4 IdentifierName "ResultIsBoolean11" = boolean
Line 31 col 24 DeleteExpression "delete (NUMBER + NUMBER)" = boolean
Line 31 col 31 ParenthesizedExpression "(NUMBER + NUMBER)" = number
Line 31 col 32 AddExpression "NUMBER + NUMBER" = number
Line 31 col 32 IdentifierName "NUMBER" = number
Line 31 col 41 IdentifierName "NUMBER" = number
Line 34 col 4 IdentifierName "ResultIsBoolean12" = boolean
Line 34 col 24 DeleteExpression "delete delete NUMBER" = boolean
Line 34 col 31 DeleteExpression "delete NUMBER" = boolean
Line 34 col 38 IdentifierName "NUMBER" = number
Line 35 col 4 IdentifierName "ResultIsBoolean13" = boolean
Line 35 col 24 DeleteExpression "delete delete delete (NUMBER + NUMBER)" = boolean
Line 35 col 31 DeleteExpression "delete delete (NUMBER + NUMBER)" = boolean
Line 35 col 38 DeleteExpression "delete (NUMBER + NUMBER)" = boolean
Line 35 col 45 ParenthesizedExpression "(NUMBER + NUMBER)" = number
Line 35 col 46 AddExpression "NUMBER + NUMBER" = number
Line 35 col 46 IdentifierName "NUMBER" = number
Line 35 col 55 IdentifierName "NUMBER" = number
Line 36 col 0 DeleteExpression "// miss assignment operators
delete 1" = boolean
Line 39 col 0 DeleteExpression "delete NUMBER" = boolean
Line 39 col 7 IdentifierName "NUMBER" = number
Line 40 col 0 DeleteExpression "delete NUMBER1" = boolean
Line 40 col 7 IdentifierName "NUMBER1" = number[]
Line 41 col 0 DeleteExpression "delete foo()" = boolean
Line 41 col 7 InvocationExpression "foo()" = number
Line 41 col 7 IdentifierName "foo" = typeof foo
Line 42 col 0 DeleteExpression "delete objA.a" = boolean
Line 42 col 7 MemberAccessExpression "objA.a" = number
Line 42 col 7 IdentifierName "objA" = A
Line 42 col 12 IdentifierName "a" = number
Line 43 col 0 DeleteExpression "delete M.n" = boolean
Line 43 col 7 MemberAccessExpression "M.n" = number
Line 43 col 7 IdentifierName "M" = typeof M
Line 43 col 9 IdentifierName "n" = number
Line 44 col 0 CommaExpression "delete objA.a, M.n" = number
Line 44 col 0 DeleteExpression "delete objA.a" = boolean
Line 44 col 7 MemberAccessExpression "objA.a" = number
Line 44 col 7 IdentifierName "objA" = A
Line 44 col 12 IdentifierName "a" = number
Line 44 col 15 MemberAccessExpression "M.n" = number
Line 44 col 15 IdentifierName "M" = typeof M
Line 44 col 17 IdentifierName "n" = number