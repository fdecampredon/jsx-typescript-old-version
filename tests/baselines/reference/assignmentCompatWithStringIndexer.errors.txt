==== tests/cases/compiler/assignmentCompatWithStringIndexer.ts (8 errors) ====
    // index signatures must be compatible in assignments
    
    interface Base { foo: string; }
    interface Derived extends Base { bar: string; }
    interface Derived2 extends Derived { baz: string; }
    
    class A {
        [x: string]: Base;
    }
    
    var a: A;
    
    var b: { [x: string]: Derived; }
    a = b; // ok
    b = a; // error
    ~
!!! assignmentCompatWithStringIndexer.ts(15,1): error TS2012: Type 'A' is not assignable to type '{ [x: string]: Derived; }':
!!! 	Index signatures of types 'A' and '{ [x: string]: Derived; }' are incompatible:
!!! 		Type 'Base' is missing property 'bar' from type 'Derived'.
    
    var b2: { [x: string]: Derived2; }
    a = b2; // ok
    b2 = a; // error
    ~~
!!! assignmentCompatWithStringIndexer.ts(19,1): error TS2012: Type 'A' is not assignable to type '{ [x: string]: Derived2; }':
!!! 	Index signatures of types 'A' and '{ [x: string]: Derived2; }' are incompatible:
!!! 		Type 'Base' is missing property 'baz' from type 'Derived2'.
    
    module Generics {
        class A<T extends Base> {
            [x: string]: T;
        }
    
        class B extends A<Base> {
            [x: string]: Derived; // ok
        }
    
        var b1: { [x: string]: Derived; };
        var a1: A<Base>;
        a1 = b1; // ok
        b1 = a1; // error
        ~~
!!! assignmentCompatWithStringIndexer.ts(33,5): error TS2012: Type 'A<Base>' is not assignable to type '{ [x: string]: Derived; }':
!!! 	Index signatures of types 'A<Base>' and '{ [x: string]: Derived; }' are incompatible:
!!! 		Type 'Base' is missing property 'bar' from type 'Derived'.
    
        class B2 extends A<Base> {
            [x: string]: Derived2; // ok
        }
    
        var b2: { [x: string]: Derived2; };
        a1 = b2; // ok
        b2 = a1; // error
        ~~
!!! assignmentCompatWithStringIndexer.ts(41,5): error TS2012: Type 'A<Base>' is not assignable to type '{ [x: string]: Derived2; }':
!!! 	Index signatures of types 'A<Base>' and '{ [x: string]: Derived2; }' are incompatible:
!!! 		Type 'Base' is missing property 'baz' from type 'Derived2'.
    
        function foo<T extends Base>() {
            var b3: { [x: string]: Derived; };
            var a3: A<T>;
            a3 = b3; // error
            ~~
!!! assignmentCompatWithStringIndexer.ts(46,9): error TS2012: Type '{ [x: string]: Derived; }' is not assignable to type 'A<T>':
!!! 	Index signatures of types '{ [x: string]: Derived; }' and 'A<T>' are incompatible.
            b3 = a3; // error
            ~~
!!! assignmentCompatWithStringIndexer.ts(47,9): error TS2012: Type 'A<T>' is not assignable to type '{ [x: string]: Derived; }':
!!! 	Index signatures of types 'A<T>' and '{ [x: string]: Derived; }' are incompatible:
!!! 		Type 'Base' is missing property 'bar' from type 'Derived'.
    
            var b4: { [x: string]: Derived2; };
            a3 = b4; // error
            ~~
!!! assignmentCompatWithStringIndexer.ts(50,9): error TS2012: Type '{ [x: string]: Derived2; }' is not assignable to type 'A<T>':
!!! 	Index signatures of types '{ [x: string]: Derived2; }' and 'A<T>' are incompatible.
            b4 = a3; // error
            ~~
!!! assignmentCompatWithStringIndexer.ts(51,9): error TS2012: Type 'A<T>' is not assignable to type '{ [x: string]: Derived2; }':
!!! 	Index signatures of types 'A<T>' and '{ [x: string]: Derived2; }' are incompatible:
!!! 		Type 'Base' is missing property 'baz' from type 'Derived2'.
        }
    }