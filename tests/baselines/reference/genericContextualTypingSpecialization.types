=== tests/cases/compiler/genericContextualTypingSpecialization.ts ===
Line 0 col 4 IdentifierName "b" = number[]
Line 1 col 0 InvocationExpression "b.reduce<number>((c, d) => c + d, 0)" = number
Line 1 col 0 MemberAccessExpression "b.reduce" = { (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue?: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; }
Line 1 col 0 IdentifierName "b" = number[]
Line 1 col 2 IdentifierName "reduce" = { (callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: number[]) => number, initialValue?: number): number; <U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: number[]) => U, initialValue: U): U; }
Line 1 col 17 ParenthesizedArrowFunctionExpression "(c, d) => c + d" = (c: number, d: number) => number
Line 1 col 18 IdentifierName "c" = number
Line 1 col 21 IdentifierName "d" = number
Line 1 col 27 AddExpression "c + d" = number
Line 1 col 27 IdentifierName "c" = number
Line 1 col 31 IdentifierName "d" = number