=== tests/cases/compiler/objectTypesIdentityWithConstructSignatures2.ts ===
// object types are identical structurally

class B {
>B : B

    constructor(x: number) { return null; }
>x : number
}

class C<T> {
>C : C<T>
>T : T

    constructor(x: T) { return null; }
>x : T
>T : T
}

interface I {
>I : I

    new(x: boolean): string;
>x : boolean
}

interface I2<T> {
>I2 : I2<T>
>T : T

    new(x: T): T;
>x : T
>T : T
>T : T
}

var a: { new(x: Date): string }
>a : new(x: Date) => string
>x : Date
>Date : Date

var b = { new(x: RegExp) { return ''; } }; // not a construct signature, function called new
>b : { new(x: RegExp): string; }
>{ new(x: RegExp) { return ''; } } : { new(x: RegExp): string; }
>new : (x: RegExp) => string
>x : RegExp
>RegExp : RegExp

function foo1b(x: B);
>foo1b : typeof foo1b
>x : B
>B : B

function foo1b(x: B); // error
>foo1b : typeof foo1b
>x : B
>B : B

function foo1b(x: any) { }
>foo1b : typeof foo1b
>x : any

function foo1c(x: C<string>);
>foo1c : typeof foo1c
>x : C<string>
>C : C<T>

function foo1c(x: C<string>); // error
>foo1c : typeof foo1c
>x : C<string>
>C : C<T>

function foo1c(x: any) { }
>foo1c : typeof foo1c
>x : any

function foo2(x: I);
>foo2 : typeof foo2
>x : I
>I : I

function foo2(x: I); // error
>foo2 : typeof foo2
>x : I
>I : I

function foo2(x: any) { }
>foo2 : typeof foo2
>x : any

function foo3(x: typeof a);
>foo3 : typeof foo3
>x : new(x: Date) => string
>a : new(x: Date) => string

function foo3(x: typeof a); // error
>foo3 : typeof foo3
>x : new(x: Date) => string
>a : new(x: Date) => string

function foo3(x: any) { }
>foo3 : typeof foo3
>x : any

function foo4(x: typeof b);
>foo4 : typeof foo4
>x : { new(x: RegExp): string; }
>b : { new(x: RegExp): string; }

function foo4(x: typeof b); // error
>foo4 : typeof foo4
>x : { new(x: RegExp): string; }
>b : { new(x: RegExp): string; }

function foo4(x: any) { }
>foo4 : typeof foo4
>x : any

function foo8(x: B);
>foo8 : typeof foo8
>x : B
>B : B

function foo8(x: I); // ok
>foo8 : typeof foo8
>x : I
>I : I

function foo8(x: any) { }
>foo8 : typeof foo8
>x : any

function foo9(x: B);
>foo9 : typeof foo9
>x : B
>B : B

function foo9(x: C<string>); // error, types are structurally equal
>foo9 : typeof foo9
>x : C<string>
>C : C<T>

function foo9(x: any) { }
>foo9 : typeof foo9
>x : any

function foo10(x: B);
>foo10 : typeof foo10
>x : B
>B : B

function foo10(x: typeof a); // ok
>foo10 : typeof foo10
>x : new(x: Date) => string
>a : new(x: Date) => string

function foo10(x: any) { }
>foo10 : typeof foo10
>x : any

function foo11(x: B);
>foo11 : typeof foo11
>x : B
>B : B

function foo11(x: typeof b); // ok
>foo11 : typeof foo11
>x : { new(x: RegExp): string; }
>b : { new(x: RegExp): string; }

function foo11(x: any) { }
>foo11 : typeof foo11
>x : any

function foo12(x: I);
>foo12 : typeof foo12
>x : I
>I : I

function foo12(x: C<string>); // ok
>foo12 : typeof foo12
>x : C<string>
>C : C<T>

function foo12(x: any) { }
>foo12 : typeof foo12
>x : any

function foo12b(x: I2<string>);
>foo12b : typeof foo12b
>x : I2<string>
>I2 : I2<T>

function foo12b(x: C<string>); // ok
>foo12b : typeof foo12b
>x : C<string>
>C : C<T>

function foo12b(x: any) { }
>foo12b : typeof foo12b
>x : any

function foo13(x: I);
>foo13 : typeof foo13
>x : I
>I : I

function foo13(x: typeof a); // ok
>foo13 : typeof foo13
>x : new(x: Date) => string
>a : new(x: Date) => string

function foo13(x: any) { }
>foo13 : typeof foo13
>x : any

function foo14(x: I);
>foo14 : typeof foo14
>x : I
>I : I

function foo14(x: typeof b); // ok
>foo14 : typeof foo14
>x : { new(x: RegExp): string; }
>b : { new(x: RegExp): string; }

function foo14(x: any) { }
>foo14 : typeof foo14
>x : any

function foo15(x: I2<string>);
>foo15 : typeof foo15
>x : I2<string>
>I2 : I2<T>

function foo15(x: C<number>); // ok
>foo15 : typeof foo15
>x : C<number>
>C : C<T>

function foo15(x: any) { }
>foo15 : typeof foo15
>x : any

