==== tests/cases/compiler/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts (7 errors) ====
    // Two call or construct signatures are considered identical when they have the same number of type parameters and, considering those 
    // parameters pairwise identical, have identical type parameter constraints, identical number of parameters with identical kind(required, 
    // optional or rest) and types, and identical return types.
    
    class One { foo: string }
    class Two { foo: string }
    interface Three { foo: string }
    interface Four<T> { foo: T }
    interface Five<T> extends Four<T> { }
    interface Six<T, U> {
        foo: T;
    }
    
    class B<T extends U, U extends Two> {
            ~~~~~~~~~~~
!!! objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts(14,9): error TS2229: Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
        constructor(x: T, y: U) { return null; }
    }
    
    class C<T extends U, U extends Three> {
            ~~~~~~~~~~~
!!! objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts(18,9): error TS2229: Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
        constructor(x: T, y: U) { return null; }
    }
    
    class D<T extends U, U extends Four<string>> {
            ~~~~~~~~~~~
!!! objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts(22,9): error TS2229: Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
        constructor(x: T, y: U) { return null; }
    }
    
    interface I<T extends U, U extends Five<string>> {
                ~~~~~~~~~~~
!!! objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts(26,13): error TS2229: Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
        new(x: T, y: U): string;
    }
    
    interface I2 {
        new<T extends U, U extends Six<string, string>>(x: T, y: U): string;
            ~~~~~~~~~~~
!!! objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts(31,9): error TS2229: Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
    }
    
    var a: { new<T extends U, U extends One>(x: T, y: U): string }
                 ~~~~~~~~~~~
!!! objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts(34,14): error TS2229: Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
    var b = { new<T extends U, U extends Two>(x: T, y: U) { return ''; } }; // not a construct signature, function called new
                  ~~~~~~~~~~~
!!! objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts(35,15): error TS2229: Constraint of a type parameter cannot reference any type parameter from the same type parameter list.
    
    function foo1b(x: B<Two, Two>);
    function foo1b(x: B<Two, Two>); // error
    function foo1b(x: any) { }
    
    function foo1c(x: C<Three, Three>);
    function foo1c(x: C<Three, Three>); // error
    function foo1c(x: any) { }
    
    function foo2(x: I<Five<string>, Five<string>>);
    function foo2(x: I<Five<string>, Five<string>>); // error
    function foo2(x: any) { }
    
    function foo3(x: typeof a);
    function foo3(x: typeof a); // error
    function foo3(x: any) { }
    
    function foo4(x: typeof b);
    function foo4(x: typeof b); // error
    function foo4(x: any) { }
    
    function foo5c(x: C<Three, Three>);
    function foo5c(x: D<Four<string>, Four<string>>); // error
    function foo5c(x: any) { }
    
    function foo6c(x: C<Three, Three>);
    function foo6c(x: D<Four<string>, Four<string>>); // error
    function foo6c(x: any) { }
    
    function foo8(x: B<Two, Two>);
    function foo8(x: I<Five<string>, Five<string>>); // error
    function foo8(x: any) { }
    
    function foo9(x: B<Two, Two>);
    function foo9(x: C<Three, Three>); // error
    function foo9(x: any) { }
    
    function foo10(x: B<Two, Two>);
    function foo10(x: typeof a); // ok
    function foo10(x: any) { }
    
    function foo11(x: B<Two, Two>);
    function foo11(x: typeof b); // ok
    function foo11(x: any) { }
    
    function foo12(x: I<Five<string>, Five<string>>);
    function foo12(x: C<Three, Three>); // ok
    function foo12(x: any) { }
    
    function foo12b(x: I2);
    function foo12b(x: C<Three, Three>); // ok
    function foo12b(x: any) { }
    
    function foo13(x: I<Five<string>, Five<string>>);
    function foo13(x: typeof a); // ok
    function foo13(x: any) { }
    
    function foo14(x: I<Five<string>, Five<string>>);
    function foo14(x: typeof b); // ok
    function foo14(x: any) { }