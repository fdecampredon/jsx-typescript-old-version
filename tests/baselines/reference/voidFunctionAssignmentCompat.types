=== tests/cases/compiler/voidFunctionAssignmentCompat.ts ===
Line 0 col 4 IdentifierName "fa" = () => any
Line 0 col 9 FunctionExpression "function(): any { return 3; }" = () => any
Line 1 col 0 AssignmentExpression "fa = function() { } // should not work" = () => void
Line 1 col 0 IdentifierName "fa" = () => any
Line 1 col 5 FunctionExpression "function() { } // should not work" = () => void
Line 3 col 4 IdentifierName "fv" = () => void
Line 3 col 9 FunctionExpression "function(): void {}" = () => void
Line 4 col 0 AssignmentExpression "fv = function() { return 0; } // should work" = () => number
Line 4 col 0 IdentifierName "fv" = () => void
Line 4 col 5 FunctionExpression "function() { return 0; } // should work" = () => number
Line 6 col 9 IdentifierName "execAny" = (callback: (val: any) => any) => any
Line 6 col 17 IdentifierName "callback" = (val: any) => any
Line 6 col 27 IdentifierName "val" = any
Line 6 col 51 InvocationExpression "callback(0)" = any
Line 6 col 51 IdentifierName "callback" = (val: any) => any
Line 7 col 0 InvocationExpression "execAny(function () {})" = any
Line 7 col 0 IdentifierName "execAny" = (callback: (val: any) => any) => any
Line 7 col 8 FunctionExpression "function () {}" = () => void
Line 9 col 9 IdentifierName "execVoid" = (callback: (val: any) => void) => void
Line 9 col 18 IdentifierName "callback" = (val: any) => void
Line 9 col 28 IdentifierName "val" = any
Line 9 col 46 InvocationExpression "callback(0)" = void
Line 9 col 46 IdentifierName "callback" = (val: any) => void
Line 10 col 0 InvocationExpression "execVoid(function () {return 0;})" = void
Line 10 col 0 IdentifierName "execVoid" = (callback: (val: any) => void) => void
Line 10 col 9 FunctionExpression "function () {return 0;}" = () => number
Line 12 col 4 IdentifierName "fra" = (v: any) => any
Line 12 col 10 IdentifierName "v" = any
Line 12 col 24 FunctionExpression "function() { return function () {}; } // should work" = () => () => void
Line 12 col 44 FunctionExpression "function () {}" = () => void
Line 13 col 4 IdentifierName "frv" = (v: any) => void
Line 13 col 10 IdentifierName "v" = any
Line 13 col 25 FunctionExpression "function() { return function () { return 0; } } // should work" = () => () => number
Line 13 col 45 FunctionExpression "function () { return 0; }" = () => number
Line 15 col 4 IdentifierName "fra3" = (v: any) => string
Line 15 col 11 IdentifierName "v" = any
Line 15 col 28 InvocationExpression "(function() { return function (v:string) {return v;}; })() // should work" = (v: string) => string
Line 15 col 28 ParenthesizedExpression "(function() { return function (v:string) {return v;}; })" = () => (v: string) => string
Line 15 col 29 FunctionExpression "function() { return function (v:string) {return v;}; }" = () => (v: string) => string
Line 15 col 49 FunctionExpression "function (v:string) {return v;}" = (v: string) => string
Line 15 col 59 IdentifierName "v" = string
Line 15 col 77 IdentifierName "v" = string
Line 16 col 4 IdentifierName "frv3" = (v: any) => number
Line 16 col 11 IdentifierName "v" = any
Line 16 col 28 InvocationExpression "(function() { return function () { return 0; } })() // should work" = () => number
Line 16 col 28 ParenthesizedExpression "(function() { return function () { return 0; } })" = () => () => number
Line 16 col 29 FunctionExpression "function() { return function () { return 0; } }" = () => () => number
Line 16 col 49 FunctionExpression "function () { return 0; }" = () => number