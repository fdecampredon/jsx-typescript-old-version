=== tests/cases/compiler/logicalNotOperatorWithAnyOtherType.ts ===
Line 2 col 4 IdentifierName "ANY" = any
Line 3 col 4 IdentifierName "ANY1" = any
Line 4 col 4 IdentifierName "ANY2" = any[]
Line 4 col 18 ArrayLiteralExpression "["", ""]" = any[]
Line 5 col 4 IdentifierName "obj" = () => {}
Line 6 col 4 IdentifierName "obj1" = { x: string; y: () => void; }
Line 6 col 11 ObjectLiteralExpression "{ x: "", y: () => { }}" = { x: string; y: () => void; }
Line 6 col 13 IdentifierName "x" = string
Line 6 col 20 IdentifierName "y" = () => void
Line 6 col 23 ParenthesizedArrowFunctionExpression "() => { }" = () => void
Line 7 col 9 IdentifierName "foo" = typeof foo
Line 8 col 8 IdentifierName "a" = any
Line 9 col 11 IdentifierName "a" = any
Line 11 col 6 IdentifierName "A" = A
Line 12 col 11 IdentifierName "a" = any
Line 13 col 11 IdentifierName "foo" = () => any
Line 14 col 12 IdentifierName "a" = any
Line 15 col 15 IdentifierName "a" = any
Line 18 col 7 IdentifierName "M" = M
Line 19 col 15 IdentifierName "n" = any
Line 21 col 4 IdentifierName "objA" = A
Line 21 col 11 ObjectCreationExpression "new A()" = A
Line 21 col 15 IdentifierName "A" = typeof A
Line 24 col 4 IdentifierName "ResultIsBoolean1" = boolean
Line 24 col 23 LogicalNotExpression "!ANY1" = boolean
Line 24 col 24 IdentifierName "ANY1" = any
Line 25 col 4 IdentifierName "ResultIsBoolean2" = boolean
Line 25 col 23 LogicalNotExpression "!ANY2" = boolean
Line 25 col 24 IdentifierName "ANY2" = any[]
Line 26 col 4 IdentifierName "ResultIsBoolean3" = boolean
Line 26 col 23 LogicalNotExpression "!A" = boolean
Line 26 col 24 IdentifierName "A" = typeof A
Line 27 col 4 IdentifierName "ResultIsBoolean4" = boolean
Line 27 col 23 LogicalNotExpression "!M" = boolean
Line 27 col 24 IdentifierName "M" = typeof M
Line 28 col 4 IdentifierName "ResultIsBoolean5" = boolean
Line 28 col 23 LogicalNotExpression "!obj" = boolean
Line 28 col 24 IdentifierName "obj" = () => {}
Line 29 col 4 IdentifierName "ResultIsBoolean6" = boolean
Line 29 col 23 LogicalNotExpression "!obj1" = boolean
Line 29 col 24 IdentifierName "obj1" = { x: string; y: () => void; }
Line 32 col 4 IdentifierName "ResultIsBoolean7" = boolean
Line 32 col 23 LogicalNotExpression "!undefined" = boolean
Line 32 col 24 IdentifierName "undefined" = any
Line 33 col 4 IdentifierName "ResultIsBoolean8" = boolean
Line 33 col 23 LogicalNotExpression "!null" = boolean
Line 36 col 4 IdentifierName "ResultIsBoolean9" = boolean
Line 36 col 23 LogicalNotExpression "!ANY2[0]" = boolean
Line 36 col 24 ElementAccessExpression "ANY2[0]" = any
Line 36 col 24 IdentifierName "ANY2" = any[]
Line 37 col 4 IdentifierName "ResultIsBoolean10" = boolean
Line 37 col 24 LogicalNotExpression "!obj1.x" = boolean
Line 37 col 25 MemberAccessExpression "obj1.x" = string
Line 37 col 25 IdentifierName "obj1" = { x: string; y: () => void; }
Line 37 col 30 IdentifierName "x" = string
Line 38 col 4 IdentifierName "ResultIsBoolean11" = boolean
Line 38 col 24 LogicalNotExpression "!obj1.y" = boolean
Line 38 col 25 MemberAccessExpression "obj1.y" = () => void
Line 38 col 25 IdentifierName "obj1" = { x: string; y: () => void; }
Line 38 col 30 IdentifierName "y" = () => void
Line 39 col 4 IdentifierName "ResultIsBoolean12" = boolean
Line 39 col 24 LogicalNotExpression "!objA.a" = boolean
Line 39 col 25 MemberAccessExpression "objA.a" = any
Line 39 col 25 IdentifierName "objA" = A
Line 39 col 30 IdentifierName "a" = any
Line 40 col 4 IdentifierName "ResultIsBoolean13" = boolean
Line 40 col 24 LogicalNotExpression "!M.n" = boolean
Line 40 col 25 MemberAccessExpression "M.n" = any
Line 40 col 25 IdentifierName "M" = typeof M
Line 40 col 27 IdentifierName "n" = any
Line 41 col 4 IdentifierName "ResultIsBoolean14" = boolean
Line 41 col 24 LogicalNotExpression "!foo()" = boolean
Line 41 col 25 InvocationExpression "foo()" = any
Line 41 col 25 IdentifierName "foo" = typeof foo
Line 42 col 4 IdentifierName "ResultIsBoolean15" = boolean
Line 42 col 24 LogicalNotExpression "!A.foo()" = boolean
Line 42 col 25 InvocationExpression "A.foo()" = any
Line 42 col 25 MemberAccessExpression "A.foo" = () => any
Line 42 col 25 IdentifierName "A" = typeof A
Line 42 col 27 IdentifierName "foo" = () => any
Line 43 col 4 IdentifierName "ResultIsBoolean16" = boolean
Line 43 col 24 LogicalNotExpression "!(ANY + ANY1)" = boolean
Line 43 col 25 ParenthesizedExpression "(ANY + ANY1)" = any
Line 43 col 26 AddExpression "ANY + ANY1" = any
Line 43 col 26 IdentifierName "ANY" = any
Line 43 col 32 IdentifierName "ANY1" = any
Line 44 col 4 IdentifierName "ResultIsBoolean17" = boolean
Line 44 col 24 LogicalNotExpression "!(null + undefined)" = boolean
Line 44 col 25 ParenthesizedExpression "(null + undefined)" = any
Line 44 col 26 AddExpression "null + undefined" = any
Line 44 col 33 IdentifierName "undefined" = any
Line 45 col 4 IdentifierName "ResultIsBoolean18" = boolean
Line 45 col 24 LogicalNotExpression "!(null + null)" = boolean
Line 45 col 25 ParenthesizedExpression "(null + null)" = any
Line 45 col 26 AddExpression "null + null" = any
Line 46 col 4 IdentifierName "ResultIsBoolean19" = boolean
Line 46 col 24 LogicalNotExpression "!(undefined + undefined)" = boolean
Line 46 col 25 ParenthesizedExpression "(undefined + undefined)" = any
Line 46 col 26 AddExpression "undefined + undefined" = any
Line 46 col 26 IdentifierName "undefined" = any
Line 46 col 38 IdentifierName "undefined" = any
Line 49 col 4 IdentifierName "ResultIsBoolean20" = boolean
Line 49 col 24 LogicalNotExpression "!!ANY" = boolean
Line 49 col 25 LogicalNotExpression "!ANY" = boolean
Line 49 col 26 IdentifierName "ANY" = any
Line 50 col 4 IdentifierName "ResultIsBoolean21" = boolean
Line 50 col 24 LogicalNotExpression "!!!(ANY + ANY1)" = boolean
Line 50 col 25 LogicalNotExpression "!!(ANY + ANY1)" = boolean
Line 50 col 26 LogicalNotExpression "!(ANY + ANY1)" = boolean
Line 50 col 27 ParenthesizedExpression "(ANY + ANY1)" = any
Line 50 col 28 AddExpression "ANY + ANY1" = any
Line 50 col 28 IdentifierName "ANY" = any
Line 50 col 34 IdentifierName "ANY1" = any
Line 51 col 0 LogicalNotExpression "// miss assignment operators
!ANY" = boolean
Line 53 col 1 IdentifierName "ANY" = any
Line 54 col 0 LogicalNotExpression "!ANY1" = boolean
Line 54 col 1 IdentifierName "ANY1" = any
Line 55 col 0 LogicalNotExpression "!ANY2[0]" = boolean
Line 55 col 1 ElementAccessExpression "ANY2[0]" = any
Line 55 col 1 IdentifierName "ANY2" = any[]
Line 56 col 0 CommaExpression "!ANY, ANY1" = any
Line 56 col 0 LogicalNotExpression "!ANY" = boolean
Line 56 col 1 IdentifierName "ANY" = any
Line 56 col 6 IdentifierName "ANY1" = any
Line 57 col 0 LogicalNotExpression "!objA.a" = boolean
Line 57 col 1 MemberAccessExpression "objA.a" = any
Line 57 col 1 IdentifierName "objA" = A
Line 57 col 6 IdentifierName "a" = any
Line 58 col 0 LogicalNotExpression "!M.n" = boolean
Line 58 col 1 MemberAccessExpression "M.n" = any
Line 58 col 1 IdentifierName "M" = typeof M
Line 58 col 3 IdentifierName "n" = any