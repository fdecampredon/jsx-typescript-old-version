=== tests/cases/compiler/inferentialTypingWithFunctionTypeSyntacticScenarios.ts ===
declare function map<T, U>(array: T, func: (x: T) => U): U;
>map : typeof map
>T : T
>U : U
>array : T
>T : T
>func : (x: T) => U
>x : T
>T : T
>U : U
>U : U

declare function identity<V>(y: V): V;
>identity : typeof identity
>V : V
>y : V
>V : V
>V : V

var s: string;
>s : string

// dotted name
var dottedIdentity = { x: identity };
>dottedIdentity : { x: typeof identity; }
>{ x: identity } : { x: typeof identity; }
>x : typeof identity
>identity : typeof identity

s = map("", dottedIdentity.x);
>s = map("", dottedIdentity.x) : string
>s : string
>map("", dottedIdentity.x) : string
>map : typeof map
>dottedIdentity.x : typeof identity
>dottedIdentity : { x: typeof identity; }
>x : typeof identity

>// index expression
s = map("", dottedIdentity['x']) : string
>// index expression
s : string

// index expression
s = map("", dottedIdentity['x']);
>map("", dottedIdentity['x']) : string
>map : typeof map
>dottedIdentity['x'] : typeof identity
>dottedIdentity : { x: typeof identity; }

>// function call
s = map("", (() => identity)()) : string
>// function call
s : string

// function call
s = map("", (() => identity)());
>map("", (() => identity)()) : string
>map : typeof map
>(() => identity)() : typeof identity
>(() => identity) : () => typeof identity
>() => identity : () => typeof identity
>identity : typeof identity

// construct
interface IdentityConstructor {
>IdentityConstructor : IdentityConstructor

    new (): typeof identity;
>identity : typeof identity
}
var ic: IdentityConstructor;
>ic : IdentityConstructor
>IdentityConstructor : IdentityConstructor

s = map("", new ic());
>s = map("", new ic()) : string
>s : string
>map("", new ic()) : string
>map : typeof map
>new ic() : typeof identity
>ic : IdentityConstructor

// assignment
var t;
>t : any

s = map("", t = identity);
>s = map("", t = identity) : string
>s : string
>map("", t = identity) : string
>map : typeof map
>t = identity : typeof identity
>t : any
>identity : typeof identity

>// type assertion
s = map("", <typeof identity>identity) : string
>// type assertion
s : string

// type assertion
s = map("", <typeof identity>identity);
>map("", <typeof identity>identity) : string
>map : typeof map
><typeof identity>identity : typeof identity
>identity : typeof identity
>identity : typeof identity

>// parenthesized expression
s = map("", (identity)) : string
>// parenthesized expression
s : string

// parenthesized expression
s = map("", (identity));
>map("", (identity)) : string
>map : typeof map
>(identity) : typeof identity
>identity : typeof identity

>// comma
s = map("", ("", identity)) : string
>// comma
s : string

// comma
s = map("", ("", identity));
>map("", ("", identity)) : string
>map : typeof map
>("", identity) : typeof identity
>"", identity : typeof identity
>identity : typeof identity

