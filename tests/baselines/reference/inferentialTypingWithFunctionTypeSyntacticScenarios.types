=== tests/cases/compiler/inferentialTypingWithFunctionTypeSyntacticScenarios.ts ===
Line 0 col 17 IdentifierName "map" = typeof map
Line 0 col 21 IdentifierName "T" = T
Line 0 col 24 IdentifierName "U" = U
Line 0 col 27 IdentifierName "array" = T
Line 0 col 34 IdentifierName "T" = T
Line 0 col 37 IdentifierName "func" = (x: T) => U
Line 0 col 44 IdentifierName "x" = T
Line 0 col 47 IdentifierName "T" = T
Line 0 col 53 IdentifierName "U" = U
Line 0 col 57 IdentifierName "U" = U
Line 1 col 17 IdentifierName "identity" = typeof identity
Line 1 col 26 IdentifierName "V" = V
Line 1 col 29 IdentifierName "y" = V
Line 1 col 32 IdentifierName "V" = V
Line 1 col 36 IdentifierName "V" = V
Line 2 col 4 IdentifierName "s" = string
Line 5 col 4 IdentifierName "dottedIdentity" = { x: typeof identity; }
Line 5 col 21 ObjectLiteralExpression "{ x: identity }" = { x: typeof identity; }
Line 5 col 23 IdentifierName "x" = typeof identity
Line 5 col 26 IdentifierName "identity" = typeof identity
Line 6 col 0 AssignmentExpression "s = map("", dottedIdentity.x)" = string
Line 6 col 0 IdentifierName "s" = string
Line 6 col 4 InvocationExpression "map("", dottedIdentity.x)" = string
Line 6 col 4 IdentifierName "map" = typeof map
Line 6 col 12 MemberAccessExpression "dottedIdentity.x" = typeof identity
Line 6 col 12 IdentifierName "dottedIdentity" = { x: typeof identity; }
Line 6 col 27 IdentifierName "x" = typeof identity
Line 7 col 0 AssignmentExpression "// index expression
s = map("", dottedIdentity['x'])" = string
Line 7 col 0 IdentifierName "// index expression
s" = string
Line 9 col 4 InvocationExpression "map("", dottedIdentity['x'])" = string
Line 9 col 4 IdentifierName "map" = typeof map
Line 9 col 12 ElementAccessExpression "dottedIdentity['x']" = typeof identity
Line 9 col 12 IdentifierName "dottedIdentity" = { x: typeof identity; }
Line 10 col 0 AssignmentExpression "// function call
s = map("", (() => identity)())" = string
Line 10 col 0 IdentifierName "// function call
s" = string
Line 12 col 4 InvocationExpression "map("", (() => identity)())" = string
Line 12 col 4 IdentifierName "map" = typeof map
Line 12 col 12 InvocationExpression "(() => identity)()" = typeof identity
Line 12 col 12 ParenthesizedExpression "(() => identity)" = () => typeof identity
Line 12 col 13 ParenthesizedArrowFunctionExpression "() => identity" = () => typeof identity
Line 12 col 19 IdentifierName "identity" = typeof identity
Line 15 col 10 IdentifierName "IdentityConstructor" = IdentityConstructor
Line 16 col 19 IdentifierName "identity" = typeof identity
Line 18 col 4 IdentifierName "ic" = IdentityConstructor
Line 18 col 8 IdentifierName "IdentityConstructor" = IdentityConstructor
Line 19 col 0 AssignmentExpression "s = map("", new ic())" = string
Line 19 col 0 IdentifierName "s" = string
Line 19 col 4 InvocationExpression "map("", new ic())" = string
Line 19 col 4 IdentifierName "map" = typeof map
Line 19 col 12 ObjectCreationExpression "new ic()" = typeof identity
Line 19 col 16 IdentifierName "ic" = IdentityConstructor
Line 22 col 4 IdentifierName "t" = any
Line 23 col 0 AssignmentExpression "s = map("", t = identity)" = string
Line 23 col 0 IdentifierName "s" = string
Line 23 col 4 InvocationExpression "map("", t = identity)" = string
Line 23 col 4 IdentifierName "map" = typeof map
Line 23 col 12 AssignmentExpression "t = identity" = typeof identity
Line 23 col 12 IdentifierName "t" = any
Line 23 col 16 IdentifierName "identity" = typeof identity
Line 24 col 0 AssignmentExpression "// type assertion
s = map("", <typeof identity>identity)" = string
Line 24 col 0 IdentifierName "// type assertion
s" = string
Line 26 col 4 InvocationExpression "map("", <typeof identity>identity)" = string
Line 26 col 4 IdentifierName "map" = typeof map
Line 26 col 12 CastExpression "<typeof identity>identity" = typeof identity
Line 26 col 20 IdentifierName "identity" = typeof identity
Line 26 col 29 IdentifierName "identity" = typeof identity
Line 27 col 0 AssignmentExpression "// parenthesized expression
s = map("", (identity))" = string
Line 27 col 0 IdentifierName "// parenthesized expression
s" = string
Line 29 col 4 InvocationExpression "map("", (identity))" = string
Line 29 col 4 IdentifierName "map" = typeof map
Line 29 col 12 ParenthesizedExpression "(identity)" = typeof identity
Line 29 col 13 IdentifierName "identity" = typeof identity
Line 30 col 0 AssignmentExpression "// comma
s = map("", ("", identity))" = string
Line 30 col 0 IdentifierName "// comma
s" = string
Line 32 col 4 InvocationExpression "map("", ("", identity))" = string
Line 32 col 4 IdentifierName "map" = typeof map
Line 32 col 12 ParenthesizedExpression "("", identity)" = typeof identity
Line 32 col 13 CommaExpression """, identity" = typeof identity
Line 32 col 17 IdentifierName "identity" = typeof identity