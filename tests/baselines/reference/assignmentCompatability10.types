=== tests/cases/compiler/assignmentCompatability10.ts ===
Line 0 col 7 IdentifierName "__test1__" = __test1__
Line 1 col 21 IdentifierName "interfaceWithPublicAndOptional" = __test1__.interfaceWithPublicAndOptional<T, U>
Line 1 col 52 IdentifierName "T" = T
Line 1 col 54 IdentifierName "U" = U
Line 1 col 59 IdentifierName "one" = T
Line 1 col 64 IdentifierName "T" = T
Line 1 col 67 IdentifierName "two" = U
Line 1 col 73 IdentifierName "U" = U
Line 1 col 84 IdentifierName "obj4" = __test1__.interfaceWithPublicAndOptional<number, string>
Line 1 col 90 IdentifierName "interfaceWithPublicAndOptional" = __test1__.interfaceWithPublicAndOptional<T, U>
Line 1 col 138 ObjectLiteralExpression "{ one: 1 }" = { one: number; }
Line 1 col 140 IdentifierName "one" = number
Line 2 col 15 IdentifierName "__val__obj4" = __test1__.interfaceWithPublicAndOptional<number, string>
Line 2 col 29 IdentifierName "obj4" = __test1__.interfaceWithPublicAndOptional<number, string>
Line 4 col 7 IdentifierName "__test2__" = __test2__
Line 5 col 17 IdentifierName "classWithPublicAndOptional" = __test2__.classWithPublicAndOptional<T, U>
Line 5 col 44 IdentifierName "T" = T
Line 5 col 46 IdentifierName "U" = U
Line 5 col 70 IdentifierName "one" = T
Line 5 col 75 IdentifierName "T" = T
Line 5 col 85 IdentifierName "two" = U
Line 5 col 91 IdentifierName "U" = U
Line 5 col 105 IdentifierName "x4" = __test2__.classWithPublicAndOptional<number, string>
Line 5 col 110 ObjectCreationExpression "new classWithPublicAndOptional<number, string>(1)" = __test2__.classWithPublicAndOptional<number, string>
Line 5 col 114 IdentifierName "classWithPublicAndOptional" = { prototype: __test2__.classWithPublicAndOptional<any, any>; new<T, U>(one: T, two?: U): __test2__.classWithPublicAndOptional<T, U>; }
Line 6 col 15 IdentifierName "__val__x4" = __test2__.classWithPublicAndOptional<number, string>
Line 6 col 27 IdentifierName "x4" = __test2__.classWithPublicAndOptional<number, string>
Line 8 col 0 AssignmentExpression "__test2__.__val__x4 = __test1__.__val__obj4" = __test1__.interfaceWithPublicAndOptional<number, string>
Line 8 col 0 MemberAccessExpression "__test2__.__val__x4" = __test2__.classWithPublicAndOptional<number, string>
Line 8 col 0 IdentifierName "__test2__" = { classWithPublicAndOptional: { prototype: __test2__.classWithPublicAndOptional<any, any>; new<T, U>(one: T, two?: U): __test2__.classWithPublicAndOptional<T, U>; }; __val__x4: __test2__.classWithPublicAndOptional<number, string>; }
Line 8 col 10 IdentifierName "__val__x4" = __test2__.classWithPublicAndOptional<number, string>
Line 8 col 22 MemberAccessExpression "__test1__.__val__obj4" = __test1__.interfaceWithPublicAndOptional<number, string>
Line 8 col 22 IdentifierName "__test1__" = { __val__obj4: __test1__.interfaceWithPublicAndOptional<number, string>; }
Line 8 col 32 IdentifierName "__val__obj4" = __test1__.interfaceWithPublicAndOptional<number, string>