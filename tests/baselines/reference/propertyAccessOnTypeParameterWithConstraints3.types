=== tests/cases/compiler/propertyAccessOnTypeParameterWithConstraints3.ts ===
Line 0 col 6 IdentifierName "A" = A
Line 1 col 0 IdentifierName "foo" = () => string
Line 4 col 6 IdentifierName "B" = B
Line 4 col 16 IdentifierName "A" = A
Line 5 col 0 IdentifierName "bar" = () => string
Line 10 col 6 IdentifierName "C" = C<U, T>
Line 10 col 8 IdentifierName "U" = U
Line 10 col 18 IdentifierName "A" = A
Line 10 col 21 IdentifierName "T" = T
Line 10 col 31 IdentifierName "U" = U
Line 11 col 0 IdentifierName "f" = () => string
Line 12 col 12 IdentifierName "x" = T
Line 12 col 15 IdentifierName "T" = T
Line 13 col 12 IdentifierName "a" = any
Line 13 col 16 InvocationExpression "x['foo']()" = any
Line 13 col 16 ElementAccessExpression "x['foo']" = any
Line 13 col 16 IdentifierName "x" = T
Line 14 col 15 AddExpression "a + x.foo()" = string
Line 14 col 15 IdentifierName "a" = any
Line 14 col 19 InvocationExpression "x.foo()" = string
Line 14 col 19 MemberAccessExpression "x.foo" = () => string
Line 14 col 19 IdentifierName "x" = T
Line 14 col 21 IdentifierName "foo" = () => string
Line 16 col 0 IdentifierName "g" = (x: U) => string
Line 17 col 6 IdentifierName "x" = U
Line 17 col 9 IdentifierName "U" = U
Line 18 col 12 IdentifierName "a" = any
Line 18 col 16 InvocationExpression "x['foo']()" = any
Line 18 col 16 ElementAccessExpression "x['foo']" = any
Line 18 col 16 IdentifierName "x" = U
Line 19 col 15 AddExpression "a + x.foo()" = string
Line 19 col 15 IdentifierName "a" = any
Line 19 col 19 InvocationExpression "x.foo()" = string
Line 19 col 19 MemberAccessExpression "x.foo" = () => string
Line 19 col 19 IdentifierName "x" = U
Line 19 col 21 IdentifierName "foo" = () => string
Line 23 col 4 IdentifierName "r1a" = string
Line 23 col 10 InvocationExpression "(new C<A, B>()).f()" = string
Line 23 col 10 MemberAccessExpression "(new C<A, B>()).f" = () => string
Line 23 col 10 ParenthesizedExpression "(new C<A, B>())" = C<A, B>
Line 23 col 11 ObjectCreationExpression "new C<A, B>()" = C<A, B>
Line 23 col 15 IdentifierName "C" = new<U extends A, T extends U>() => C<U, T>
Line 23 col 17 IdentifierName "A" = A
Line 23 col 20 IdentifierName "B" = B
Line 23 col 26 IdentifierName "f" = () => string
Line 24 col 4 IdentifierName "r1b" = string
Line 24 col 10 InvocationExpression "(new C<A, B>()).g(new B())" = string
Line 24 col 10 MemberAccessExpression "(new C<A, B>()).g" = (x: A) => string
Line 24 col 10 ParenthesizedExpression "(new C<A, B>())" = C<A, B>
Line 24 col 11 ObjectCreationExpression "new C<A, B>()" = C<A, B>
Line 24 col 15 IdentifierName "C" = new<U extends A, T extends U>() => C<U, T>
Line 24 col 17 IdentifierName "A" = A
Line 24 col 20 IdentifierName "B" = B
Line 24 col 26 IdentifierName "g" = (x: A) => string
Line 24 col 28 ObjectCreationExpression "new B()" = B
Line 24 col 32 IdentifierName "B" = new() => B
Line 26 col 10 IdentifierName "I" = I<U, T>
Line 26 col 12 IdentifierName "U" = U
Line 26 col 22 IdentifierName "A" = A
Line 26 col 25 IdentifierName "T" = T
Line 26 col 35 IdentifierName "U" = U
Line 27 col 0 IdentifierName "foo" = T
Line 27 col 9 IdentifierName "T" = T
Line 29 col 4 IdentifierName "i" = I<A, B>
Line 29 col 7 IdentifierName "I" = I<U, T>
Line 29 col 9 IdentifierName "A" = A
Line 29 col 12 IdentifierName "B" = B
Line 30 col 4 IdentifierName "r2" = string
Line 30 col 9 InvocationExpression "i.foo.foo()" = string
Line 30 col 9 MemberAccessExpression "i.foo.foo" = () => string
Line 30 col 9 MemberAccessExpression "i.foo" = B
Line 30 col 9 IdentifierName "i" = I<A, B>
Line 30 col 11 IdentifierName "foo" = B
Line 30 col 15 IdentifierName "foo" = () => string
Line 31 col 4 IdentifierName "r2b" = string
Line 31 col 10 InvocationExpression "i.foo['foo']()" = string
Line 31 col 10 ElementAccessExpression "i.foo['foo']" = () => string
Line 31 col 10 MemberAccessExpression "i.foo" = B
Line 31 col 10 IdentifierName "i" = I<A, B>
Line 31 col 12 IdentifierName "foo" = B
Line 33 col 4 IdentifierName "a" = { <U extends A, T extends U>(): T; <U extends T, T extends A>(x: U): U; }
Line 34 col 5 IdentifierName "U" = U
Line 34 col 15 IdentifierName "A" = A
Line 34 col 18 IdentifierName "T" = T
Line 34 col 28 IdentifierName "U" = U
Line 34 col 34 IdentifierName "T" = T
Line 35 col 5 IdentifierName "U" = U
Line 35 col 15 IdentifierName "T" = T
Line 35 col 18 IdentifierName "T" = T
Line 35 col 28 IdentifierName "A" = A
Line 35 col 31 IdentifierName "x" = U
Line 35 col 34 IdentifierName "U" = U
Line 35 col 38 IdentifierName "U" = U
Line 37 col 4 IdentifierName "r3" = string
Line 37 col 17 InvocationExpression "a().foo()" = any
Line 37 col 17 MemberAccessExpression "a().foo" = any
Line 37 col 17 InvocationExpression "a()" = any
Line 37 col 17 IdentifierName "a" = { <U extends A, T extends U>(): T; <U extends T, T extends A>(x: U): U; }
Line 37 col 21 IdentifierName "foo" = any
Line 38 col 4 IdentifierName "r3b" = string
Line 38 col 18 InvocationExpression "a()['foo']()" = any
Line 38 col 18 ElementAccessExpression "a()['foo']" = any
Line 38 col 18 InvocationExpression "a()" = any
Line 38 col 18 IdentifierName "a" = { <U extends A, T extends U>(): T; <U extends T, T extends A>(x: U): U; }
Line 40 col 4 IdentifierName "r3c" = string
Line 40 col 18 InvocationExpression "a(new B()).foo()" = string
Line 40 col 18 MemberAccessExpression "a(new B()).foo" = () => string
Line 40 col 18 InvocationExpression "a(new B())" = B
Line 40 col 18 IdentifierName "a" = { <U extends A, T extends U>(): T; <U extends T, T extends A>(x: U): U; }
Line 40 col 20 ObjectCreationExpression "new B()" = B
Line 40 col 24 IdentifierName "B" = new() => B
Line 40 col 29 IdentifierName "foo" = () => string
Line 41 col 4 IdentifierName "r3d" = string
Line 41 col 18 InvocationExpression "a(new B())['foo']()" = string
Line 41 col 18 ElementAccessExpression "a(new B())['foo']" = () => string
Line 41 col 18 InvocationExpression "a(new B())" = B
Line 41 col 18 IdentifierName "a" = { <U extends A, T extends U>(): T; <U extends T, T extends A>(x: U): U; }
Line 41 col 20 ObjectCreationExpression "new B()" = B
Line 41 col 24 IdentifierName "B" = new() => B
Line 43 col 4 IdentifierName "b" = { foo: <U extends A, T extends U>(x: T) => string; }
Line 43 col 8 ObjectLiteralExpression "{
    foo: <U extends A, T extends U>(x: T) => {
        var a = x['foo'](); // should be string
        return a + x.foo();
    }
}" = { foo: <U extends A, T extends U>(x: T) => string; }
Line 44 col 0 IdentifierName "foo" = <U extends A, T extends U>(x: T) => string
Line 44 col 9 ParenthesizedArrowFunctionExpression "<U extends A, T extends U>(x: T) => {
        var a = x['foo'](); // should be string
        return a + x.foo();
    }" = <U extends A, T extends U>(x: T) => string
Line 44 col 10 IdentifierName "U" = U
Line 44 col 20 IdentifierName "A" = A
Line 44 col 23 IdentifierName "T" = T
Line 44 col 33 IdentifierName "U" = U
Line 44 col 36 IdentifierName "x" = T
Line 44 col 39 IdentifierName "T" = T
Line 45 col 12 IdentifierName "a" = any
Line 45 col 16 InvocationExpression "x['foo']()" = any
Line 45 col 16 ElementAccessExpression "x['foo']" = any
Line 45 col 16 IdentifierName "x" = T
Line 46 col 15 AddExpression "a + x.foo()" = string
Line 46 col 15 IdentifierName "a" = any
Line 46 col 19 InvocationExpression "x.foo()" = string
Line 46 col 19 MemberAccessExpression "x.foo" = () => string
Line 46 col 19 IdentifierName "x" = T
Line 46 col 21 IdentifierName "foo" = () => string
Line 50 col 4 IdentifierName "r4" = string
Line 50 col 9 InvocationExpression "b.foo(new B())" = string
Line 50 col 9 MemberAccessExpression "b.foo" = <U extends A, T extends U>(x: T) => string
Line 50 col 9 IdentifierName "b" = { foo: <U extends A, T extends U>(x: T) => string; }
Line 50 col 11 IdentifierName "foo" = <U extends A, T extends U>(x: T) => string
Line 50 col 15 ObjectCreationExpression "new B()" = B
Line 50 col 19 IdentifierName "B" = new() => B