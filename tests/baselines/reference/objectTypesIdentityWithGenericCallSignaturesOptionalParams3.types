=== tests/cases/compiler/objectTypesIdentityWithGenericCallSignaturesOptionalParams3.ts ===
// Two call or construct signatures are considered identical when they have the same number of type parameters and, considering those 
// parameters pairwise identical, have identical type parameter constraints, identical number of parameters with identical kind(required, 
// optional or rest) and types, and identical return types.

class A {
>A : A

    foo<T, U>(x: T, y?: U): T { return null; }
>foo : <T, U>(x: T, y?: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T
}

class B<T, U> {
>B : B<T, U>
>T : T
>U : U

    foo(x: T, y: U): T { return null; }
>foo : (x: T, y: U) => T
>x : T
>T : T
>y : U
>U : U
>T : T
}

class C<T, U> {
>C : C<T, U>
>T : T
>U : U

    foo(x: T, y?: U): T { return null; }
>foo : (x: T, y?: U) => T
>x : T
>T : T
>y : U
>U : U
>T : T
}

interface I<T, U> {
>I : I<T, U>
>T : T
>U : U

    foo(x: T, y?: U): T;
>foo : (x: T, y?: U) => T
>x : T
>T : T
>y : U
>U : U
>T : T
}

interface I2 {
>I2 : I2

    foo<T, U>(x: T, y: U): T;
>foo : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T
}

var a: { foo<T, U>(x: T, y?: U): T }
>a : { foo<T, U>(x: T, y?: U): T; }
>foo : <T, U>(x: T, y?: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>T : T

var b = { foo<T, U>(x: T, y: U) { return x; } };
>b : { foo<T, U>(x: T, y: U): T; }
>{ foo<T, U>(x: T, y: U) { return x; } } : { foo<T, U>(x: T, y: U): T; }
>foo : <T, U>(x: T, y: U) => T
>T : T
>U : U
>x : T
>T : T
>y : U
>U : U
>x : T

function foo1(x: A);
>foo1 : typeof foo1
>x : A
>A : A

function foo1(x: A); // error
>foo1 : typeof foo1
>x : A
>A : A

function foo1(x: any) { }
>foo1 : typeof foo1
>x : any

function foo1b(x: B<string, number>);
>foo1b : typeof foo1b
>x : B<string, number>
>B : B<T, U>

function foo1b(x: B<string, number>); // error
>foo1b : typeof foo1b
>x : B<string, number>
>B : B<T, U>

function foo1b(x: any) { }
>foo1b : typeof foo1b
>x : any

function foo1c(x: C<string, number>);
>foo1c : typeof foo1c
>x : C<string, number>
>C : C<T, U>

function foo1c(x: C<string, number>); // error
>foo1c : typeof foo1c
>x : C<string, number>
>C : C<T, U>

function foo1c(x: any) { }
>foo1c : typeof foo1c
>x : any

function foo2(x: I<string, number>);
>foo2 : typeof foo2
>x : I<string, number>
>I : I<T, U>

function foo2(x: I<string, number>); // error
>foo2 : typeof foo2
>x : I<string, number>
>I : I<T, U>

function foo2(x: any) { }
>foo2 : typeof foo2
>x : any

function foo3(x: typeof a);
>foo3 : typeof foo3
>x : { foo<T, U>(x: T, y?: U): T; }
>a : { foo<T, U>(x: T, y?: U): T; }

function foo3(x: typeof a); // error
>foo3 : typeof foo3
>x : { foo<T, U>(x: T, y?: U): T; }
>a : { foo<T, U>(x: T, y?: U): T; }

function foo3(x: any) { }
>foo3 : typeof foo3
>x : any

function foo4(x: typeof b);
>foo4 : typeof foo4
>x : { foo<T, U>(x: T, y: U): T; }
>b : { foo<T, U>(x: T, y: U): T; }

function foo4(x: typeof b); // error
>foo4 : typeof foo4
>x : { foo<T, U>(x: T, y: U): T; }
>b : { foo<T, U>(x: T, y: U): T; }

function foo4(x: any) { }
>foo4 : typeof foo4
>x : any

function foo5(x: A);
>foo5 : typeof foo5
>x : A
>A : A

function foo5(x: B<string, number>); // ok
>foo5 : typeof foo5
>x : B<string, number>
>B : B<T, U>

function foo5(x: any) { }
>foo5 : typeof foo5
>x : any

function foo5b(x: A);
>foo5b : typeof foo5b
>x : A
>A : A

function foo5b(x: C<string, number>); // ok
>foo5b : typeof foo5b
>x : C<string, number>
>C : C<T, U>

function foo5b(x: any) { }
>foo5b : typeof foo5b
>x : any

function foo6(x: A);
>foo6 : typeof foo6
>x : A
>A : A

function foo6(x: I<string, number>); // ok
>foo6 : typeof foo6
>x : I<string, number>
>I : I<T, U>

function foo6(x: any) { }
>foo6 : typeof foo6
>x : any

function foo7(x: A);
>foo7 : typeof foo7
>x : A
>A : A

function foo7(x: typeof a); // no error, bug?
>foo7 : typeof foo7
>x : { foo<T, U>(x: T, y?: U): T; }
>a : { foo<T, U>(x: T, y?: U): T; }

function foo7(x: any) { }
>foo7 : typeof foo7
>x : any

function foo8(x: B<string, number>);
>foo8 : typeof foo8
>x : B<string, number>
>B : B<T, U>

function foo8(x: I<string, number>); // ok
>foo8 : typeof foo8
>x : I<string, number>
>I : I<T, U>

function foo8(x: any) { }
>foo8 : typeof foo8
>x : any

function foo9(x: B<string, number>);
>foo9 : typeof foo9
>x : B<string, number>
>B : B<T, U>

function foo9(x: C<string, number>); // ok
>foo9 : typeof foo9
>x : C<string, number>
>C : C<T, U>

function foo9(x: any) { }
>foo9 : typeof foo9
>x : any

function foo10(x: B<string, number>);
>foo10 : typeof foo10
>x : B<string, number>
>B : B<T, U>

function foo10(x: typeof a); // ok
>foo10 : typeof foo10
>x : { foo<T, U>(x: T, y?: U): T; }
>a : { foo<T, U>(x: T, y?: U): T; }

function foo10(x: any) { }
>foo10 : typeof foo10
>x : any

function foo11(x: B<string, number>);
>foo11 : typeof foo11
>x : B<string, number>
>B : B<T, U>

function foo11(x: typeof b); // ok
>foo11 : typeof foo11
>x : { foo<T, U>(x: T, y: U): T; }
>b : { foo<T, U>(x: T, y: U): T; }

function foo11(x: any) { }
>foo11 : typeof foo11
>x : any

function foo12(x: I<string, number>);
>foo12 : typeof foo12
>x : I<string, number>
>I : I<T, U>

function foo12(x: C<string, number>); // error
>foo12 : typeof foo12
>x : C<string, number>
>C : C<T, U>

function foo12(x: any) { }
>foo12 : typeof foo12
>x : any

function foo12b(x: I2);
>foo12b : typeof foo12b
>x : I2
>I2 : I2

function foo12b(x: C<string, number>); // ok
>foo12b : typeof foo12b
>x : C<string, number>
>C : C<T, U>

function foo12b(x: any) { }
>foo12b : typeof foo12b
>x : any

function foo13(x: I<string, number>);
>foo13 : typeof foo13
>x : I<string, number>
>I : I<T, U>

function foo13(x: typeof a); // ok
>foo13 : typeof foo13
>x : { foo<T, U>(x: T, y?: U): T; }
>a : { foo<T, U>(x: T, y?: U): T; }

function foo13(x: any) { }
>foo13 : typeof foo13
>x : any

function foo14(x: I<string, number>);
>foo14 : typeof foo14
>x : I<string, number>
>I : I<T, U>

function foo14(x: typeof b); // ok
>foo14 : typeof foo14
>x : { foo<T, U>(x: T, y: U): T; }
>b : { foo<T, U>(x: T, y: U): T; }

function foo14(x: any) { }
>foo14 : typeof foo14
>x : any

function foo15(x: I2);
>foo15 : typeof foo15
>x : I2
>I2 : I2

function foo15(x: C<string, number>); // ok
>foo15 : typeof foo15
>x : C<string, number>
>C : C<T, U>

function foo15(x: any) { }
>foo15 : typeof foo15
>x : any

