// <auto-generated />
/// <reference path="..\core\diagnosticCategory.ts" />
module TypeScript {
    export var diagnosticInformationMap = {
  "error TS{0}: {1}": {
    "code": 0,
    "category": DiagnosticCategory.NoPrefix
  },
  "warning TS{0}: {1}": {
    "code": 1,
    "category": DiagnosticCategory.NoPrefix
  },
  "Unrecognized escape sequence.": {
    "code": 1000,
    "category": DiagnosticCategory.Error
  },
  "Unexpected character {0}.": {
    "code": 1001,
    "category": DiagnosticCategory.Error
  },
  "Missing close quote character.": {
    "code": 1002,
    "category": DiagnosticCategory.Error
  },
  "Identifier expected.": {
    "code": 1003,
    "category": DiagnosticCategory.Error
  },
  "'{0}' keyword expected.": {
    "code": 1004,
    "category": DiagnosticCategory.Error
  },
  "'{0}' expected.": {
    "code": 1005,
    "category": DiagnosticCategory.Error
  },
  "Identifier expected; '{0}' is a keyword.": {
    "code": 1006,
    "category": DiagnosticCategory.Error
  },
  "Automatic semicolon insertion not allowed.": {
    "code": 1007,
    "category": DiagnosticCategory.Error
  },
  "Unexpected token; '{0}' expected.": {
    "code": 1008,
    "category": DiagnosticCategory.Error
  },
  "Trailing separator not allowed.": {
    "code": 1009,
    "category": DiagnosticCategory.Error
  },
  "'*/' expected.": {
    "code": 1010,
    "category": DiagnosticCategory.Error
  },
  "'public' or 'private' modifier must precede 'static'.": {
    "code": 1011,
    "category": DiagnosticCategory.Error
  },
  "Unexpected token.": {
    "code": 1012,
    "category": DiagnosticCategory.Error
  },
  "Catch clause parameter cannot have a type annotation.": {
    "code": 1013,
    "category": DiagnosticCategory.Error
  },
  "Rest parameter must be last in list.": {
    "code": 1014,
    "category": DiagnosticCategory.Error
  },
  "Parameter cannot have question mark and initializer.": {
    "code": 1015,
    "category": DiagnosticCategory.Error
  },
  "Required parameter cannot follow optional parameter.": {
    "code": 1016,
    "category": DiagnosticCategory.Error
  },
  "Index signatures cannot have rest parameters.": {
    "code": 1017,
    "category": DiagnosticCategory.Error
  },
  "Index signature parameter cannot have accessibility modifiers.": {
    "code": 1018,
    "category": DiagnosticCategory.Error
  },
  "Index signature parameter cannot have a question mark.": {
    "code": 1019,
    "category": DiagnosticCategory.Error
  },
  "Index signature parameter cannot have an initializer.": {
    "code": 1020,
    "category": DiagnosticCategory.Error
  },
  "Index signature must have a type annotation.": {
    "code": 1021,
    "category": DiagnosticCategory.Error
  },
  "Index signature parameter must have a type annotation.": {
    "code": 1022,
    "category": DiagnosticCategory.Error
  },
  "Index signature parameter type must be 'string' or 'number'.": {
    "code": 1023,
    "category": DiagnosticCategory.Error
  },
  "'extends' clause already seen.": {
    "code": 1024,
    "category": DiagnosticCategory.Error
  },
  "'extends' clause must precede 'implements' clause.": {
    "code": 1025,
    "category": DiagnosticCategory.Error
  },
  "Classes can only extend a single class.": {
    "code": 1026,
    "category": DiagnosticCategory.Error
  },
  "'implements' clause already seen.": {
    "code": 1027,
    "category": DiagnosticCategory.Error
  },
  "Accessibility modifier already seen.": {
    "code": 1028,
    "category": DiagnosticCategory.Error
  },
  "'{0}' modifier must precede '{1}' modifier.": {
    "code": 1029,
    "category": DiagnosticCategory.Error
  },
  "'{0}' modifier already seen.": {
    "code": 1030,
    "category": DiagnosticCategory.Error
  },
  "'{0}' modifier cannot appear on a class element.": {
    "code": 1031,
    "category": DiagnosticCategory.Error
  },
  "Interface declaration cannot have 'implements' clause.": {
    "code": 1032,
    "category": DiagnosticCategory.Error
  },
  "'super' invocation cannot have type arguments.": {
    "code": 1034,
    "category": DiagnosticCategory.Error
  },
  "Only ambient modules can use quoted names.": {
    "code": 1035,
    "category": DiagnosticCategory.Error
  },
  "Statements are not allowed in ambient contexts.": {
    "code": 1036,
    "category": DiagnosticCategory.Error
  },
  "Implementations are not allowed in ambient contexts.": {
    "code": 1037,
    "category": DiagnosticCategory.Error
  },
  "'declare' modifier not allowed for code already in an ambient context.": {
    "code": 1038,
    "category": DiagnosticCategory.Error
  },
  "Initializers are not allowed in ambient contexts.": {
    "code": 1039,
    "category": DiagnosticCategory.Error
  },
  "Parameter property declarations can only be used in constructors.": {
    "code": 1040,
    "category": DiagnosticCategory.Error
  },
  "Function implementation expected.": {
    "code": 1041,
    "category": DiagnosticCategory.Error
  },
  "Constructor implementation expected.": {
    "code": 1042,
    "category": DiagnosticCategory.Error
  },
  "Function overload name must be '{0}'.": {
    "code": 1043,
    "category": DiagnosticCategory.Error
  },
  "'{0}' modifier cannot appear on a module element.": {
    "code": 1044,
    "category": DiagnosticCategory.Error
  },
  "'declare' modifier cannot appear on an interface declaration.": {
    "code": 1045,
    "category": DiagnosticCategory.Error
  },
  "'declare' modifier required for top level element.": {
    "code": 1046,
    "category": DiagnosticCategory.Error
  },
  "Rest parameter cannot be optional.": {
    "code": 1047,
    "category": DiagnosticCategory.Error
  },
  "Rest parameter cannot have an initializer.": {
    "code": 1048,
    "category": DiagnosticCategory.Error
  },
  "'set' accessor must have one and only one parameter.": {
    "code": 1049,
    "category": DiagnosticCategory.Error
  },
  "'set' accessor parameter cannot be optional.": {
    "code": 1051,
    "category": DiagnosticCategory.Error
  },
  "'set' accessor parameter cannot have an initializer.": {
    "code": 1052,
    "category": DiagnosticCategory.Error
  },
  "'set' accessor cannot have rest parameter.": {
    "code": 1053,
    "category": DiagnosticCategory.Error
  },
  "'get' accessor cannot have parameters.": {
    "code": 1054,
    "category": DiagnosticCategory.Error
  },
  "Modifiers cannot appear here.": {
    "code": 1055,
    "category": DiagnosticCategory.Error
  },
  "Accessors are only available when targeting ECMAScript 5 and higher.": {
    "code": 1056,
    "category": DiagnosticCategory.Error
  },
  "Class name cannot be '{0}'.": {
    "code": 1057,
    "category": DiagnosticCategory.Error
  },
  "Interface name cannot be '{0}'.": {
    "code": 1058,
    "category": DiagnosticCategory.Error
  },
  "Enum name cannot be '{0}'.": {
    "code": 1059,
    "category": DiagnosticCategory.Error
  },
  "Module name cannot be '{0}'.": {
    "code": 1060,
    "category": DiagnosticCategory.Error
  },
  "Enum member must have initializer.": {
    "code": 1061,
    "category": DiagnosticCategory.Error
  },
  "Export assignment cannot be used in internal modules.": {
    "code": 1063,
    "category": DiagnosticCategory.Error
  },
  "Export assignment not allowed in module with exported element.": {
    "code": 1064,
    "category": DiagnosticCategory.Error
  },
  "Module cannot have multiple export assignments.": {
    "code": 1065,
    "category": DiagnosticCategory.Error
  },
  "Ambient enum elements can only have integer literal initializers.": {
    "code": 1066,
    "category": DiagnosticCategory.Error
  },
  "module, class, interface, enum, import or statement": {
    "code": 1067,
    "category": DiagnosticCategory.NoPrefix
  },
  "constructor, function, accessor or variable": {
    "code": 1068,
    "category": DiagnosticCategory.NoPrefix
  },
  "statement": {
    "code": 1069,
    "category": DiagnosticCategory.NoPrefix
  },
  "case or default clause": {
    "code": 1070,
    "category": DiagnosticCategory.NoPrefix
  },
  "identifier": {
    "code": 1071,
    "category": DiagnosticCategory.NoPrefix
  },
  "call, construct, index, property or function signature": {
    "code": 1072,
    "category": DiagnosticCategory.NoPrefix
  },
  "expression": {
    "code": 1073,
    "category": DiagnosticCategory.NoPrefix
  },
  "type name": {
    "code": 1074,
    "category": DiagnosticCategory.NoPrefix
  },
  "property or accessor": {
    "code": 1075,
    "category": DiagnosticCategory.NoPrefix
  },
  "parameter": {
    "code": 1076,
    "category": DiagnosticCategory.NoPrefix
  },
  "type": {
    "code": 1077,
    "category": DiagnosticCategory.NoPrefix
  },
  "type parameter": {
    "code": 1078,
    "category": DiagnosticCategory.NoPrefix
  },
  "'declare' modifier not allowed on import declaration.": {
    "code": 1079,
    "category": DiagnosticCategory.Error
  },
  "Function overload must be static.": {
    "code": 1080,
    "category": DiagnosticCategory.Error
  },
  "Function overload must not be static.": {
    "code": 1081,
    "category": DiagnosticCategory.Error
  },
  "Parameter property declarations cannot be used in an ambient context.": {
    "code": 1082,
    "category": DiagnosticCategory.Error
  },
  "Parameter property declarations cannot be used in a constructor overload.": {
    "code": 1083,
    "category": DiagnosticCategory.Error
  },
  "Invalid 'reference' directive syntax.": {
    "code": 1084,
    "category": DiagnosticCategory.Error
  },
  "Octal literals are not available when targeting ECMAScript 5 and higher.": {
    "code": 1085,
    "category": DiagnosticCategory.Error
  },
  "Accessors are not allowed in ambient contexts.": {
    "code": 1086,
    "category": DiagnosticCategory.Error
  },
  "'{0}' modifier cannot appear on a constructor declaration.": {
    "code": 1089,
    "category": DiagnosticCategory.Error
  },
  "'{0}' modifier cannot appear on a parameter.": {
    "code": 1090,
    "category": DiagnosticCategory.Error
  },
  "Duplicate identifier '{0}'.": {
    "code": 2000,
    "category": DiagnosticCategory.Error
  },
  "The name '{0}' does not exist in the current scope.": {
    "code": 2001,
    "category": DiagnosticCategory.Error
  },
  "The name '{0}' does not refer to a value.": {
    "code": 2002,
    "category": DiagnosticCategory.Error
  },
  "'super' can only be used inside a class instance method.": {
    "code": 2003,
    "category": DiagnosticCategory.Error
  },
  "The left-hand side of an assignment expression must be a variable, property or indexer.": {
    "code": 2004,
    "category": DiagnosticCategory.Error
  },
  "Value of type '{0}' is not callable. Did you mean to include 'new'?": {
    "code": 2161,
    "category": DiagnosticCategory.Error
  },
  "Value of type '{0}' is not callable.": {
    "code": 2006,
    "category": DiagnosticCategory.Error
  },
  "Value of type '{0}' is not newable.": {
    "code": 2007,
    "category": DiagnosticCategory.Error
  },
  "Value of type '{0}' is not indexable by type '{1}'.": {
    "code": 2008,
    "category": DiagnosticCategory.Error
  },
  "Operator '{0}' cannot be applied to types '{1}' and '{2}'.": {
    "code": 2009,
    "category": DiagnosticCategory.Error
  },
  "Operator '{0}' cannot be applied to types '{1}' and '{2}': {3}": {
    "code": 2010,
    "category": DiagnosticCategory.Error
  },
  "Cannot convert '{0}' to '{1}'.": {
    "code": 2011,
    "category": DiagnosticCategory.Error
  },
  "Cannot convert '{0}' to '{1}':{NL}{2}": {
    "code": 2012,
    "category": DiagnosticCategory.Error
  },
  "Expected var, class, interface, or module.": {
    "code": 2013,
    "category": DiagnosticCategory.Error
  },
  "Operator '{0}' cannot be applied to type '{1}'.": {
    "code": 2014,
    "category": DiagnosticCategory.Error
  },
  "Getter '{0}' already declared.": {
    "code": 2015,
    "category": DiagnosticCategory.Error
  },
  "Setter '{0}' already declared.": {
    "code": 2016,
    "category": DiagnosticCategory.Error
  },
  "Exported class '{0}' extends private class '{1}'.": {
    "code": 2018,
    "category": DiagnosticCategory.Error
  },
  "Exported class '{0}' implements private interface '{1}'.": {
    "code": 2019,
    "category": DiagnosticCategory.Error
  },
  "Exported interface '{0}' extends private interface '{1}'.": {
    "code": 2020,
    "category": DiagnosticCategory.Error
  },
  "Exported class '{0}' extends class from inaccessible module {1}.": {
    "code": 2021,
    "category": DiagnosticCategory.Error
  },
  "Exported class '{0}' implements interface from inaccessible module {1}.": {
    "code": 2022,
    "category": DiagnosticCategory.Error
  },
  "Exported interface '{0}' extends interface from inaccessible module {1}.": {
    "code": 2023,
    "category": DiagnosticCategory.Error
  },
  "Public static property '{0}' of exported class has or is using private type '{1}'.": {
    "code": 2024,
    "category": DiagnosticCategory.Error
  },
  "Public property '{0}' of exported class has or is using private type '{1}'.": {
    "code": 2025,
    "category": DiagnosticCategory.Error
  },
  "Property '{0}' of exported interface has or is using private type '{1}'.": {
    "code": 2026,
    "category": DiagnosticCategory.Error
  },
  "Exported variable '{0}' has or is using private type '{1}'.": {
    "code": 2027,
    "category": DiagnosticCategory.Error
  },
  "Public static property '{0}' of exported class is using inaccessible module {1}.": {
    "code": 2028,
    "category": DiagnosticCategory.Error
  },
  "Public property '{0}' of exported class is using inaccessible module {1}.": {
    "code": 2029,
    "category": DiagnosticCategory.Error
  },
  "Property '{0}' of exported interface is using inaccessible module {1}.": {
    "code": 2030,
    "category": DiagnosticCategory.Error
  },
  "Exported variable '{0}' is using inaccessible module {1}.": {
    "code": 2031,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of constructor from exported class has or is using private type '{1}'.": {
    "code": 2032,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public static property setter from exported class has or is using private type '{1}'.": {
    "code": 2033,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public property setter from exported class has or is using private type '{1}'.": {
    "code": 2034,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.": {
    "code": 2035,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of call signature from exported interface has or is using private type '{1}'.": {
    "code": 2036,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public static method from exported class has or is using private type '{1}'.": {
    "code": 2037,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public method from exported class has or is using private type '{1}'.": {
    "code": 2038,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of method from exported interface has or is using private type '{1}'.": {
    "code": 2039,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of exported function has or is using private type '{1}'.": {
    "code": 2040,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of constructor from exported class is using inaccessible module {1}.": {
    "code": 2041,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public static property setter from exported class is using inaccessible module {1}.": {
    "code": 2042,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public property setter from exported class is using inaccessible module {1}.": {
    "code": 2043,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.": {
    "code": 2044,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of call signature from exported interface is using inaccessible module {1}": {
    "code": 2045,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public static method from exported class is using inaccessible module {1}.": {
    "code": 2046,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of public method from exported class is using inaccessible module {1}.": {
    "code": 2047,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of method from exported interface is using inaccessible module {1}.": {
    "code": 2048,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of exported function is using inaccessible module {1}.": {
    "code": 2049,
    "category": DiagnosticCategory.Error
  },
  "Return type of public static property getter from exported class has or is using private type '{0}'.": {
    "code": 2050,
    "category": DiagnosticCategory.Error
  },
  "Return type of public property getter from exported class has or is using private type '{0}'.": {
    "code": 2051,
    "category": DiagnosticCategory.Error
  },
  "Return type of constructor signature from exported interface has or is using private type '{0}'.": {
    "code": 2052,
    "category": DiagnosticCategory.Error
  },
  "Return type of call signature from exported interface has or is using private type '{0}'.": {
    "code": 2053,
    "category": DiagnosticCategory.Error
  },
  "Return type of index signature from exported interface has or is using private type '{0}'.": {
    "code": 2054,
    "category": DiagnosticCategory.Error
  },
  "Return type of public static method from exported class has or is using private type '{0}'.": {
    "code": 2055,
    "category": DiagnosticCategory.Error
  },
  "Return type of public method from exported class has or is using private type '{0}'.": {
    "code": 2056,
    "category": DiagnosticCategory.Error
  },
  "Return type of method from exported interface has or is using private type '{0}'.": {
    "code": 2057,
    "category": DiagnosticCategory.Error
  },
  "Return type of exported function has or is using private type '{0}'.": {
    "code": 2058,
    "category": DiagnosticCategory.Error
  },
  "Return type of public static property getter from exported class is using inaccessible module {0}.": {
    "code": 2059,
    "category": DiagnosticCategory.Error
  },
  "Return type of public property getter from exported class is using inaccessible module {0}.": {
    "code": 2060,
    "category": DiagnosticCategory.Error
  },
  "Return type of constructor signature from exported interface is using inaccessible module {0}.": {
    "code": 2061,
    "category": DiagnosticCategory.Error
  },
  "Return type of call signature from exported interface is using inaccessible module {0}.": {
    "code": 2062,
    "category": DiagnosticCategory.Error
  },
  "Return type of index signature from exported interface is using inaccessible module {0}.": {
    "code": 2063,
    "category": DiagnosticCategory.Error
  },
  "Return type of public static method from exported class is using inaccessible module {0}.": {
    "code": 2064,
    "category": DiagnosticCategory.Error
  },
  "Return type of public method from exported class is using inaccessible module {0}.": {
    "code": 2065,
    "category": DiagnosticCategory.Error
  },
  "Return type of method from exported interface is using inaccessible module {0}.": {
    "code": 2066,
    "category": DiagnosticCategory.Error
  },
  "Return type of exported function is using inaccessible module {0}.": {
    "code": 2067,
    "category": DiagnosticCategory.Error
  },
  "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.": {
    "code": 2068,
    "category": DiagnosticCategory.Error
  },
  "A parameter list must follow a generic type argument list. '(' expected.": {
    "code": 2069,
    "category": DiagnosticCategory.Error
  },
  "Multiple constructor implementations are not allowed.": {
    "code": 2070,
    "category": DiagnosticCategory.Error
  },
  "Unable to resolve external module '{0}'.": {
    "code": 2071,
    "category": DiagnosticCategory.Error
  },
  "Module cannot be aliased to a non-module type.": {
    "code": 2072,
    "category": DiagnosticCategory.Error
  },
  "A class may only extend another class.": {
    "code": 2073,
    "category": DiagnosticCategory.Error
  },
  "A class may only implement another class or interface.": {
    "code": 2074,
    "category": DiagnosticCategory.Error
  },
  "An interface may only extend another class or interface.": {
    "code": 2075,
    "category": DiagnosticCategory.Error
  },
  "Unable to resolve type.": {
    "code": 2077,
    "category": DiagnosticCategory.Error
  },
  "Unable to resolve type of '{0}'.": {
    "code": 2078,
    "category": DiagnosticCategory.Error
  },
  "Unable to resolve type parameter constraint.": {
    "code": 2079,
    "category": DiagnosticCategory.Error
  },
  "Type parameter constraint cannot be a primitive type.": {
    "code": 2080,
    "category": DiagnosticCategory.Error
  },
  "Supplied parameters do not match any signature of call target.": {
    "code": 2081,
    "category": DiagnosticCategory.Error
  },
  "Supplied parameters do not match any signature of call target:{NL}{0}": {
    "code": 2082,
    "category": DiagnosticCategory.Error
  },
  "Invalid 'new' expression.": {
    "code": 2083,
    "category": DiagnosticCategory.Error
  },
  "Call signatures used in a 'new' expression must have a 'void' return type.": {
    "code": 2084,
    "category": DiagnosticCategory.Error
  },
  "Could not select overload for 'new' expression.": {
    "code": 2085,
    "category": DiagnosticCategory.Error
  },
  "Type '{0}' does not satisfy the constraint '{1}' for type parameter '{2}'.": {
    "code": 2086,
    "category": DiagnosticCategory.Error
  },
  "Could not select overload for 'call' expression.": {
    "code": 2087,
    "category": DiagnosticCategory.Error
  },
  "Cannot invoke an expression whose type lacks a call signature.": {
    "code": 2088,
    "category": DiagnosticCategory.Error
  },
  "Calls to 'super' are only valid inside a class.": {
    "code": 2089,
    "category": DiagnosticCategory.Error
  },
  "Generic type '{0}' requires {1} type argument(s).": {
    "code": 2090,
    "category": DiagnosticCategory.Error
  },
  "Type of array literal cannot be determined. Best common type could not be found for array elements.": {
    "code": 2092,
    "category": DiagnosticCategory.Error
  },
  "Could not find enclosing symbol for dotted name '{0}'.": {
    "code": 2093,
    "category": DiagnosticCategory.Error
  },
  "The property '{0}' does not exist on value of type '{1}'.": {
    "code": 2094,
    "category": DiagnosticCategory.Error
  },
  "Could not find symbol '{0}'.": {
    "code": 2095,
    "category": DiagnosticCategory.Error
  },
  "'get' and 'set' accessor must have the same type.": {
    "code": 2096,
    "category": DiagnosticCategory.Error
  },
  "'this' cannot be referenced in current location.": {
    "code": 2097,
    "category": DiagnosticCategory.Error
  },
  "Static methods cannot reference class type parameters.": {
    "code": 2099,
    "category": DiagnosticCategory.Error
  },
  "Class '{0}' is recursively referenced as a base type of itself.": {
    "code": 2100,
    "category": DiagnosticCategory.Error
  },
  "Interface '{0}' is recursively referenced as a base type of itself.": {
    "code": 2101,
    "category": DiagnosticCategory.Error
  },
  "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.": {
    "code": 2102,
    "category": DiagnosticCategory.Error
  },
  "'super' cannot be referenced in non-derived classes.": {
    "code": 2103,
    "category": DiagnosticCategory.Error
  },
  "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.": {
    "code": 2104,
    "category": DiagnosticCategory.Error
  },
  "Constructors for derived classes must contain a 'super' call.": {
    "code": 2105,
    "category": DiagnosticCategory.Error
  },
  "Super calls are not permitted outside constructors or in local functions inside constructors.": {
    "code": 2106,
    "category": DiagnosticCategory.Error
  },
  "'{0}.{1}' is inaccessible.": {
    "code": 2107,
    "category": DiagnosticCategory.Error
  },
  "'this' cannot be referenced within module bodies.": {
    "code": 2108,
    "category": DiagnosticCategory.Error
  },
  "Invalid '+' expression - types not known to support the addition operator.": {
    "code": 2111,
    "category": DiagnosticCategory.Error
  },
  "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.": {
    "code": 2112,
    "category": DiagnosticCategory.Error
  },
  "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.": {
    "code": 2113,
    "category": DiagnosticCategory.Error
  },
  "The type of a unary arithmetic operation operand must be of type 'any', 'number' or an enum type.": {
    "code": 2114,
    "category": DiagnosticCategory.Error
  },
  "Variable declarations of a 'for' statement cannot use a type annotation.": {
    "code": 2115,
    "category": DiagnosticCategory.Error
  },
  "Variable declarations of a 'for' statement must be of types 'string' or 'any'.": {
    "code": 2116,
    "category": DiagnosticCategory.Error
  },
  "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.": {
    "code": 2117,
    "category": DiagnosticCategory.Error
  },
  "The left-hand side of an 'in' expression must be of types 'any', 'string' or 'number'.": {
    "code": 2118,
    "category": DiagnosticCategory.Error
  },
  "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter.": {
    "code": 2119,
    "category": DiagnosticCategory.Error
  },
  "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.": {
    "code": 2120,
    "category": DiagnosticCategory.Error
  },
  "The right-hand side of an 'instanceof' expression must be of type 'any' or a subtype of the 'Function' interface type.": {
    "code": 2121,
    "category": DiagnosticCategory.Error
  },
  "Setters cannot return a value.": {
    "code": 2122,
    "category": DiagnosticCategory.Error
  },
  "Tried to query type of uninitialized module '{0}'.": {
    "code": 2123,
    "category": DiagnosticCategory.Error
  },
  "Tried to set variable type to uninitialized module type '{0}'.": {
    "code": 2124,
    "category": DiagnosticCategory.Error
  },
  "Function '{0}' declared a non-void return type, but has no return expression.": {
    "code": 2125,
    "category": DiagnosticCategory.Error
  },
  "Getters must return a value.": {
    "code": 2126,
    "category": DiagnosticCategory.Error
  },
  "Getter and setter accessors do not agree in visibility.": {
    "code": 2127,
    "category": DiagnosticCategory.Error
  },
  "Invalid left-hand side of assignment expression.": {
    "code": 2130,
    "category": DiagnosticCategory.Error
  },
  "Function declared a non-void return type, but has no return expression.": {
    "code": 2131,
    "category": DiagnosticCategory.Error
  },
  "Cannot resolve return type reference.": {
    "code": 2132,
    "category": DiagnosticCategory.Error
  },
  "Constructors cannot have a return type of 'void'.": {
    "code": 2133,
    "category": DiagnosticCategory.Error
  },
  "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.": {
    "code": 2134,
    "category": DiagnosticCategory.Error
  },
  "All symbols within a with block will be resolved to 'any'.": {
    "code": 2135,
    "category": DiagnosticCategory.Error
  },
  "Import declarations in an internal module cannot reference an external module.": {
    "code": 2136,
    "category": DiagnosticCategory.Error
  },
  "Class {0} declares interface {1} but does not implement it:{NL}{2}": {
    "code": 2137,
    "category": DiagnosticCategory.Error
  },
  "Class {0} declares class {1} as an interface but does not implement it:{NL}{2}": {
    "code": 2138,
    "category": DiagnosticCategory.Error
  },
  "The operand of an increment or decrement operator must be a variable, property or indexer.": {
    "code": 2139,
    "category": DiagnosticCategory.Error
  },
  "'this' cannot be referenced in static initializers in a class body.": {
    "code": 2140,
    "category": DiagnosticCategory.Error
  },
  "Class '{0}' cannot extend class '{1}':{NL}{2}": {
    "code": 2141,
    "category": DiagnosticCategory.Error
  },
  "Interface '{0}' cannot extend class '{1}':{NL}{2}": {
    "code": 2142,
    "category": DiagnosticCategory.Error
  },
  "Interface '{0}' cannot extend interface '{1}':{NL}{2}": {
    "code": 2143,
    "category": DiagnosticCategory.Error
  },
  "Duplicate overload signature for '{0}'.": {
    "code": 2144,
    "category": DiagnosticCategory.Error
  },
  "Duplicate constructor overload signature.": {
    "code": 2145,
    "category": DiagnosticCategory.Error
  },
  "Duplicate overload call signature.": {
    "code": 2146,
    "category": DiagnosticCategory.Error
  },
  "Duplicate overload construct signature.": {
    "code": 2147,
    "category": DiagnosticCategory.Error
  },
  "Overload signature is not compatible with function definition.": {
    "code": 2148,
    "category": DiagnosticCategory.Error
  },
  "Overload signature is not compatible with function definition:{NL}{0}": {
    "code": 2149,
    "category": DiagnosticCategory.Error
  },
  "Overload signatures must all be public or private.": {
    "code": 2150,
    "category": DiagnosticCategory.Error
  },
  "Overload signatures must all be exported or not exported.": {
    "code": 2151,
    "category": DiagnosticCategory.Error
  },
  "Overload signatures must all be ambient or non-ambient.": {
    "code": 2152,
    "category": DiagnosticCategory.Error
  },
  "Overload signatures must all be optional or required.": {
    "code": 2153,
    "category": DiagnosticCategory.Error
  },
  "Specialized overload signature is not subtype of any non-specialized signature.": {
    "code": 2154,
    "category": DiagnosticCategory.Error
  },
  "'this' cannot be referenced in constructor arguments.": {
    "code": 2155,
    "category": DiagnosticCategory.Error
  },
  "Instance member cannot be accessed off a class.": {
    "code": 2157,
    "category": DiagnosticCategory.Error
  },
  "Untyped function calls may not accept type arguments.": {
    "code": 2158,
    "category": DiagnosticCategory.Error
  },
  "Non-generic functions may not accept type arguments.": {
    "code": 2159,
    "category": DiagnosticCategory.Error
  },
  "A generic type may not reference itself with a wrapped form of its own type parameters.": {
    "code": 2160,
    "category": DiagnosticCategory.Error
  },
  "Rest parameters must be array types.": {
    "code": 2162,
    "category": DiagnosticCategory.Error
  },
  "Overload signature implementation cannot use specialized type.": {
    "code": 2163,
    "category": DiagnosticCategory.Error
  },
  "Export assignments may only be used at the top-level of external modules.": {
    "code": 2164,
    "category": DiagnosticCategory.Error
  },
  "Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules.": {
    "code": 2165,
    "category": DiagnosticCategory.Error
  },
  "Only public methods of the base class are accessible via the 'super' keyword.": {
    "code": 2166,
    "category": DiagnosticCategory.Error
  },
  "Numeric indexer type '{0}' must be a subtype of string indexer type '{1}'.": {
    "code": 2167,
    "category": DiagnosticCategory.Error
  },
  "Numeric indexer type '{0}' must be a subtype of string indexer type '{1}':{NL}{2}": {
    "code": 2168,
    "category": DiagnosticCategory.Error
  },
  "All numerically named properties must be subtypes of numeric indexer type '{0}'.": {
    "code": 2169,
    "category": DiagnosticCategory.Error
  },
  "All numerically named properties must be subtypes of numeric indexer type '{0}':{NL}{1}": {
    "code": 2170,
    "category": DiagnosticCategory.Error
  },
  "All named properties must be subtypes of string indexer type '{0}'.": {
    "code": 2171,
    "category": DiagnosticCategory.Error
  },
  "All named properties must be subtypes of string indexer type '{0}':{NL}{1}": {
    "code": 2172,
    "category": DiagnosticCategory.Error
  },
  "Generic type references must include all type arguments.": {
    "code": 2173,
    "category": DiagnosticCategory.Error
  },
  "Default arguments are not allowed in an overload parameter.": {
    "code": 2174,
    "category": DiagnosticCategory.Error
  },
  "Overloads cannot differ only by return type.": {
    "code": 2175,
    "category": DiagnosticCategory.Error
  },
  "Function expression declared a non-void return type, but has no return expression.": {
    "code": 2176,
    "category": DiagnosticCategory.Error
  },
  "Import declaration referencing identifier from internal module can only be made with variables, functions, classes, interfaces, enums and internal modules.": {
    "code": 2177,
    "category": DiagnosticCategory.Error
  },
  "Could not find symbol '{0}' in module '{1}'.": {
    "code": 2178,
    "category": DiagnosticCategory.Error
  },
  "Unable to resolve module reference '{0}'.": {
    "code": 2179,
    "category": DiagnosticCategory.Error
  },
  "Could not find module '{0}' in module '{1}'.": {
    "code": 2180,
    "category": DiagnosticCategory.Error
  },
  "Exported import declaration '{0}' is assigned value with type that has or is using private type '{1}'.": {
    "code": 2181,
    "category": DiagnosticCategory.Error
  },
  "Exported import declaration '{0}' is assigned value with type that is using inaccessible module '{1}'.": {
    "code": 2182,
    "category": DiagnosticCategory.Error
  },
  "Exported import declaration '{0}' is assigned type that has or is using private type '{1}'.": {
    "code": 2183,
    "category": DiagnosticCategory.Error
  },
  "Exported import declaration '{0}' is assigned type that is using inaccessible module '{1}'.": {
    "code": 2184,
    "category": DiagnosticCategory.Error
  },
  "Exported import declaration '{0}' is assigned container that is or is using inaccessible module '{1}'.": {
    "code": 2185,
    "category": DiagnosticCategory.Error
  },
  "Type reference '{0}' in extends clause does not reference constructor function for '{1}'.": {
    "code": 2186,
    "category": DiagnosticCategory.Error
  },
  "Internal module reference '{0}' in import declaration does not reference module instance for '{1}'.": {
    "code": 2187,
    "category": DiagnosticCategory.Error
  },
  "Module '{0}' cannot merge with previous declaration of '{1}' in a different file '{2}'.": {
    "code": 2188,
    "category": DiagnosticCategory.Error
  },
  "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}':{NL}Types of property '{3}' of types '{1}' and '{2}' are not identical.": {
    "code": 2189,
    "category": DiagnosticCategory.Error
  },
  "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.": {
    "code": 2190,
    "category": DiagnosticCategory.Error
  },
  "Ambient external module declaration cannot be reopened.": {
    "code": 2191,
    "category": DiagnosticCategory.Error
  },
  "All declarations of merged declaration '{0}' must be exported or not exported.": {
    "code": 2192,
    "category": DiagnosticCategory.Error
  },
  "'super' cannot be referenced in constructor arguments.": {
    "code": 2193,
    "category": DiagnosticCategory.Error
  },
  "Return type of constructor signature must be assignable to the instance type of the class.": {
    "code": 2194,
    "category": DiagnosticCategory.Error
  },
  "Ambient external module declaration must be defined in global context.": {
    "code": 2195,
    "category": DiagnosticCategory.Error
  },
  "Ambient external module declaration cannot specify relative module name.": {
    "code": 2196,
    "category": DiagnosticCategory.Error
  },
  "Import declaration in an ambient external module declaration cannot reference external module through relative external module name.": {
    "code": 2197,
    "category": DiagnosticCategory.Error
  },
  "Could not find the best common type of types of all return statement expressions.": {
    "code": 2198,
    "category": DiagnosticCategory.Error
  },
  "Import declaration cannot refer to external module reference when --noResolve option is set.": {
    "code": 2199,
    "category": DiagnosticCategory.Error
  },
  "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.": {
    "code": 2200,
    "category": DiagnosticCategory.Error
  },
  "'continue' statement can only be used within an enclosing iteration statement.": {
    "code": 2201,
    "category": DiagnosticCategory.Error
  },
  "'break' statement can only be used within an enclosing iteration or switch statement.": {
    "code": 2202,
    "category": DiagnosticCategory.Error
  },
  "Jump target not found.": {
    "code": 2203,
    "category": DiagnosticCategory.Error
  },
  "Jump target cannot cross function boundary.": {
    "code": 2204,
    "category": DiagnosticCategory.Error
  },
  "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.": {
    "code": 2205,
    "category": DiagnosticCategory.Error
  },
  "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.": {
    "code": 2206,
    "category": DiagnosticCategory.Error
  },
  "Expression resolves to '_super' that compiler uses to capture base class reference.": {
    "code": 2207,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.": {
    "code": 2208,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of call signature from exported interface has or is using private type '{1}'.": {
    "code": 2209,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of public static method from exported class has or is using private type '{1}'.": {
    "code": 2210,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of public method from exported class has or is using private type '{1}'.": {
    "code": 2211,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of method from exported interface has or is using private type '{1}'.": {
    "code": 2212,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of exported function has or is using private type '{1}'.": {
    "code": 2213,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.": {
    "code": 2214,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of call signature from exported interface is using inaccessible module {1}": {
    "code": 2215,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of public static method from exported class is using inaccessible module {1}.": {
    "code": 2216,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of public method from exported class is using inaccessible module {1}.": {
    "code": 2217,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of method from exported interface is using inaccessible module {1}.": {
    "code": 2218,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of exported function is using inaccessible module {1}.": {
    "code": 2219,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of exported class has or is using private type '{1}'.": {
    "code": 2220,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of exported interface has or is using private type '{1}'.": {
    "code": 2221,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of exported class is using inaccessible module {1}.": {
    "code": 2222,
    "category": DiagnosticCategory.Error
  },
  "TypeParameter '{0}' of exported interface is using inaccessible module {1}.": {
    "code": 2223,
    "category": DiagnosticCategory.Error
  },
  "Duplicate identifier '_i'. Compiler uses '_i' to initialize rest parameter.": {
    "code": 2224,
    "category": DiagnosticCategory.Error
  },
  "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.": {
    "code": 2225,
    "category": DiagnosticCategory.Error
  },
  "Type of conditional '{0}' must be identical to '{1}' or '{2}'.": {
    "code": 2226,
    "category": DiagnosticCategory.Error
  },
  "Type of conditional '{0}' must be identical to '{1}', '{2}' or '{3}'.": {
    "code": 2227,
    "category": DiagnosticCategory.Error
  },
  "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of an external module.": {
    "code": 2228,
    "category": DiagnosticCategory.Error
  },
  "Type '{0}' is missing property '{1}' from type '{2}'.": {
    "code": 4000,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types of property '{0}' of types '{1}' and '{2}' are incompatible.": {
    "code": 4001,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types of property '{0}' of types '{1}' and '{2}' are incompatible:{NL}{3}": {
    "code": 4002,
    "category": DiagnosticCategory.NoPrefix
  },
  "Property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.": {
    "code": 4003,
    "category": DiagnosticCategory.NoPrefix
  },
  "Property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.": {
    "code": 4004,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types '{0}' and '{1}' define property '{2}' as private.": {
    "code": 4005,
    "category": DiagnosticCategory.NoPrefix
  },
  "Call signatures of types '{0}' and '{1}' are incompatible.": {
    "code": 4006,
    "category": DiagnosticCategory.NoPrefix
  },
  "Call signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": {
    "code": 4007,
    "category": DiagnosticCategory.NoPrefix
  },
  "Type '{0}' requires a call signature, but type '{1}' lacks one.": {
    "code": 4008,
    "category": DiagnosticCategory.NoPrefix
  },
  "Construct signatures of types '{0}' and '{1}' are incompatible.": {
    "code": 4009,
    "category": DiagnosticCategory.NoPrefix
  },
  "Construct signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": {
    "code": 4010,
    "category": DiagnosticCategory.NoPrefix
  },
  "Type '{0}' requires a construct signature, but type '{1}' lacks one.": {
    "code": 4011,
    "category": DiagnosticCategory.NoPrefix
  },
  "Index signatures of types '{0}' and '{1}' are incompatible.": {
    "code": 4012,
    "category": DiagnosticCategory.NoPrefix
  },
  "Index signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": {
    "code": 4013,
    "category": DiagnosticCategory.NoPrefix
  },
  "Call signature expects {0} or fewer parameters.": {
    "code": 4014,
    "category": DiagnosticCategory.NoPrefix
  },
  "Could not apply type '{0}' to argument {1} which is of type '{2}'.": {
    "code": 4015,
    "category": DiagnosticCategory.NoPrefix
  },
  "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.": {
    "code": 4016,
    "category": DiagnosticCategory.NoPrefix
  },
  "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.": {
    "code": 4017,
    "category": DiagnosticCategory.NoPrefix
  },
  "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.": {
    "code": 4018,
    "category": DiagnosticCategory.NoPrefix
  },
  "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.": {
    "code": 4019,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible.": {
    "code": 4020,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible:{NL}{3}": {
    "code": 4021,
    "category": DiagnosticCategory.NoPrefix
  },
  "Type reference cannot refer to container '{0}'.": {
    "code": 4022,
    "category": DiagnosticCategory.Error
  },
  "Type reference must refer to type.": {
    "code": 4023,
    "category": DiagnosticCategory.Error
  },
  "Enums with multiple declarations must provide an initializer for the first enum element.": {
    "code": 4024,
    "category": DiagnosticCategory.Error
  },
  " (+ {0} overload(s))": {
    "code": 4025,
    "category": DiagnosticCategory.Message
  },
  "Variable declaration cannot have the same name as an import declaration.": {
    "code": 4026,
    "category": DiagnosticCategory.Error
  },
  "Signature expected {0} type arguments, got {1} instead.": {
    "code": 4027,
    "category": DiagnosticCategory.Error
  },
  "Property '{0}' defined as optional in type '{1}', but is required in type '{2}'.": {
    "code": 4028,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types '{0}' and '{1}' originating in inifinitely expanding type reference do not refer to same named type.": {
    "code": 4029,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types '{0}' and '{1}' originating in inifinitely expanding type reference have incompatible type arguments.": {
    "code": 4030,
    "category": DiagnosticCategory.NoPrefix
  },
  "Types '{0}' and '{1}' originating in inifinitely expanding type reference have incompatible type arguments:{NL}{2}": {
    "code": 4031,
    "category": DiagnosticCategory.NoPrefix
  },
  "Current host does not support '{0}' option.": {
    "code": 5001,
    "category": DiagnosticCategory.Error
  },
  "ECMAScript target version '{0}' not supported.  Specify a valid target version: '{1}' (default), or '{2}'": {
    "code": 5002,
    "category": DiagnosticCategory.Error
  },
  "Module code generation '{0}' not supported.": {
    "code": 5003,
    "category": DiagnosticCategory.Error
  },
  "Could not find file: '{0}'.": {
    "code": 5004,
    "category": DiagnosticCategory.Error
  },
  "A file cannot have a reference to itself.": {
    "code": 5006,
    "category": DiagnosticCategory.Error
  },
  "Cannot resolve referenced file: '{0}'.": {
    "code": 5007,
    "category": DiagnosticCategory.Error
  },
  "Cannot find the common subdirectory path for the input files.": {
    "code": 5009,
    "category": DiagnosticCategory.Error
  },
  "Emit Error: {0}.": {
    "code": 5011,
    "category": DiagnosticCategory.Error
  },
  "Cannot read file '{0}': {1}": {
    "code": 5012,
    "category": DiagnosticCategory.Error
  },
  "Unsupported file encoding.": {
    "code": 5013,
    "category": DiagnosticCategory.NoPrefix
  },
  "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.": {
    "code": 5014,
    "category": DiagnosticCategory.Error
  },
  "Unsupported locale: '{0}'.": {
    "code": 5015,
    "category": DiagnosticCategory.Error
  },
  "Execution Failed.{NL}": {
    "code": 5016,
    "category": DiagnosticCategory.Error
  },
  "Invalid call to 'up'": {
    "code": 5019,
    "category": DiagnosticCategory.Error
  },
  "Invalid call to 'down'": {
    "code": 5020,
    "category": DiagnosticCategory.Error
  },
  "Base64 value '{0}' finished with a continuation bit.": {
    "code": 5021,
    "category": DiagnosticCategory.Error
  },
  "Unknown option '{0}'": {
    "code": 5023,
    "category": DiagnosticCategory.Error
  },
  "Expected {0} arguments to message, got {1} instead.": {
    "code": 5024,
    "category": DiagnosticCategory.Error
  },
  "Expected the message '{0}' to have {1} arguments, but it had {2}": {
    "code": 5025,
    "category": DiagnosticCategory.Error
  },
  "Could not delete file '{0}'": {
    "code": 5034,
    "category": DiagnosticCategory.Error
  },
  "Could not create directory '{0}'": {
    "code": 5035,
    "category": DiagnosticCategory.Error
  },
  "Error while executing file '{0}': ": {
    "code": 5036,
    "category": DiagnosticCategory.Error
  },
  "Cannot compile external modules unless the '--module' flag is provided.": {
    "code": 5037,
    "category": DiagnosticCategory.Error
  },
  "Option mapRoot cannot be specified without specifying sourcemap option.": {
    "code": 5038,
    "category": DiagnosticCategory.Error
  },
  "Option sourceRoot cannot be specified without specifying sourcemap option.": {
    "code": 5039,
    "category": DiagnosticCategory.Error
  },
  "Options mapRoot and sourceRoot cannot be specified without specifying sourcemap option.": {
    "code": 5040,
    "category": DiagnosticCategory.Error
  },
  "Option '{0}' specified without '{1}'": {
    "code": 5041,
    "category": DiagnosticCategory.Error
  },
  "'codepage' option not supported on current platform.": {
    "code": 5042,
    "category": DiagnosticCategory.Error
  },
  "Concatenate and emit output to single file.": {
    "code": 6001,
    "category": DiagnosticCategory.Message
  },
  "Generates corresponding {0} file.": {
    "code": 6002,
    "category": DiagnosticCategory.Message
  },
  "Specifies the location where debugger should locate map files instead of generated locations.": {
    "code": 6003,
    "category": DiagnosticCategory.Message
  },
  "Specifies the location where debugger should locate TypeScript files instead of source locations.": {
    "code": 6004,
    "category": DiagnosticCategory.Message
  },
  "Watch input files.": {
    "code": 6005,
    "category": DiagnosticCategory.Message
  },
  "Redirect output structure to the directory.": {
    "code": 6006,
    "category": DiagnosticCategory.Message
  },
  "Do not emit comments to output.": {
    "code": 6009,
    "category": DiagnosticCategory.Message
  },
  "Skip resolution and preprocessing.": {
    "code": 6010,
    "category": DiagnosticCategory.Message
  },
  "Specify ECMAScript target version: '{0}' (default), or '{1}'": {
    "code": 6015,
    "category": DiagnosticCategory.Message
  },
  "Specify module code generation: '{0}' or '{1}'": {
    "code": 6016,
    "category": DiagnosticCategory.Message
  },
  "Print this message.": {
    "code": 6017,
    "category": DiagnosticCategory.Message
  },
  "Print the compiler's version: {0}": {
    "code": 6019,
    "category": DiagnosticCategory.Message
  },
  "Allow use of deprecated '{0}' keyword when referencing an external module.": {
    "code": 6021,
    "category": DiagnosticCategory.Message
  },
  "Specify locale for errors and messages. For example '{0}' or '{1}'": {
    "code": 6022,
    "category": DiagnosticCategory.Message
  },
  "Syntax:   {0}": {
    "code": 6023,
    "category": DiagnosticCategory.Message
  },
  "options": {
    "code": 6024,
    "category": DiagnosticCategory.Message
  },
  "file1": {
    "code": 6025,
    "category": DiagnosticCategory.Message
  },
  "Examples:": {
    "code": 6026,
    "category": DiagnosticCategory.Message
  },
  "Options:": {
    "code": 6027,
    "category": DiagnosticCategory.Message
  },
  "Insert command line options and files from a file.": {
    "code": 6030,
    "category": DiagnosticCategory.Message
  },
  "Version {0}": {
    "code": 6029,
    "category": DiagnosticCategory.Message
  },
  "Use the '{0}' flag to see options.": {
    "code": 6031,
    "category": DiagnosticCategory.Message
  },
  "{NL}Recompiling ({0}):": {
    "code": 6032,
    "category": DiagnosticCategory.Message
  },
  "STRING": {
    "code": 6033,
    "category": DiagnosticCategory.Message
  },
  "KIND": {
    "code": 6034,
    "category": DiagnosticCategory.Message
  },
  "file2": {
    "code": 6035,
    "category": DiagnosticCategory.Message
  },
  "VERSION": {
    "code": 6036,
    "category": DiagnosticCategory.Message
  },
  "LOCATION": {
    "code": 6037,
    "category": DiagnosticCategory.Message
  },
  "DIRECTORY": {
    "code": 6038,
    "category": DiagnosticCategory.Message
  },
  "NUMBER": {
    "code": 6039,
    "category": DiagnosticCategory.Message
  },
  "Specify the codepage to use when opening source files.": {
    "code": 6040,
    "category": DiagnosticCategory.Message
  },
  "This version of the Javascript runtime does not support the '{0}' function.": {
    "code": 7000,
    "category": DiagnosticCategory.Error
  },
  "Looking up path for identifier token did not result in an identifer.": {
    "code": 7001,
    "category": DiagnosticCategory.Error
  },
  "Unknown rule.": {
    "code": 7002,
    "category": DiagnosticCategory.Error
  },
  "Invalid line number ({0})": {
    "code": 7003,
    "category": DiagnosticCategory.Error
  },
  "Warn on expressions and declarations with an implied 'any' type.": {
    "code": 7004,
    "category": DiagnosticCategory.Message
  },
  "Variable '{0}' implicitly has an 'any' type.": {
    "code": 7005,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of '{1}' implicitly has an 'any' type.": {
    "code": 7006,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of function type implicitly has an 'any' type.": {
    "code": 7007,
    "category": DiagnosticCategory.Error
  },
  "Member '{0}' of object type implicitly has an 'any' type.": {
    "code": 7008,
    "category": DiagnosticCategory.Error
  },
  "'new' expression, which lacks a constructor signature, implicitly has an 'any' type.": {
    "code": 7009,
    "category": DiagnosticCategory.Error
  },
  "'{0}', which lacks return-type annotation, implicitly has an 'any' return type.": {
    "code": 7010,
    "category": DiagnosticCategory.Error
  },
  "Function expression, which lacks return-type annotation, implicitly has an 'any' return type.": {
    "code": 7011,
    "category": DiagnosticCategory.Error
  },
  "Parameter '{0}' of lambda function implicitly has an 'any' type.": {
    "code": 7012,
    "category": DiagnosticCategory.Error
  },
  "Constructor signature, which lacks return-type annotation, implicitly has an 'any' return type.": {
    "code": 7013,
    "category": DiagnosticCategory.Error
  },
  "Lambda Function, which lacks return-type annotation, implicitly has an 'any' return type.": {
    "code": 7014,
    "category": DiagnosticCategory.Error
  },
  "Array Literal implicitly has an 'any' type from widening.": {
    "code": 7015,
    "category": DiagnosticCategory.Error
  },
  "'{0}', which lacks 'get' accessor and parameter type annotation on 'set' accessor, implicitly has an 'any' type.": {
    "code": 7016,
    "category": DiagnosticCategory.Error
  }
};
}